<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>衡仔的技术小窝</title>
  
  <subtitle>Just do it</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-08T15:20:53.353Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>VitaHeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用两个栈实现队列</title>
    <link href="http://yoursite.com/2018/06/08/%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2018/06/08/用两个栈实现队列/</id>
    <published>2018-06-08T15:22:38.687Z</published>
    <updated>2018-06-08T15:20:53.353Z</updated>
    
    <content type="html"><![CDATA[<ul><li>题目描述：</li></ul><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p><a id="more"></a><ul><li>解题思路：</li></ul><p>Push操作：入栈 =&gt; 入队<br>Pop操作：队列的特点是<strong>先进先出</strong>，栈的特点是<strong>先进后出</strong>，所以可以利用两个栈，先将栈1的元素都压入栈2中，再从栈2中依次将元素弹出，从而实现队列的Pop操作。</p><ul><li>源代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</span><br><span class="line">        stack1.push(node);                        <span class="comment">//入栈 =&gt; 入队</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stack1.empty() &amp;&amp; stack2.empty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> p;</span><br><span class="line">        <span class="keyword">if</span> (stack2.empty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack1.empty()) &#123;</span><br><span class="line">                p = stack1.top();</span><br><span class="line">                stack2.push(p);                    <span class="comment">//不断取出栈1的栈顶元素并压入栈2中</span></span><br><span class="line">                stack1.pop();                       <span class="comment">//弹出栈1中的元素</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        p = stack2.top();</span><br><span class="line">        stack2.pop();</span><br><span class="line">        <span class="keyword">return</span> p;                                    <span class="comment">//弹出栈2中的元素并返回值，经过栈2的元素转移可以达到队列的效果</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stack1;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stack2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;题目描述：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="栈" scheme="http://yoursite.com/tags/%E6%A0%88/"/>
    
      <category term="队列" scheme="http://yoursite.com/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>数值的整数次方</title>
    <link href="http://yoursite.com/2018/06/08/%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/"/>
    <id>http://yoursite.com/2018/06/08/数值的整数次方/</id>
    <published>2018-06-08T15:22:38.684Z</published>
    <updated>2018-06-08T15:38:16.404Z</updated>
    
    <content type="html"><![CDATA[<ul><li>题目描述：</li></ul><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p><a id="more"></a><ul><li>解题思路：</li></ul><p>该题主要考察<strong>代码的完整性</strong>，需要结合指数表达式特征以及所给变量的正负性全面考虑。<br>有可能出现的情况如下：</p><ol><li>底数base!=0，指数exponent&gt;0   =&gt;  累乘  (这是我们最容易想到的一条)</li><li>底数base=0，指数exponent<0 =="">  编译出错，分母不能为0</0></li><li>底数base!=0，指数exponent<0 =="">  累乘结果取倒数(base^exponent = 1/base^(-exponent))</0></li></ol><ul><li>源代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> result = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;                   <span class="comment">//定义一个标记变量，用来区分不同的情况</span></span><br><span class="line">        <span class="keyword">if</span> (exponent&lt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (base==<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                exponent = -exponent;</span><br><span class="line">                flag = <span class="number">1</span>;               <span class="comment">//表明此时为指数小于0的情况</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;exponent;i++) &#123;</span><br><span class="line">            result*=base;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">            result = <span class="number">1</span>/result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>快速幂</p></blockquote><p>在这里扩展一下关于<strong>快速幂</strong>的知识点。</p><p><strong>快速幂</strong>就是快速算底数的n次幂，时间复杂度为$O(log_2N)$。<br>该题即是求幂运算的过程，在前面的解法中，我们利用了<strong>累乘</strong>进行求解，时间复杂度为$O(N)$，换用快速幂方式可以提高时间效率。</p><ul><li>原理：</li></ul><p>以求$a^b$来进行介绍，我们需要将指数b转换为二进制数，然后利用<strong>位运算</strong>来实现。</p><p><code>b&amp;1</code> : 取指数b的二进制最低位，判断和1是否相同，相同返回1，不同返回0(用于判断所在位为1还是0)<br><code>b&gt;&gt;1</code> : 把b的二进制右移一位(每次判断完之后将最后一位去掉，便于判断下一位置)</p><ul><li>源代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> r = <span class="number">1</span>,base = a;              <span class="comment">//变量r为最终结果，base为底数</span></span><br><span class="line">   <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b&amp;<span class="number">1</span>)    r*=base;        <span class="comment">//当前二进制位为1，需要参与运算</span></span><br><span class="line">        base*=base;                 </span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实例分析：</li></ul><p>求解$3^11$，我们首先需要将指数11转换为<strong>二进制数</strong>。</p><p>$$<br>11_{10} =&gt; 1011_2<br>11 = 2^0<em>1 + 2^1</em>1 + 2^2<em>0 + 2^3</em>1<br>3^11 = 3^{2^0} <em> 3^{2^1} </em> 3^{2^3} = 3 <em> 3^2 </em> 3^8</p><table><thead><tr><th style="text-align:center">指数b最低位</th><th style="text-align:center">当前结果</th><th style="text-align:center">底数</th><th style="text-align:center">指数b右移后</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1*3</td><td style="text-align:center">base=3^2</td><td style="text-align:center">101</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1<em>3</em>3^2</td><td style="text-align:center">base=3^4</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1<em>3</em>3^2</td><td style="text-align:center">base=3^8</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1<em>3</em>3^2*3^8</td><td style="text-align:center">base=3^16</td><td style="text-align:center">NULL</td></tr></tbody></table><p>$$</p><p>当指数b为NULL时，程序结束，返回最终结果$r=1<em>3</em>3^2*3^8$</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;题目描述：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>斐波那契数列</title>
    <link href="http://yoursite.com/2018/06/08/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <id>http://yoursite.com/2018/06/08/斐波那契数列/</id>
    <published>2018-06-08T15:22:38.682Z</published>
    <updated>2018-06-08T15:38:00.991Z</updated>
    
    <content type="html"><![CDATA[<ul><li>题目描述：</li></ul><p>斐波那契数列以如下递归的方式定义：<br>$$<br>F_0=0,F_1=1,F_n=F_{n-1}+F_{n-2}(n&gt;=2,n∈N^*)<br>$$<br>这个数列从第三项开始，每一项都等于前两项之和。</p><a id="more"></a><ul><li>解题思路：</li></ul><p>该数列有一定的规律性，可以利用<strong>递归</strong>或者<strong>迭代</strong>方式求解。<br>递归调用时会有大量重复计算量，如果测试数据特别大的话，可能会造成溢出，也可以用<strong>动态规划</strong>思想来求解。</p><ul><li>源代码：</li></ul><blockquote><p><strong>递归</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> Fibonacci(n<span class="number">-1</span>)+Fibonacci(n<span class="number">-2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>举例：</strong><br>当n=5时，通过一次次的递归调用，<br>Fibonacci(5)=Fibonacci(4)+Fibonacci(3)<br>            =Fibonacci(3)+Fibonacci(2)+Fibonacci(2)+Fibonacci(1)<br>            =Fibonacci(2)+Fibonacci(1)+Fibonacci(1)+Fibonacci(0)+Fibonacci(1)+Fibonacci(0)+Fibonacci(1)<br>            =Fibonacci(1)+Fibonacci(0)+Fibonacci(1)+Fibonacci(1)+Fibonacci(0)+Fibonacci(1)+Fibonacci(0)+Fibonacci(1)<br>递归时需要将有用数据压入栈中，从递归式可以看出，当n特别大时，容易造成栈溢出。由于递归的时候，我们并不会记录Fibonacci(1)和Fibonacci(0)的结果，这样也会造成大量的重复计算，所以该方法不可取。</p><blockquote><p><strong>尾递归</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Fibonacci_tail(n,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Fibonacci_tail</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> f1,<span class="keyword">int</span> f2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>)    <span class="keyword">return</span> f2;</span><br><span class="line">        <span class="keyword">return</span> Fibonacci_tail(n<span class="number">-1</span>,f2,f1+f2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>尾递归就是从最后开始计算，每递归一次就算出相应的结果，函数调用出现在调用者函数的尾部。因为是尾部，所以没有必要去保存任何局部变量。它是针对传统递归算法的一种优化。与方法1的递归式相比，尾递归只保留后一个函数堆栈，大大减少了栈空间的使用，也能够有效得避免了方法1会出现的栈溢出情况。</p><p><strong>举例：</strong><br>当n=5时，Fibonacci_tail(5)=Fibonacci_tail(4,1,1)=Fibonacci_tail(3,1,2)=Fibonacci_tail(2,2,3)=Fibonacci_tail(1,3,5)=5</p><blockquote><p><strong>迭代</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">0</span>)   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>)   <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> f1=<span class="number">0</span>,f2=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> f3;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            f3 = f1 + f2;</span><br><span class="line">            f1 = f2;</span><br><span class="line">            f2 = f3;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><strong>动态规划</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>)    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> record[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            record[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        record[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            record[i] = record[i<span class="number">-1</span>]+record[i<span class="number">-2</span>];        <span class="comment">//递归关系，自底向上进行计算</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> record[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>想要利用<strong>动态规划</strong>去求解问题时，需要满足<strong>最优子结构</strong>性质和<strong>递归关系</strong>。根据前面对于递归解法的分析，由于斐波那契数列每一项的值都是固定不变的，可以认为满足<strong>最优子结构</strong>性质，该数列本身就有很强的递归关系，所以可以运用动态规划方式去求解。自底向上求解并保存在数组中直至找到待求解。</p><p><strong>举例：</strong><br>当n=5时，<br>record[2]=record[1]+record[0]=1;<br>record[3]=record[n2]+record[1]=2;<br>record[4]=record[3]+record[2]=3;<br>record[5]=record[4]+record[3]=5;<br>可以看出整个的求解过程中，并没有重复计算，每次求解时需要用到的值都已经被放进了数组中，可以直接使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;题目描述：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;斐波那契数列以如下递归的方式定义：&lt;br&gt;$$&lt;br&gt;F_0=0,F_1=1,F_n=F_{n-1}+F_{n-2}(n&amp;gt;=2,n∈N^*)&lt;br&gt;$$&lt;br&gt;这个数列从第三项开始，每一项都等于前两项之和。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="递归" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="迭代" scheme="http://yoursite.com/tags/%E8%BF%AD%E4%BB%A3/"/>
    
  </entry>
  
  <entry>
    <title>旋转数组的最小数字</title>
    <link href="http://yoursite.com/2018/06/08/%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2018/06/08/旋转数组的最小数字/</id>
    <published>2018-06-08T15:22:38.679Z</published>
    <updated>2018-06-08T15:38:03.788Z</updated>
    
    <content type="html"><![CDATA[<ul><li>题目描述：</li></ul><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p><a id="more"></a><ul><li>解题思路：</li></ul><p>①最直接的方法：遍历数组，直接从中找出最小值，时间复杂度为<strong>O(n)</strong>。<br>②根据旋转数组的特点，可以将旋转后的数组划分为两个子数组，分别是未经旋转的元素和旋转的元素。由于两个子数组都是非递减排列的，所以待求最小元素即位于两个子数组的交界处，这样可以利用<strong>二分查找</strong>算法来进行查找，时间复杂度为<strong>O(logn)</strong>。<br>存在以下几种情况：<br>a: 如果数组的0个元素发生旋转，那么数组序列未发生改变，最小元素即为原数组的第一个元素<br>b: 如果数组的部分元素发生旋转，利用二分查找算法来找出最小元素<br>c: 题目要求数组为非递减排序，可能会出现重复元素，其中存在一种特例无法使用二分查找算法，即数组中间元素与首元素及末尾元素均相等时，无法判断出中间元素是属于哪一部分，此时可以通过直接遍历数组的方式找出最小元素。</p><ul><li>源代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rotateArray)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = rotateArray.size();</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;                    <span class="comment">//若数组大小为0，返回为0</span></span><br><span class="line">        <span class="keyword">int</span> left =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = size<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = <span class="number">0</span>;            <span class="comment">//若数组的0个元素发生旋转，最小元素即为数组的第一个元素</span></span><br><span class="line">        <span class="keyword">while</span> (rotateArray[left] &gt;= rotateArray[right]) &#123;</span><br><span class="line">            <span class="comment">//一般情况下，数组部分元素发生旋转时，旋转后的数组首元素&gt;=尾部元素</span></span><br><span class="line">            <span class="keyword">if</span> (right-left == <span class="number">1</span>) &#123;</span><br><span class="line">                mid = right;        <span class="comment">//当数组只有两个元素时，最小元素即为尾部元素，不必再继续查找</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (rotateArray[left] == rotateArray[mid] &amp;&amp; rotateArray[right] == rotateArray[mid]) &#123;</span><br><span class="line">                <span class="comment">//特例，此时无法判断中间元素的具体位置，无法利用二分查找，可以使用直接遍历数组的方式寻找最小元素</span></span><br><span class="line">                <span class="keyword">return</span> MinOrder(rotateArray,left,right);</span><br><span class="line">            &#125;</span><br><span class="line">            mid = (left+right)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (rotateArray[mid] &gt;= rotateArray[left]) &#123;</span><br><span class="line">                left = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (rotateArray[mid] &lt;= rotateArray[right]) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rotateArray[mid];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//直接遍历数组找最小值的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">MinOrder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">array</span>,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="built_in">array</span>[left];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left+<span class="number">1</span>;i&lt;=right;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>[i] &lt; result) &#123;</span><br><span class="line">                result = <span class="built_in">array</span>[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;题目描述：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="查找" scheme="http://yoursite.com/tags/%E6%9F%A5%E6%89%BE/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>替换空格</title>
    <link href="http://yoursite.com/2018/06/08/%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    <id>http://yoursite.com/2018/06/08/替换空格/</id>
    <published>2018-06-08T15:22:38.659Z</published>
    <updated>2018-06-08T15:19:18.794Z</updated>
    
    <content type="html"><![CDATA[<ul><li>题目描述：</li></ul><p>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><a id="more"></a><ul><li>解题思路：</li></ul><p>如果直接对源字符串进行搜索，每次遇到空格时便将其替换成给定的3个字符，由于字符串长度会发生改变，所以空格后面的字符都需要进行移动，整个过程中字符移动的次数比较多。<br>我们可以预先找好空格的个数并扩展字符串长度，从后向前进行搜索，每个字符串确定好位置后不会再改变，这样效率会更高一些。</p><ul><li>源代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">replaceSpace</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">NULL</span> || length &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> spaceNum =<span class="number">0</span>,oldlength = <span class="number">0</span>;                <span class="comment">//记录空格数和字符串初始长度</span></span><br><span class="line">        <span class="keyword">while</span> (str[i] != <span class="string">'\0'</span>) &#123;                      <span class="comment">//遍历字符串，字符串末尾的'\0'作为结束判断条件</span></span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">' '</span>) &#123;</span><br><span class="line">                spaceNum++;                            <span class="comment">//记录字符串中空格的个数</span></span><br><span class="line">            &#125;</span><br><span class="line">            oldlength++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> newlength = oldlength + spaceNum*<span class="number">2</span>;        <span class="comment">//扩展后字符串的长度</span></span><br><span class="line">        <span class="keyword">if</span> (newlength &gt; length) &#123;</span><br><span class="line">            <span class="keyword">return</span>;                                    <span class="comment">//如果替换空格后的长度大于字符串总长度，无法替换</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (oldlength &gt;=<span class="number">0</span> &amp;&amp; newlength &gt; oldlength) &#123;    <span class="comment">//字符串未遍历到首元素且依旧存在空格未被替换时</span></span><br><span class="line">            <span class="keyword">if</span> (str[oldlength] == <span class="string">' '</span>) &#123;</span><br><span class="line">                str[newlength--] = <span class="string">'0'</span>;</span><br><span class="line">                str[newlength--] = <span class="string">'2'</span>;</span><br><span class="line">                str[newlength--] = <span class="string">'%'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                str[newlength--] = str[oldlength];            <span class="comment">//源字符串每个结点的位置都会唯一确定且不再改变</span></span><br><span class="line">            &#125;</span><br><span class="line">            oldlength--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;题目描述：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
  <entry>
    <title>二进制中1的个数</title>
    <link href="http://yoursite.com/2018/06/08/%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>http://yoursite.com/2018/06/08/二进制中1的个数/</id>
    <published>2018-06-08T15:22:38.653Z</published>
    <updated>2018-06-08T15:16:14.896Z</updated>
    
    <content type="html"><![CDATA[<ul><li>题目描述：</li></ul><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p><a id="more"></a><ul><li>解题思路：</li></ul><p>该题涉及到数值的二进制表示，利用<strong>位运算</strong>的一些特性可以更方便得解决问题。<br>如何将整数转化为二进制数以及如何将负数转化为补码形式是本题的已知条件，我们主要的工作是根据给定的二进制数，找出1的个数。</p><p>先来观察一下该题特征：</p><p>假如给定一个二进制数m=11010100，我们可以直观得看出该数中1的个数为4，具体解题思路可以参照如下步骤：</p><ol><li>将m减去1, m-1 = 11010011 ，观察 m-1 与 m 的不同，它等价于从数值m最右边的1位置处开始，后面的数值均取反，即 <code>100 =&gt; 011</code></li><li>将 m 与 m-1 <strong>按位与</strong>运算， m&amp;(m-1) = 11010000 ，我们可以看出经过<code>&amp;</code>运算后，后三位均变为0，此时记录一下1的个数+1</li><li>按照这种方法不断进行：<br>11010000 &amp; (11010000-1) = 11000000      1的个数+1<br>11000000 &amp; (11000000-1) = 10000000      1的个数+1<br>10000000 &amp; (10000000-1) = 00000000      1的个数+1</li><li>每执行一次<strong>按位与</strong>运算，原数值m会减少一个1，直到数值变为0，此时1的个数为4</li></ol><ul><li>源代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="keyword">int</span>  <span class="title">NumberOf1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">while</span> (n!=<span class="number">0</span>) &#123;</span><br><span class="line">            n = n &amp; (n<span class="number">-1</span>);</span><br><span class="line">            count++;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> count;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;题目描述：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="位运算" scheme="http://yoursite.com/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>二维数组中的查找</title>
    <link href="http://yoursite.com/2018/06/08/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <id>http://yoursite.com/2018/06/08/二维数组中的查找/</id>
    <published>2018-06-08T14:59:00.000Z</published>
    <updated>2018-06-08T15:09:25.264Z</updated>
    
    <content type="html"><![CDATA[<ul><li>题目描述：</li></ul><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><a id="more"></a><ul><li>解题思路：</li></ul><p>结合该类型数组的特点，可以看得出该数组右下角元素最大，以左下角元素为参照点，向上元素值递减，向右元素值递增，可以此作为查找时的判断条件，去寻找给定值。</p><ul><li>源代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">Public:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; <span class="built_in">array</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rowCount = <span class="built_in">array</span>.size();</span><br><span class="line">        <span class="keyword">int</span> colCount = <span class="built_in">array</span>[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=rowCount<span class="number">-1</span>,j=<span class="number">0</span>;i&gt;=<span class="number">0</span> &amp;&amp; j&lt;colCount;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (target == <span class="built_in">array</span>[i][j]) </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (target &lt; <span class="built_in">array</span>[i][j])  &#123;</span><br><span class="line">                i--;                <span class="comment">//向上寻找</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (target &gt; <span class="built_in">array</span>[i][j]) &#123;</span><br><span class="line">                j++;                <span class="comment">//向右寻找</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;               <span class="comment">//找不到给定值，返回错误</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;题目描述：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="查找" scheme="http://yoursite.com/tags/%E6%9F%A5%E6%89%BE/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>跳台阶</title>
    <link href="http://yoursite.com/2018/06/08/%E8%B7%B3%E5%8F%B0%E9%98%B6/"/>
    <id>http://yoursite.com/2018/06/08/跳台阶/</id>
    <published>2018-06-08T02:00:00.000Z</published>
    <updated>2018-07-18T06:46:33.002Z</updated>
    
    <content type="html"><![CDATA[<p>常见的跳台阶问题有两种，而它们的本质依旧是和<strong>斐波那契数列</strong>有关。</p><a id="more"></a><h1 id="跳台阶"><a href="#跳台阶" class="headerlink" title="跳台阶"></a>跳台阶</h1><ul><li>题目描述：</li></ul><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><ul><li>解题思路：</li></ul><p>根据题意，<br>当n=1时，f(1)=1;<br>当n=2时，青蛙可以一次跳2级，也可以两次跳1级，f(2)=2<br>当n=3时，我们可以倒过来思考这个问题，假设青蛙已经完成了跳台阶，我们可以考虑一下它最后一步是如何跳过来的，f(3)就等于各种情况下跳台阶次数之和。<br>我们能够看出，这时只有两种情况：<br>①最后一次是跳了1级台阶，也就是从第二级台阶跳了一次完成任务<br>②最后一次是跳了2级台阶，也就是从第一级台阶跳了一次完成任务<br>所以f(3)=①+②<br>情况①等于青蛙跳到第二级台阶的次数<br>情况②等于青蛙跳到第一级台阶的次数<br>所以f(3)=f(2)+f(1)<br>依次类推，f(n)=f(n-1)+f(n-2)，满足<strong>斐波那契数列</strong>特征。</p><ul><li>源代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jumpFloor</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">1</span>)    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">2</span>)    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> f1 = <span class="number">1</span>,f2 = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> f3;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=number;i++) &#123;</span><br><span class="line">            f3 = f1 + f2;</span><br><span class="line">            f1 = f2;</span><br><span class="line">            f2 = f3;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="变态跳台阶"><a href="#变态跳台阶" class="headerlink" title="变态跳台阶"></a>变态跳台阶</h1><ul><li>题目描述：</li></ul><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><ul><li>解题思路：</li></ul><p>它是对<strong>跳台阶</strong>问题的一个变形，不再限制青蛙一次可以跳台阶的级数，类比跳台阶问题的解题思路，<br>例如当n=5时，我们依旧可以倒过来去思考这个问题，假设青蛙已经完成了跳台阶，我们可以考虑一下它最后一步是如何跳过来的，跳台阶的总数就等于各种情况下跳台阶的次数之和。<br>①最后一次是跳了1级台阶，也就是从第4级台阶跳了一次完成任务<br>②最后一次是跳了2级台阶，也就是从第3级台阶跳了一次完成任务<br>③最后一次是跳了3级台阶，也就是从第2级台阶跳了一次完成任务<br>④最后一次是跳了4级台阶，也就是从第1级台阶跳了一次完成任务<br>⑤最后一次是跳了5级台阶，也就是从第0级台阶跳了一次完成任务<br>所以f(5)=①+②+③+④+⑤<br>情况①等于青蛙跳到第4级台阶的次数<br>情况②等于青蛙跳到第3级台阶的次数<br>情况③等于青蛙跳到第2级台阶的次数<br>情况④等于青蛙跳到第1级台阶的次数<br>情况⑤等于青蛙直接从起点跳到了终点<br>所以f(5)=f(4)+f(3)+f(2)+f(1)+1<br>依次类推，f(n)=f(n-1)+f(n-2)+f(n-3)+…+f(1)+1<br>将该规律式进行整理，f(n+1)=f(n)+f(n-1)+…+f(1)+1<br>两式相减，可以得到：<strong>f(n+1)=2*f(n)</strong><br>找到该题的规律之后，问题便非常简单了。</p><ul><li>源代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jumpFloorII</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">1</span>)    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">2</span>)    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*jumpFloorII(number<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见的跳台阶问题有两种，而它们的本质依旧是和&lt;strong&gt;斐波那契数列&lt;/strong&gt;有关。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="递归" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>从尾到头打印链表</title>
    <link href="http://yoursite.com/2018/06/08/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2018/06/08/从尾到头打印链表/</id>
    <published>2018-06-08T02:00:00.000Z</published>
    <updated>2018-07-18T06:46:38.306Z</updated>
    
    <content type="html"><![CDATA[<ul><li>题目描述：</li></ul><p>输入一个链表，从尾到头打印链表每个节点的值。</p><a id="more"></a><ul><li>解题思路：</li></ul><p>利用递归方式求解比较简单，从链表头结点开始一层层地向下一结点进行递归，到达尾结点时递归结束，在“返回”的过程中依次将结点值打印输出。</p><ul><li>源代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  struct ListNode &#123;</span></span><br><span class="line"><span class="comment">*        int val;</span></span><br><span class="line"><span class="comment">*        struct ListNode *next;</span></span><br><span class="line"><span class="comment">*        ListNode(int x) :</span></span><br><span class="line"><span class="comment">*              val(x), next(NULL) &#123;</span></span><br><span class="line"><span class="comment">*        &#125;</span></span><br><span class="line"><span class="comment">*  &#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; value;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; printListFromTailToHead(ListNode* head) &#123;</span><br><span class="line">        <span class="keyword">if</span> (head != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                printListFromTailToHead(head-&gt;next);</span><br><span class="line">            &#125;</span><br><span class="line">            value.push_back(head-&gt;val);            <span class="comment">//递归本质：“返”的过程中依次从尾到头打印结点值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;题目描述：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输入一个链表，从尾到头打印链表每个节点的值。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>写在新一年高考日</title>
    <link href="http://yoursite.com/2018/06/07/%E5%86%99%E5%9C%A8%E6%96%B0%E4%B8%80%E5%B9%B4%E9%AB%98%E8%80%83%E6%97%A5/"/>
    <id>http://yoursite.com/2018/06/07/写在新一年高考日/</id>
    <published>2018-06-07T08:50:00.000Z</published>
    <updated>2018-06-08T15:06:22.389Z</updated>
    
    <content type="html"><![CDATA[<p>这两天，又是新一年的高考日，我在教室里写这篇文章的同时，无数学子亦在考场上奋笔疾书。已经很长一段时间没写点什么，今天就稍微唠唠。</p><a id="more"></a><blockquote><p><strong>为何个人博客滞留了这么久？</strong></p></blockquote><p>从个人博客时间线上可以看得出，上一篇博客的时间还停留在2月28日，那时候自己还处于寒假期间，转眼间已经6月了，这段时间我没有添加一篇博客，是你太飘了，还是觉得它不重要了？</p><p>事实上，它也有一些客观方面的因素。现在已经第14周了，我还记得从刚开学的第一天开始，自己在想办法整理Linux知识点并准备发表一篇博客，那时候我遇到一个问题，我想要在Linux平台上实际操作一遍总结的命令知识点并将其保存成GIF图片整合到博客当中，所以当时就萌生了给自己的电脑装<strong>双系统</strong>的念头(这里面有很关键的一点思维就是：一方面我觉得自己都已经大三了，还不会装系统实在是说不过去，另一方面是我这样子做拉长了学习战线，因为我担心自己会慢慢忘记自己最开始的初衷什么)，结合这件事情，我的初衷只是想将Linux知识点整理总结成一篇博客，但是我却又冒着风险花时间去给自己的电脑装系统，后来我在装Ubuntu系统的时候，不小心把Windows系统弄坏了，不得已把Windows也重装了一遍，也就是在那个时候，自己之前搭建的Hexo博客环境就被破坏了，我一直没有花时间再去搞，直到昨天自己才重新搭建Hexo环境，所以其中这段时间，自己没有办法提交自己的博客。<br>而这段时间，自己并不是什么都没有做，我先前给自己定下的这学期工作重心是<strong>算法学习</strong>，我也在牛客网上刷了一些算法题，并将其进行了整理，只是一直保存在本地，没有提交到博客上面，过段时间我会将其都转移上来。</p><blockquote><p><strong>此次搭建博客的过程中是否遇到了什么问题？</strong></p></blockquote><p>我用的Hexo的NexT主题，本身它的搭建过程也并不太复杂，整个过程是比较顺利的，其中有个别需要注意的地方：<br>因为我一直都是参照着<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT使用文档</a>来进行相关配置，而这里面关于NexT主题的版本下载不是最新版的，只更新到了5.XX版本，现在NexT主题已经更新到了6.XX版本，主要是因为这个主题在GitHub的更新库已经由<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">iissnan/hexo-theme-next</a>转移到了<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">theme-next/hexo-theme-next</a>，如果你还是利用原来的库，在后面使用Hexo的过程中，它会提示你升级版本，所以在利用GitHub克隆版本库的时候，最好直接使用最新地址。<br>同时，我发现新版本的NexT主题已经解决了MathJax公式不能正确渲染的问题。因为我之前曾经遇到过这样的问题，当时还整理了一篇博客<a href="https://www.ai-heng.cn/2017/08/03/hexo%E5%8D%9A%E5%AE%A2MathJax%E5%85%AC%E5%BC%8F%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">hexo博客MathJax公式渲染问题</a>，不过这次我重新搭建好环境后，那些MathJax公式已经可以正常使用，不需要再做什么修改，唯一一点不正确的地方在于<code>\</code>的渲染，我们都知道在写分段函数的时候，需要利用<code>\\</code>来进行换行，但是我发现它最后只渲染出了一个<code>\</code>，如果去解释的话，第一个<code>\</code>应该是起到转义字符的作用，所以，我们在写分段函数时需要用<code>\\\</code>，我只发现了这一点问题，因为影响不大，所以就没有继续深究。</p><blockquote><p><strong>来讲一讲你这段时间的心路历程吧</strong></p></blockquote><p>刚刚我也提到了，主要是因为我装双系统时出现了问题，导致hexo博客一直没有去更新，我当时的想法是觉得学习战线拉得有点长，担心自己断了弦。事实上，自己的确是断了弦，我从刚开始就坚持去<strong>量化自我</strong>，那时候花费了太多时间去重装系统并了解相关方面的知识(好的一方面是自己掌握了如何去装系统)，当我成功装好双系统后，我想过是否整理一篇教程，最后没能去做。这一阶段完成之后我便有些不知所措，后来刷了大约两周左右的算法题吧，而这就是问题的核心所在，由于我之前装系统拉得战线太长，导致我最需要做的事情反而做的最少，我从一开始就明确这学期自己的重心是学习算法，可是我却花了很少的一段时间，重点放错了位置，造成了我的问题，因为我一直在逃避这件事，导致最后取得的效果不是很好。<br>期间，心态方面也是出现了问题。直至前几周，自己才慢慢重新去定位自己，慢慢恢复平静。这时候，自己的心态以及思维方面也发生了一些转变。<br>我这学期对自己的期许是<strong>少点日记分析，多点行动实践</strong>，但是我发现很多时候，自己依旧是行动不起来。虽然没有写日记，但是自己转变了另外一种记录生活的方式，每天都会总结自己的所思所想，让我清醒地认识到自己每天在想些什么。<br>稳定与拼搏、浮躁与冥想、鸡汤与激励、初心与信仰、爱情追求与内心感受与自尊与投入、自立与初心、运动与自信、健身与活力、游戏与自律、痛苦与快乐….<br>看似简单的词汇，却蕴含着自己一直以来的价值观，我能够从中解读出很多东西，而这些也都是支撑着自己一直走下去的动力。<br>无论何时，选择去相信自己的初心，勿忘初心方得始终，如果我不能够坚持自己的信仰，我不知道该如何生活下去。</p><blockquote><p><strong>最后想对自己说点什么</strong></p></blockquote><blockquote class="blockquote-center"><p>生活不易，且行且珍惜！ </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天，又是新一年的高考日，我在教室里写这篇文章的同时，无数学子亦在考场上奋笔疾书。已经很长一段时间没写点什么，今天就稍微唠唠。&lt;/p&gt;
    
    </summary>
    
      <category term="心情随笔" scheme="http://yoursite.com/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="心语" scheme="http://yoursite.com/tags/%E5%BF%83%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>18~22岁的你，现在处于什么状态</title>
    <link href="http://yoursite.com/2018/02/28/%E7%94%9F%E6%B4%BB%E7%8A%B6%E6%80%81/"/>
    <id>http://yoursite.com/2018/02/28/生活状态/</id>
    <published>2018-02-28T09:00:00.000Z</published>
    <updated>2018-02-28T08:53:33.673Z</updated>
    
    <content type="html"><![CDATA[<p>写这篇文章，花费了自己两天的时间，原文是写在了<strong>知乎</strong>的同名问题下面<a href="https://www.zhihu.com/question/63480952/answer/330615982" target="_blank" rel="noopener">二十岁左右（18～22）的你，现在处于什么状态？</a>，因为我觉得这是一次对自己生活状态比较认真的总结，所以希望在这里也发一下。</p><a id="more"></a><p>97 年的，目前大三，18 ~ 22 岁正是自己的大学时光，现如今大学生涯也快结束了，对自己的生活状态还是有些感触的…</p><p>在这段时光里，我印象最为深刻的一点就是同自身进行的斗争，因为大学在人们眼里既是天堂，也是地狱，关键在于你如何去生活，我为此开心过，也流泪过…</p><p>初恋女友是高二时谈的，我和她一起走过了高考，却也分手在那个夏天。这场恋爱，改变了自己的心境，奠定了我接下来几年大学生活的主基调，我那时候开始觉得谈恋爱很耗费时间和精力，所以分手之后，大学期间不想再谈恋爱，想用更多的时间去规划自己的生活，做自己喜欢做的事情，大学即是一个新的开始，我也想展现一个全新的自己。所以在高考完的那个暑假，我对自己做了一些期许，作为我大学的信条，包括不谈恋爱，不玩游戏，不担任职务，追求自由与静心态，做自己喜欢做的事情等等。</p><p>结合自己这几年的表现，我觉得可以从爱情、游戏、健身、爱好、思维、人际交往以及工作学习等诸多方面来窥见我的生活状态。</p><blockquote><p><strong>爱情</strong></p></blockquote><p>目前大学已过大半，我的确是没有谈恋爱，不过事情也没那么简单。</p><p>大一的时候，我在社团里对一个女生一见钟情，总是会在社团活动时忍不住看她，那可是大一啊！我当时苦于自己刚说过大学期间不谈恋爱，不能在大一的时候就…所以对此一直都很纠结，在社团元旦晚会上我们一起演过爱情话剧(男女主角)，那是我唯一一次牵她的手。当然在这里也要感谢亲爱的编剧把我们俩撮合在了一起，不过我不争气，虽然后来还是没有忍住和她聊了很长一段时间，但是我一直都没有捅破那张纸，因为我担心如果真的恋爱了，会影响自己之前做得规划，所以到最后就这样错过了…</p><p>只是我开始变得越来越矫情，虽然我一直不谈恋爱，但是身边的人都一个个脱单了，我的心里也感觉不是个滋味。</p><ul><li>曾经有一份真诚的爱情…</li><li>以前喜欢一个人，现在喜欢一个人，到头来，终究是一个人</li><li>手机里存满了关于分手的歌，搞得自己好像谈过很多恋爱一样</li><li>这世上真话本就不多，一位女子的脸红胜过一大段对白</li><li>因为双方都没有开口，所以，有很多事情，就这样错过了</li><li>据说人类有三大错觉，第一就是觉得别人喜欢你</li></ul><p>这些都是我曾经更换过的<strong>个人签名</strong>，就好像自己是个情场老手一样，但是其实自己只是一个感情白痴罢了。</p><p>所以，就<strong>感情</strong>这方面而言，</p><p>高中的时候学校禁止谈恋爱，我和她无法在校园里光明正大得牵手<br>大学虽然是谈恋爱的好时光，由于我的思想观念，我没有去把握，就这样错过了</p><p>其实现在想想，觉得还是有些遗憾的…</p><blockquote><p><strong>游戏</strong></p></blockquote><p>游戏，无疑是让我又爱又恨的东西，从小也是比较喜欢玩游戏，但那个时候也仅限于周末才有时间去玩，但是大学不一样，就算你整天玩游戏，也没有人去管你。高中的时候喜欢玩 LOL ，也因为希望能够全心冲刺高考而戒掉了，所以在进入大学之前，我并未玩什么游戏。鉴于我对自己的期许，游戏在我眼中就成为了一种堕落的行为，我一直小心翼翼地朝着自己的期许前进，去培养自己喜欢做的事情，而不是沉迷于游戏，去荒废青春。但是<strong>理想很丰满，现实很骨感</strong>，大一的时候自己表现还挺不错，随着时间的流逝，还是没能一直做到坚守自我，开始玩游戏，而且每次都会沉迷于游戏，玩得很疯，没有一点儿时间观念，它慢慢地演变成了让我大学期间很头疼的一件事情，因为它会占据自己大量的时间，让我选择不谈恋爱的同时又没有能够真正去培养自己的兴趣爱好，而且自己玩的时候没有时间观念，对自己的身心以及视力都是很大的摧残，戒来戒去就是戒不掉，对我的生活造成了很大的困扰。</p><p>从大二下学期开始，之后的很长一段时间，我的生活都处于一种极端的状态，一方面我意识到自己的时间不多了，把自己希望去培养的兴趣爱好(电影，阅读，旅游)之类都搁置一边，开始努力去学习专业知识，但是另一方面，我又经常会沉迷游戏，这种生活状态让我很矛盾，直至现在依旧是如此。最近知乎上有一个问题<a href="https://www.zhihu.com/question/266808434" target="_blank" rel="noopener">如何看待父亲发文怒斥网游:它害了一个年代的孩子？</a>也是关于游戏方面的，从下面的回答来看，大部分观点倾向于不要将锅都让游戏来背而忽略了家庭教育问题，也有人认为它不仅是娱乐，一款好的游戏也是一门艺术。自己也是作为一个玩游戏的人，花费在游戏上太多的时间让我很不舒服，且不说我个人认为<strong>垃圾游戏，毁我青春</strong>，但是我一直都无法认同它，也一直都不明白自己是否应该坚持戒掉游戏，原本在大学里被游戏所困扰是在我意料之外的，因为我当初制定对自己的期许时觉得我应该是有能力克制自己的，但是我没有做到，而且还因为游戏放弃过自己的学习。前段时间，<strong>吃鸡游戏</strong>火了起来，我和室友们一有时间就<strong>五黑吃鸡</strong>，根本没有将学习放在心上。</p><p>截止到目前为止，我针对游戏的态度，刚开始主观上不认同它，将其视为堕落荒废的行为，但是到了大二我开始玩游戏，而且每次疯玩之后都会让我的内心饱受煎熬，需要很长一段时间才能恢复，但是恢复状态之后，过了一段时间还是没能忍住去玩，为此我写了很多日记，为了帮助自己更好地认清内心的想法(就是在那个时候，我发现自己记录日记的方向开始改变，在日记里经常会表现出自己<strong>消极</strong>的一方面)。后来，我对游戏的态度曾尝试过进行转变，因为觉得这样反反复复也不是办法，既然你戒不掉，就想着能不能将其和自己的生活融合在一起，也就尝试了几天，只是我每次玩游戏依旧是没有时间观念，这让我很头疼。</p><p>所以，就<strong>游戏</strong>这方面而言，</p><p>它是最让我捉摸不透的一件事情，很考验我的<strong>自控力</strong>，我目前的想法还是希望接下来能够尽可能得减少玩游戏的<strong>频率</strong>，并不是强制自己完全不玩，可以在你努力完成一些比较辛苦的任务工作之后适当放松休闲，将其视为一种对自己无害的<strong>奖励</strong>，绝不应该是以往那种没有一点儿时间观念的疯玩。这对于自己也是一项严峻的挑战，因为环境也是很重要的，如果室友还是一直玩游戏，多少会对自己造成一定的干扰。只希望自己能够再多努力一点，多坚持一点。</p><blockquote><p><strong>健身</strong></p></blockquote><p>我是比较瘦弱的那类人，但是我一直有一个健身梦，如果说游戏是我认为堕落荒废的行为，那么健身就是我认为积极向上的行为，我希望能够成为一个更加强壮的人。刚升入大学的时候，我的体重只有 100 斤，经过两年断断续续的健身，现在也就 120 斤。之所以说是断断续续得健身，这还是和我刚刚分析过的心境有关，因为我一直处于一种极端的状态，要么认真健身学习，要么疯玩游戏，一边努力打造自己的身材，一边又在摧残自己的身心，这可能是比较典型的<strong>完美主义</strong>的体现，<strong>要么完美，要么一无是处</strong>，它对我的各方面进度都造成了很大的干扰。</p><p>而且，有时候我也会迷茫，突然间忘记健身的意义是什么。记得有一天晚上我正在宿舍举哑铃，而室友都在玩游戏，我的心情开始慢慢变糟，因为健身本身就不是一件很轻松的事情，它是一个苦乐交织的过程，那一刻我突然意识不到自己健身的意义在哪里，为什么不去玩游戏呢，玩游戏比这要轻松快乐多了呀？</p><p>所以，就<strong>健身</strong>这方面而言，</p><p>由于各种方面的原因，我的健身进程会被耽搁，当我打开 keep 看到上次锻炼是在几个月前时，心里挺不是滋味的。因为这并不是自己想要的结果。但是我还是会继续坚持下去，因为自己明明也已经锻炼了这么久。</p><p><img src="http://opznmu7n5.bkt.clouddn.com/zh2_2.png" alt=""></p><p>你要明白自己这样做的意义到底是什么，对此我想告诉自己的就是：我之所以觉得健身是对的，而不是游戏，正如 <strong>keep</strong> 上面所说<strong>自律给我自由</strong>，健身可以帮助自己做到自律，让我能够更好地掌控自己的生活，让自己做事情能够充满自信，而游戏在我眼里只是放松休闲，适当娱乐即可，无法为我带来更大的裨益。</p><p><img src="http://opznmu7n5.bkt.clouddn.com/zh2_3.jpg" alt=""></p><blockquote><p><strong>爱好</strong></p></blockquote><p>我前面提到，之所以不想谈恋爱，不愿玩游戏，是因为我对自己有期许，我想培养自己喜欢做的事情，我想要去掌控自己的生活。而这些又具体是什么呢？</p><p>我在上大学之前，除了学习和游戏之外，也没什么兴趣爱好，所以我希望能够在大学期间培养一些喜欢做的事情，去充实自己的精神生活。在大一的时候，我开始经常性地听歌，看电影，看文学书，看哲学书，看心理学视频，写影评，外出游玩，跑步健身，体育选了篮球课，学校的各个比赛都去参与…总之，我想多做一些平时没做过的事情，希望找到自己的兴趣所在，大一那一年过得很充实，不过到现在为止，自己真正坚持下来的寥寥无几。其中，我最喜欢的就是<strong>看电影</strong>，我之前很少看电影，所以在大学的时候，我在空闲时间会去看一些经典电影，而且我还注重一种仪式感。我喜欢在一个宁静的夜晚，把其他的社交软件都关掉，带上耳机，一个人静静地欣赏电影，我喜欢这种沉浸其中的感觉。刚开始的时候我看完一部电影会试着去写影评，但后来我觉得有些麻烦，没再坚持下去，我会在看电影的时候截一些我喜欢的图保存下来，如果是去电影院看的话，我也会把电影票根收藏起来，留作一种纪念。我觉得这就是我找到的一种生活乐趣，我很喜欢这种感觉。</p><p>不过中途也遭遇过一些变故。因为我过于注重仪式感，曾经试图从电影中得到一些有价值的东西，认为它一定能够给自己带来启迪，帮助我更好地去生活。记得有一天晚上，根据我以往的习惯，应该看一部电影的，但是那段时间我在生活中遭遇了一些挫折，心情不太好，在看电影的过程中我没有体会到以往那种心静的感觉，而是感觉有些心塞难过，我就在那样的一种心情下看完了电影，我开始问自己，我看电影的意义是什么，就算你看了这么多优秀、经典的电影，但是你的生活依旧过得很糟糕，它没能对你带来启迪或帮助。之后的一段时间里，我没再怎么看电影，因为我似乎找不到这样做的理由。我明白，这是一种错误的认识，我将其作为一种生活乐趣，而你不能以一种<strong>悲观</strong>的心态将自己生活中遭遇的问题都归结到这上面去。</p><p>所以，就<strong>爱好</strong>这方面而言，</p><p>目前真正走进自己心里的是<strong>音乐</strong>、<strong>健身</strong>和<strong>电影</strong>，我想过多出去走走，想过多读读书，想过课下多和别人打打篮球，但是都没能很好地坚持下去，这些都是自己留下的遗憾，因为大学生涯已快结束，我需要将 80% 的时间精力都放置于工作学习之上，留给自己去休闲娱乐的时间已经不多了，不过我还是希望自己能够再找到一些自己喜欢做的事情，去充实自己的生活。</p><blockquote><p><strong>思维</strong></p></blockquote><p>高二有一段时间，我的学习状态很差，还曾经因此退学过一段时间，在那个时候我就开始注重自己的心理，因为我想要知道自己究竟在想些什么，才会让我如何痛苦困惑，所以在刚升入大学的时候，我对于<strong>心理学</strong>比较感兴趣，希望能够更加地了解自己。那段时间父母也不止一次问过我不开心的原因，但是我却无法清楚得用语言表达出来我内心的感受到底是怎么样的，我只感受到痛苦，但是不知道问题出在哪儿。也是在那个时候，我开始写日记，因为我想去剖析自己的心理，我想一点点地把自己的生活以及心理活动用文字的形式展现出来，让我清楚得明白自己在感受什么情绪以及为什么会这样，是由于什么事情让你感到困惑。它对我带来了很大的帮助，在我写日记的过程中，我不止一次有过顿悟的感觉，因为经过自己的分析之后，我内心深处的想法都被我写了出来，然后我突然有了一种恍然大悟的感觉，感觉好轻松，因为我明白了自己内心到底在想些什么以及我所做的事情是依据我大脑中的什么想法。</p><p>对此，我印象特别深刻的就是有一次用电脑写日记，写了好久，写完之后心情特别舒畅，感觉很爽，我发现自己已经不知不觉敲了 3000 多字，连我自己都大吃一惊，那是我第一次写那么长的日记，还发了朋友圈。</p><p><img src="http://opznmu7n5.bkt.clouddn.com/zh2_5.png" alt=""></p><p>在后来，我写过更多的， 5000 字，甚至 10000 字，可能对于大部分人来讲，这难以置信，一篇日记你能写到一万字？但是我当时的确是写了很多，那一次是国庆节假期刚结束，因为我在假期的表现很差，心中愁绪万千，我花了两天的时间，把萦绕在我脑海里的各种问题，都进行了细致的剖析，全部写完之后，已经是 10000 多字了…</p><p><img src="http://opznmu7n5.bkt.clouddn.com/zh2_1.png" alt=""></p><p>去年，是我写日记写得最多的一年。同时，它也为我带来了一些副作用，当别人在学习的时候我在写日记，当别人在玩游戏的时候我在写日记，它占据了自己很多的时间。另一方面，我觉得自己记录日记的方向在慢慢发生改变，从高中刚开始写日记时，我都不知道该写什么，所以我每天都会凑字数，让自己坚持下去，形成一种习惯，那个时候虽然日记写得很少，但是当时对我起到了很大的作用，在高三那段艰苦的岁月里，我也能每天把一些积极的事情尽可能地写到日记上鼓励自己。但是最近，我利用电脑写日记，而且每次都能写很多，我却发现有很多时候自己都是在发泄内心消极的情绪和想法，我觉得这并不是我所希望利用日记去呈现的东西。</p><p>或许人人都应该懂点心理学，懂得如何去更好地管理自己的情绪，懂得如何去更快乐地生活，通过改变自己对于某件事的认知来影响自己的情感。在这里，给大家推荐一个很不错的<strong>心理学视频</strong><a href="http://open.163.com/special/opencourse/positivepsychology.html" target="_blank" rel="noopener">哈佛幸福课</a>，里面主要讲解的是关于<strong>积极心理学</strong>，对于我的生活真的带来了很大的帮助，让我更好地了解了自己。而且在这个视频的末尾，讲师也提到了一点<strong>不要打电话告诉我这门课有多棒，而是告诉我你开始变得不一样了</strong>，这套课程我在大一时就开始接触了，尽管它对我的思维方面带来了一些转变，但是我的生活有时候仍然会很糟糕，它无法保证你看完之后就一定会变得快乐，但是人们更愿意去相信你做过的事情而不是你说的事情，如果你仅仅是看了这些东西，而不曾将你转变的思维与行动结合起来，那它也就只能停留在思维层面，无法为自己带来实质性的改变。</p><p>所以，针对<strong>思维</strong>方面而言，</p><p>我们都听过了很多道理仍然过不好这一生，大道理谁都懂只是做不到而已，我不希望再将<br>其只停留在思维层面，少一些日记分析，多一些行动实践，我希望能够花费更多地时间去将<strong>思维与行为</strong>融合起来。</p><blockquote><p><strong>人际交往</strong></p></blockquote><p>虽然我也明白人际交往是比较重要的，但是我本身并不是一个特别外向的人，再结合我上面分析了这么多，大都只是一个人的故事，原本就没有将自己的生活重心放在这上面，我选择不担任职务，其实就是对这些交际不是特别感兴趣，自己平时也都是独处，很少和朋友沟通联系，所以这一点我做得一直都不是特别好。在大一的时候也曾想着提升自己的<strong>情商</strong>，看过一本这方面的书籍，不过由于和人的接触并不是特别多，所以可能也没有什么显著得提升。</p><p>而且呢，由于我当时过度追求一个人的心境，也做过一些略微 crazy 的事情，比如在<strong>《你的名字。》</strong>首映当晚我一个人去看了这部电影(要知道其他人都是情侣一起去看的)，不过我当时并不在意这些，我特别享受那种一个人的感觉…<br>具体细节方面呐，可以看一下我的这篇回答:)<br><a href="https://www.zhihu.com/question/35070138/answer/234508914" target="_blank" rel="noopener">关于孤独，什么样的描述最能引起你的共鸣？</a></p><p>所以，针对<strong>人际交往</strong>这方面而言，</p><p>自己并不是特别感兴趣，也不太擅长，但是它又是比较重要的一部分，我还是觉得如果有可能的话，自己还是应该想些办法将其重视起来。</p><blockquote><p><strong>工作学习</strong></p></blockquote><p>接下来聊聊工作与学习，自己学的是计算机软件专业，但是几年的学习并没有让我成为一个IT大牛，原因有很多方面，刚开始的时候自己对编程并不太感兴趣，课堂上老师讲的知识都是一些理论知识，不足以让自己学会编程，而在空闲时间里我做的也都是我上面提到的各个方面，编程方面并未有什么长进。同时，又因为自己的生活经常处于一种极端的状态，平时能够认真学习，但是经常会因为玩游戏而中断自己的学习进度，所以进步比较慢。还有一些其他方面的原因，例如自己很少跟别人沟通交流，有时候在学习上会走一些弯路等等。</p><p>正如我前面所说，尽管我花费了很多时间去看心理学、情商、哲学等方面的书籍，但是它们似乎并没有让我在学习与生活中表现得更好，在旁人眼里，自己也只是一个普通人罢了，在班级里并未担任什么职务，虽然在社团里出于一些原因当了一个部长，不过自己的表现并不是特别好，对一些事情没有表现出太多的主见，也没参加过什么比赛…但还是那句话，你不能将生活中的失利都归结到一件事情上，至少现在的我能够对自己有更多得认识了解，我觉得这就已经很棒了。</p><p>现在已经大三了，自己面临着考研与就业的抉择，对此我也苦恼纠结了一段时间，而结合自己的实际情况，我的初步打算即是考虑先就业两三年，看是否能够站住脚，待工作稳定下来之后再结合自身实际情况以及行业发展动向去考虑继续工作还是读研深造。而且，这几天我逐渐意识到，已经陆陆续续有公司开始招收19届实习生，对此我的心里还是比较忐忑的，心里也感觉有些慌乱，因为我对于自己不太自信，已经要开始走上社会了，还是会缺乏底气。</p><p>所以，针对<strong>工作学习</strong>方面而言，</p><p>它是我接下来最需要去关注的核心，我明白自己在专业学习上欠缺得很多，不管之前的自己表现如何，人还是要向前看的，自己需要尽120分的努力去和懈怠和拖延抗争下去。一方面已经开始需要去留意实习招聘信息，如果有机会的话，可以试着去投简历；另一方面，还是需要不断给自己充电，去掌握更多的专业技能，帮助自己去找到更好的工作。</p><p>写到这里，差不多也要收尾啦，码了超多的字，可能没几个人能够耐心地看完哈，我已经尽量将自己的想法表达得规范有条理一些了。总得来说呢，</p><ul><li>没有<strong>谈恋爱</strong>感觉是自己留下的遗憾</li><li>在不断和<strong>游戏</strong>进行抗争的过程中，对它的态度和看法慢慢有所转变</li><li>愈来愈希望自己能够一直将<strong>健身</strong>这项运动坚持下去</li><li>想要去看更多优秀的<strong>电影</strong></li><li>想要在生活中发掘自己更多的<strong>爱好</strong></li><li>想办法去不断提升自己的<strong>思维</strong>认知并加以运用</li><li><strong>人际交往</strong>是自己的一块心结，处于想要去做又不想去做的矛盾心理</li><li><strong>工作学习</strong>方面更是不容小觑，因为总感觉自己是一个<strong>理想主义者</strong>，每天想得特别多但是真正做到得少之又少，想要找到一份好工作，还需要去下更大的工夫…</li></ul><p>所以，接下来对自己的期许即是：</p><p><strong>少点矫情抱怨，多点努力行动*</strong></p><p>不管是想更合理地玩游戏也好，想培养更多的兴趣爱好也罢，这还是需要建立在一定的经济基础之上才行，当务之急就是努力奋斗，找到一份好的工作。所以，给自己加加油！</p><p><img src="http://opznmu7n5.bkt.clouddn.com/zh2_6.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写这篇文章，花费了自己两天的时间，原文是写在了&lt;strong&gt;知乎&lt;/strong&gt;的同名问题下面&lt;a href=&quot;https://www.zhihu.com/question/63480952/answer/330615982&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;二十岁左右（18～22）的你，现在处于什么状态？&lt;/a&gt;，因为我觉得这是一次对自己生活状态比较认真的总结，所以希望在这里也发一下。&lt;/p&gt;
    
    </summary>
    
      <category term="心情随笔" scheme="http://yoursite.com/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="心语" scheme="http://yoursite.com/tags/%E5%BF%83%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>微博项目_发表微博</title>
    <link href="http://yoursite.com/2018/02/23/%E5%BE%AE%E5%8D%9A%E9%A1%B9%E7%9B%AE_%E5%8F%91%E8%A1%A8%E5%BE%AE%E5%8D%9A/"/>
    <id>http://yoursite.com/2018/02/23/微博项目_发表微博/</id>
    <published>2018-02-23T01:50:00.000Z</published>
    <updated>2018-06-05T11:19:25.527Z</updated>
    
    <content type="html"><![CDATA[<p>接下来，我们开始着手对于微博方面的一些处理，在这一节中，我主要完成两个方面的功能实现，一方面是将微博视图呈现出来，另一方面是实现<strong>发表微博</strong>的功能。</p><a id="more"></a><h1 id="微博视图"><a href="#微博视图" class="headerlink" title="微博视图"></a>微博视图</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /practice/Home/View/Common/weibo.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">condition</span>=<span class="string">'!$weibo'</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>没有发布的微博<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">else</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>发布用户<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户头像<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>微博内容<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>发布时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">name</span>=<span class="string">'weibo'</span> <span class="attr">item</span>=<span class="string">'v'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;$v.id&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;$v.username&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;if condition='$v["</span><span class="attr">face50</span>"]'&gt;</span>__ROOT__/Uploads/&#123;$v.face50&#125;<span class="tag">&lt;<span class="name">else</span> /&gt;</span>__PUBLIC__/Images/noface.gif<span class="tag">&lt;/<span class="name">if</span>&gt;</span>"&gt;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;$v.content&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;$v.time&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;if condition='$v["</span><span class="attr">mini</span>"]'&gt;</span>__ROOT__/Uploads/&#123;$v.mini&#125;<span class="tag">&lt;<span class="name">else</span> /&gt;</span>NULL<span class="tag">&lt;/<span class="name">if</span>&gt;</span>"&gt;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;$page&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于我没有专门去布局一个前端页面来承载这些微博数据，所以在这里我只是简单得使用了一个表格来获取这些数据。同时，我在这里调用了TP框架中的一个<strong>分页类</strong>，实现了将数据分页的效果。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* /practice/Home/Controller/WeiboController.class.php */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiboController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//微博视图</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">weibo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $uid = <span class="keyword">array</span>(session(<span class="string">'uid'</span>));           <span class="comment">//获取当前用户</span></span><br><span class="line">        $result = M(<span class="string">'follow'</span>)-&gt;field(<span class="string">'follow'</span>)-&gt;where(<span class="keyword">array</span>(<span class="string">'fans'</span> =&gt; session(<span class="string">'uid'</span>)))-&gt;select();           <span class="comment">//获取当前用户所有关注的好友ID</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($result) &#123;              <span class="comment">//将二维结果数组转化为一维数组</span></span><br><span class="line">            <span class="keyword">foreach</span> ($result <span class="keyword">as</span> $v) &#123;</span><br><span class="line">                $uid[] = $v[<span class="string">'follow'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组合WHERE条件，条件为当前用户自身的ID与当前用户所有关注好友的ID</span></span><br><span class="line">        $where = <span class="keyword">array</span>(<span class="string">'uid'</span> =&gt; <span class="keyword">array</span>(<span class="string">'IN'</span>,$uid));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分页功能</span></span><br><span class="line">        $count = M(<span class="string">'weibo'</span>)-&gt;where($where)-&gt;count();</span><br><span class="line">        $page = <span class="keyword">new</span> \Think\Page($count,<span class="number">10</span>);</span><br><span class="line">        $page-&gt;setConfig(<span class="string">'prev'</span> , <span class="string">'上一页'</span>);</span><br><span class="line">        $page-&gt;setConfig(<span class="string">'next'</span> , <span class="string">'下一页'</span>);</span><br><span class="line">        $limit = $page-&gt;firstRow . <span class="string">','</span> . $page-&gt;listRows;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取所有微博</span></span><br><span class="line">        $weibo = D(<span class="string">'WeiboView'</span>)-&gt;where($where)-&gt;order(<span class="string">'time DESC'</span>)-&gt;limit($limit)-&gt;select();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;weibo = $weibo;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;page = $page-&gt;show();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在读取微博数据的时候，又调用了<strong>WeiboView</strong>这个视图，该视图在之前的功能中已经定义过，主要是为了关联各个数据表，用于获取更全面的数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* WeiboViewModel.class.php */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiboViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义视图表关联关系</span></span><br><span class="line">    <span class="keyword">Protected</span> $viewFields = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'weibo'</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'id'</span>,<span class="string">'content'</span>,<span class="string">'time'</span>,<span class="string">'keep'</span>,<span class="string">'comment'</span>,<span class="string">'uid'</span>,</span><br><span class="line">            <span class="string">'_type'</span> =&gt; <span class="string">'LEFT'</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="string">'userinfo'</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'username'</span>,<span class="string">'face50'</span>,</span><br><span class="line">            <span class="string">'_on'</span> =&gt; <span class="string">'weibo.uid = userinfo.uid'</span>,</span><br><span class="line">            <span class="string">'_type'</span> =&gt; <span class="string">'LEFT'</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="string">'picture'</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'mini'</span>,</span><br><span class="line">            <span class="string">'_on'</span> =&gt; <span class="string">'weibo.id = picture.wid'</span></span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="发布微博"><a href="#发布微博" class="headerlink" title="发布微博"></a>发布微博</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- weibo.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;:U('sendWeibo')&#125;"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"发布"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* WeiboController.class.php */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//发布微博</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendWeibo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!IS_POST) &#123;</span><br><span class="line">            E(<span class="string">'页面不存在'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $data = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'uid'</span> =&gt; session(<span class="string">'uid'</span>),</span><br><span class="line">            <span class="string">'content'</span> =&gt; I(<span class="string">'post.content'</span>),</span><br><span class="line">            <span class="string">'time'</span> =&gt; time()</span><br><span class="line">        );</span><br><span class="line">        $wid = M(<span class="string">'weibo'</span>)-&gt;data($data)-&gt;add();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($wid) &#123;</span><br><span class="line">            $pic = <span class="keyword">$this</span>-&gt;_upload($wid);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;success(<span class="string">'发布成功'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error(<span class="string">'发布失败，请重试...'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上传文件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_upload</span><span class="params">($wid)</span> </span>&#123;</span><br><span class="line">        $upload = <span class="keyword">new</span> \Think\Upload();      <span class="comment">//调用TP框架的文件上传类</span></span><br><span class="line">        $upload-&gt;maxSize =<span class="number">30000000</span>;         <span class="comment">//图片最大上传大小</span></span><br><span class="line">        $upload-&gt;exts = <span class="keyword">array</span>(<span class="string">'jpg'</span>,<span class="string">'gif'</span>,<span class="string">'png'</span>,<span class="string">'jpeg'</span>);        <span class="comment">//设置附件上传类型</span></span><br><span class="line">        $upload-&gt;rootPath = <span class="string">'./Uploads/'</span>;           <span class="comment">//设置附件上传根目录</span></span><br><span class="line">        $upload-&gt;savePath = <span class="string">''</span>;         <span class="comment">//设置附件上传子目录</span></span><br><span class="line"></span><br><span class="line">        $info = $upload-&gt;upload();      <span class="comment">//上传文件</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!$info) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error($upload-&gt;getError());      <span class="comment">//上传错误提示错误信息</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($info <span class="keyword">as</span> $file) &#123;</span><br><span class="line">                $value = $file[<span class="string">'savepath'</span>].$file[<span class="string">'savename'</span>];       <span class="comment">//将文件保存地址连接起来</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $img = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'mini'</span> =&gt; $value,</span><br><span class="line">            <span class="string">'wid'</span> =&gt; $wid</span><br><span class="line">        );</span><br><span class="line">        M(<span class="string">'picture'</span>)-&gt;data($img)-&gt;add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在实现发表微博这一功能时，考虑到微博当中可能会有上传的图片，所以这里调用了TP框架中的<strong>Upload类</strong>，用于实现这一功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接下来，我们开始着手对于微博方面的一些处理，在这一节中，我主要完成两个方面的功能实现，一方面是将微博视图呈现出来，另一方面是实现&lt;strong&gt;发表微博&lt;/strong&gt;的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>微博项目_用户关注与移除</title>
    <link href="http://yoursite.com/2018/02/21/%E5%BE%AE%E5%8D%9A%E9%A1%B9%E7%9B%AE_%E7%94%A8%E6%88%B7%E5%85%B3%E6%B3%A8%E4%B8%8E%E7%A7%BB%E9%99%A4/"/>
    <id>http://yoursite.com/2018/02/21/微博项目_用户关注与移除/</id>
    <published>2018-02-21T10:50:00.000Z</published>
    <updated>2018-06-05T11:19:32.887Z</updated>
    
    <content type="html"><![CDATA[<p>实现这一功能时，我们可以结合之前做过的<strong>搜索功能</strong>，在搜索得到的用户结果集中加以进行分析，并进行用户的关注和移除。</p><a id="more"></a><p>首先，我们需要在前端页面中增加用于显示用户是否关注的节点。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sech.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">condition</span>=<span class="string">'$v["mutual"]'</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span>互相关注<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span> <span class="attr">id</span>=<span class="string">"del-fl"</span> <span class="attr">uid</span>=<span class="string">"&#123;$v.uid&#125;"</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">elseif</span> <span class="attr">condition</span>=<span class="string">'$v["followed"]'</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span>√&amp;nbsp;已关注<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span> <span class="attr">id</span>=<span class="string">"del-fl"</span> <span class="attr">uid</span>=<span class="string">"&#123;$v.uid&#125;"</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">else</span> /&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span> <span class="attr">id</span>=<span class="string">"add-fl"</span> <span class="attr">uid</span>=<span class="string">"&#123;$v.uid&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;:U('Common/follow')&#125;"</span>&gt;</span>+&amp;nbsp;关注<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在前端页面中，我们利用了<code>&lt;if&gt;</code>标签根据用户间的实际情况，展现不同的内容，而实现这一功能即需要我们对于后台搜索到的结果集进行一番处理，去得到用户间是否已经互相关注。该功能的实现也是建立在之前搜索功能代码的基础上。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* SearchController.class.php */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sechUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *原先搜索功能时的代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在最后获取到$user结果集的基础上，调用一个函数来得到用户间是否已关注与是否已互相关注</span></span><br><span class="line">    $user = <span class="keyword">$this</span>-&gt;_getMetual($user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重组结果集，得到是否已关注与是否互相关注</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_getMetual</span> <span class="params">($result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($result)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $db = M(<span class="string">'follow'</span>);</span><br><span class="line">    <span class="keyword">foreach</span> ($result <span class="keyword">as</span> $k =&gt; $v) &#123;</span><br><span class="line">        <span class="comment">//是否互相关注</span></span><br><span class="line">        $sql = <span class="string">'(SELECT `follow` FROM `hd_follow` WHERE `follow` = '</span> . $v[<span class="string">'uid'</span>] . <span class="string">' AND `fans` ='</span> . session(<span class="string">'uid'</span>) . <span class="string">') UNION (SELECT `follow` FROM `hd_follow` WHERE `follow` = '</span> . session(<span class="string">'uid'</span>) . <span class="string">' AND `fans` = '</span> . $v[<span class="string">'uid'</span>] . <span class="string">' ) '</span>;</span><br><span class="line">        $mutual = $db-&gt;query($sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (count($mutual) == <span class="number">2</span>) &#123;</span><br><span class="line">            $result[$k][<span class="string">'mutual'</span>] = <span class="number">1</span>;</span><br><span class="line">            $result[$k][<span class="string">'followed'</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $result[$k][<span class="string">'mutual'</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//未互相关注时检索是否已关注</span></span><br><span class="line">            $where = <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">'follow'</span> =&gt; $v[<span class="string">'uid'</span>],</span><br><span class="line">                <span class="string">'fans'</span> =&gt; session(<span class="string">'uid'</span>)</span><br><span class="line">            );</span><br><span class="line">            $result[$k][<span class="string">'followed'</span>] = $db-&gt;where($where)-&gt;count();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="移除关注"><a href="#移除关注" class="headerlink" title="移除关注"></a>移除关注</h1><p>根据前面的前端页面，我们在这里使用<strong>Ajax异步处理</strong>的方式实现该功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* common.js */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//移除关注</span></span><br><span class="line">$(<span class="string">'#del-fl'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = &#123;</span><br><span class="line">        uid : $(<span class="keyword">this</span>).attr(<span class="string">'uid'</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> isDel = confirm(<span class="string">'确认移除？'</span>);               <span class="comment">//确认框</span></span><br><span class="line">    <span class="keyword">var</span> obj = $(<span class="keyword">this</span>).parents(<span class="string">'tr'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isDel) &#123;</span><br><span class="line">        $.post(delFollow,data,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (data) &#123;</span><br><span class="line">                obj.slideUp(<span class="string">'slow'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    obj.remove();</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                alert(<span class="string">'移除失败，请重试...'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">'json'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>由于在这里用到了js，所以我们应该在前端页面调用js文件，同时，异步处理时的处理地址<strong>delFollow</strong>也需要在前端页面中进行定义。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sech.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"__PUBLIC__/JS/jquery-1.7.2.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"__PUBLIC__/Js/common.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> delFollow = <span class="string">'&#123;:U('</span>Common/delFollow<span class="string">')&#125;'</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CommonController.class.php */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delFollow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!IS_AJAX) &#123;</span><br><span class="line">        E(<span class="string">'页面不存在'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $uid = I(<span class="string">'post.uid/d'</span>);</span><br><span class="line">    $where = <span class="keyword">array</span>(<span class="string">'follow'</span> =&gt; $uid ,<span class="string">'fans'</span> =&gt; session(<span class="string">'uid'</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (M(<span class="string">'follow'</span>)-&gt;where($where)-&gt;delete()) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="用户关注"><a href="#用户关注" class="headerlink" title="用户关注"></a>用户关注</h1><p>对于这一功能，结合<strong>JS</strong>脚本进行处理会更加方便，而考虑到自己对于Js尚未特别熟悉，所以我没有使用过多得JS脚本。其次，对于用户关注这一功能，我尚未完全实现，因为不使用JS处理的方式，我没能在跳转页面找到一个接收需要处理的用户ID的方式，这是目前该功能存在的一个bug。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /practice/Home/View/Common/follow.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"__PUBLIC__/JS/jquery-1.7.2.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"__PUBLIC__/JS/common.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> addFollow = <span class="string">"&#123;:U('Common/addFollow')&#125;"</span>;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>添加好友关注<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>好友分组：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"gid"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span>默认分组<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">name</span>=<span class="string">'group'</span> <span class="attr">item</span>=<span class="string">'v'</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"&#123;$v.id&#125;"</span>&gt;</span>&#123;$v.name&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"follow"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"add-fl-button"</span>&gt;</span>关注<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果利用JS弹出框的方式，效果会更好一些，而我选用了<code>&lt;a&gt;</code>链接跳转的方式，不过在这个过程中，不知道该如何将用户ID传递到跳转页面，这即是目前该功能存在的一个bug，等js熟悉之后，可以直接将其替换为js的方式来实现该效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* common.js */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//异步添加关注</span></span><br><span class="line">$(<span class="string">'#add-fl-button'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> follow  = $(<span class="string">'input[name=follow]'</span>).val();          <span class="comment">//无法接收到follow值</span></span><br><span class="line">    <span class="keyword">var</span> group = $(<span class="string">'select[name=gid]'</span>).val();</span><br><span class="line"></span><br><span class="line">    $.post(addFollow,&#123;</span><br><span class="line">        <span class="string">'follow'</span> : follow,</span><br><span class="line">        <span class="string">'gid'</span> : group</span><br><span class="line">    &#125;,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (data.status) &#123;</span><br><span class="line">            alert(data.msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(data.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="string">'json'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CommonController.class.php */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取分组</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">follow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $group = M(<span class="string">'group'</span>)-&gt;where(<span class="keyword">array</span>(<span class="string">'uid'</span> =&gt; session(<span class="string">'uid'</span>)))-&gt;select();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;group = $group;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;display();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加关注</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addFollow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!IS_AJAX) &#123;</span><br><span class="line">        E(<span class="string">'页面不存在'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $data = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'follow'</span> =&gt; I(<span class="string">'post.follow/d'</span>),</span><br><span class="line">        <span class="string">'fans'</span> =&gt; (int) session(<span class="string">'uid'</span>),</span><br><span class="line">        <span class="string">'gid'</span> =&gt; I(<span class="string">'post.gid/d'</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (M(<span class="string">'follow'</span>)-&gt;data($data)-&gt;add()) &#123;</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="number">1</span>,<span class="string">'msg'</span> =&gt; <span class="string">'关注成功'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> json_encode(<span class="keyword">array</span>(<span class="string">'status'</span> =&gt; <span class="number">0</span>,<span class="string">'msg'</span> =&gt; <span class="string">'关注失败，请重试...'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实现这一功能时，我们可以结合之前做过的&lt;strong&gt;搜索功能&lt;/strong&gt;，在搜索得到的用户结果集中加以进行分析，并进行用户的关注和移除。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>微博项目_添加分组功能</title>
    <link href="http://yoursite.com/2018/02/20/%E5%BE%AE%E5%8D%9A%E9%A1%B9%E7%9B%AE_%E6%B7%BB%E5%8A%A0%E5%88%86%E7%BB%84%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2018/02/20/微博项目_添加分组功能/</id>
    <published>2018-02-20T10:00:00.000Z</published>
    <updated>2018-02-20T10:01:27.271Z</updated>
    
    <content type="html"><![CDATA[<p>微博项目中，用户通常会把不同的用户划分到相应的分组中，所以分组的添加与列表显示也是必不可少的。</p><a id="more"></a><h1 id="分组列表"><a href="#分组列表" class="headerlink" title="分组列表"></a>分组列表</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /practice/Home/View/Common/group.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-weight: bold"</span>&gt;</span>分组列表<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;:U('Common/group')&#125;"</span>&gt;</span>全部<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">name</span>=<span class="string">'group'</span> <span class="attr">item</span>=<span class="string">'v'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;:U('Common/group',array('gid' =&gt; $v['id']))&#125;"</span>&gt;</span>&#123;$v.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在显示不同的分组列表时，用到了<code>&lt;a&gt;</code>链接。另外，需要根据不同的分组信息跳转到相对应的分组页面，使用<code>U</code>方法传递参数，实现该效果。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* /practice/Home/Controller/CommonController.class.php */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonController</span> <span class="keyword">extends</span> <span class="title">Controller</span>  </span>&#123;</span><br><span class="line">    <span class="comment">//分组信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">group</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $group = M(<span class="string">'group'</span>)-&gt;where(<span class="keyword">array</span>(<span class="string">'uid'</span> =&gt; session(<span class="string">'uid'</span>)))-&gt;select();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;group = $group;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="添加分组"><a href="#添加分组" class="headerlink" title="添加分组"></a>添加分组</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- group.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;:U('addGroup')&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-weight: bold"</span>&gt;</span>创建好友分组<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"gp-name"</span>&gt;</span>分组名称<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"gp-name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"添加"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CommonController.class.php */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加分组</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addGroup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!IS_POST) &#123;</span><br><span class="line">        E(<span class="string">'页面不存在'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $data = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'name'</span> =&gt; I(<span class="string">'post.name'</span>),</span><br><span class="line">        <span class="string">'uid'</span> =&gt; session(<span class="string">'uid'</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (M(<span class="string">'group'</span>)-&gt;data($data)-&gt;add()) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;success(<span class="string">'创建成功'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;error(<span class="string">'创建失败，请重试...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这类功能，利用JS异步处理效果会更好一些，而我为了熟悉TP框架，直接利用的PHP服务器端处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微博项目中，用户通常会把不同的用户划分到相应的分组中，所以分组的添加与列表显示也是必不可少的。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>微博项目_搜索功能</title>
    <link href="http://yoursite.com/2018/02/20/%E5%BE%AE%E5%8D%9A%E9%A1%B9%E7%9B%AE_%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2018/02/20/微博项目_搜索功能/</id>
    <published>2018-02-20T04:15:00.000Z</published>
    <updated>2018-06-05T11:25:42.383Z</updated>
    
    <content type="html"><![CDATA[<p>搜索也是在项目中比较常用的一项功能，在这一节中，主要对该功能进行实现。</p><a id="more"></a><h1 id="搜索找人"><a href="#搜索找人" class="headerlink" title="搜索找人"></a>搜索找人</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /practice/Home/View/Search/sech.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>搜索找人<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;:U('sechUser')&#125;"</span> <span class="attr">method</span>=<span class="string">"get"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"keyword"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">value</span>=<span class="string">'&lt;if condition="$keyword"&gt;&#123;$keyword&#125;&lt;else /&gt;搜索找人&lt;/if&gt;'</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"搜&amp;nbsp;索"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">condition</span>=<span class="string">'isset($user) &amp;&amp; !$user'</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>没有检索到相关用户<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">else</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>星座<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>简介<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>头像<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">name</span>=<span class="string">'user'</span> <span class="attr">item</span>=<span class="string">'v'</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;$v.id&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;$v.username&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;$v.sex&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;$v.constellation&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;$v.intro&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;if condition='$v["</span><span class="attr">face50</span>"]'&gt;</span>__ROOT__/Uploads/&#123;$v.face50&#125;<span class="tag">&lt;<span class="name">else</span> /&gt;</span>__PUBLIC__/Images/noface.gif<span class="tag">&lt;/<span class="name">if</span>&gt;</span>"&gt;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个页面中，利用<code>&lt;if&gt;</code>标签设定了input框中<code>value</code>属性的默认值，另外，对于获取到的用户信息，利用<strong>表格</strong>的方式通过<code>&lt;foreach&gt;</code>标签循环输出。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* /practice/Home/Controller/SearchController.class.php */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SearchController</span> <span class="keyword">extends</span> <span class="title">Controller</span>  </span>&#123;</span><br><span class="line">    <span class="comment">//搜索找人</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sechUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $keyword = <span class="keyword">$this</span>-&gt;_getKeyword();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($keyword) &#123;</span><br><span class="line">            <span class="comment">//检索出除自己外含有关键字的昵称</span></span><br><span class="line">            $where = <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">'username'</span> =&gt; <span class="keyword">array</span>(<span class="string">'LIKE'</span>,<span class="string">'%'</span> . $keyword . <span class="string">'%'</span>),</span><br><span class="line">                <span class="string">'uid'</span> =&gt; <span class="keyword">array</span>(<span class="string">'NEQ'</span>,session(<span class="string">'uid'</span>))</span><br><span class="line">            );</span><br><span class="line">            $field = <span class="keyword">array</span>(<span class="string">'id'</span>,<span class="string">'username'</span>,<span class="string">'sex'</span>,<span class="string">'constellation'</span>,<span class="string">'intro'</span>,<span class="string">'face50'</span>);</span><br><span class="line">            $user = M(<span class="string">'userinfo'</span>)-&gt;where($where)-&gt;field($field)-&gt;select();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = $user ? $user : <span class="keyword">false</span>;            <span class="comment">//变量输出</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;keyword = $keyword;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;display(<span class="string">'sech'</span>);                         <span class="comment">//指定视图地址</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回搜索关键字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_getKeyword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $_GET[<span class="string">'keyword'</span>] == <span class="string">'搜素微博、找人'</span> ? <span class="keyword">NULL</span> : I(<span class="string">'get.keyword'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="搜索找微博"><a href="#搜索找微博" class="headerlink" title="搜索找微博"></a>搜索找微博</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- sech.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>搜索找微博<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;:U('sechWeibo')&#125;"</span> <span class="attr">method</span>=<span class="string">"get"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"keyword"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"搜&amp;nbsp;索"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">condition</span>=<span class="string">'isset($weibo) &amp;&amp; !$weibo'</span> &gt;</span></span><br><span class="line">            没有找到与&amp;nbsp;<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-weight: bold;color: #f00"</span>&gt;</span>&#123;$keyword&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&amp;nbsp;相关的微博</span><br><span class="line">        <span class="tag">&lt;<span class="name">else</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>微博ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>发布用户<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户头像<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>微博内容<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>发布时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">name</span>=<span class="string">'weibo'</span> <span class="attr">item</span>=<span class="string">'v'</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;$v.id&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;$v.username&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;if condition='$v["</span><span class="attr">face50</span>"]'&gt;</span>__ROOT__/Uploads/&#123;$v.face50&#125;<span class="tag">&lt;<span class="name">else</span> /&gt;</span>__PUBLIC__/Images/noface.gif<span class="tag">&lt;/<span class="name">if</span>&gt;</span>"&gt;</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;$v.content&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;$v.time&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;$v.mini&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在搜索微博内容时，因为一篇微博所牵涉到的内容较多，不止需要呈现出微博本身内容，还需要将发布用户信息以及图片信息一并输出，所以在这里需要建立一个<strong>微博视图关联模型</strong>，将几个表同时关联起来。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* /practice/Home/Model/WeiboViewModel.class.php */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Model</span>\<span class="title">ViewModel</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiboViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义视图表关联关系</span></span><br><span class="line">    <span class="keyword">Protected</span> $viewFields = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'weibo'</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'id'</span>,<span class="string">'content'</span>,<span class="string">'time'</span>,</span><br><span class="line">            <span class="string">'_type'</span> =&gt; <span class="string">'LEFT'</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="string">'userinfo'</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'username'</span>,<span class="string">'face50'</span>,</span><br><span class="line">            <span class="string">'_on'</span> =&gt; <span class="string">'weibo.uid = userinfo.uid'</span>,</span><br><span class="line">            <span class="string">'_type'</span> =&gt; <span class="string">'LEFT'</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="string">'picture'</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'mini'</span>,</span><br><span class="line">            <span class="string">'_on'</span> =&gt; <span class="string">'weibo.id = picture.wid'</span></span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* SearchController.class.php */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sechWeibo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $keyword = <span class="keyword">$this</span>-&gt;_getKeyword();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($keyword) &#123;</span><br><span class="line">        <span class="comment">//检索出含有关键字的微博</span></span><br><span class="line">        $where = <span class="keyword">array</span>(<span class="string">'content'</span> =&gt; <span class="keyword">array</span>(<span class="string">'LIKE'</span>,<span class="string">'%'</span> . $keyword . <span class="string">'%'</span>));</span><br><span class="line">        $weibo = D(<span class="string">'WeiboView'</span>)-&gt;where($where)-&gt;order(<span class="string">'time DESC'</span>)-&gt;select();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;weibo = $weibo ? $weibo : <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;keyword = $keyword;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;display(<span class="string">'sech'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搜索也是在项目中比较常用的一项功能，在这一节中，主要对该功能进行实现。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>微博项目_个人中心</title>
    <link href="http://yoursite.com/2018/02/12/%E5%BE%AE%E5%8D%9A%E9%A1%B9%E7%9B%AE_%E4%B8%AA%E4%BA%BA%E4%B8%AD%E5%BF%83/"/>
    <id>http://yoursite.com/2018/02/12/微博项目_个人中心/</id>
    <published>2018-02-12T13:20:00.000Z</published>
    <updated>2018-02-12T13:19:23.430Z</updated>
    
    <content type="html"><![CDATA[<p>在微博项目中有<strong>个人中心</strong>页面，用户可以在该页面中修改个人资料信息以及密码等。而这一节中，我会针对一些简单的信息修改进行代码实现。</p><a id="more"></a><h1 id="修改基本资料"><a href="#修改基本资料" class="headerlink" title="修改基本资料"></a>修改基本资料</h1><p>根据我们之前的数据库建模，用户资料信息都是存储在<strong>用户信息表</strong>中，所以个人资料的修改与该表有关，而我们的目的即是将原数据表中的信息替换为用户提交的修改信息。</p><blockquote><p>前端页面</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /practice/Home/View/UserSetting/index.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">'Content-Type'</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>修改个人资料<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;:U(editBasic)&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">legend</span>&gt;</span>基本信息<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>昵称：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"&#123;$user.username&#125;"</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"truename"</span>&gt;</span>真实姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"truename"</span> <span class="attr">value</span>=<span class="string">"&#123;$user.truename&#125;"</span> <span class="attr">id</span>=<span class="string">"truename"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    &lt;input type="radio" name="sex" &lt;if condition='$user["sex"] == "男"'&gt;checked="checked"&lt;/if&gt; &gt;男</span><br><span class="line">                    &lt;input type="radio" name="sex" &lt;if condition='$user["sex"] == "女"'&gt;checked="checked"&lt;/if&gt; &gt;女</span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>星座：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"constellation"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择：<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"白羊座"</span>&gt;</span>白羊座<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"金牛座"</span>&gt;</span>金牛座<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"双子座"</span>&gt;</span>双子座<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"巨蟹座"</span>&gt;</span>巨蟹座<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"狮子座"</span>&gt;</span>狮子座<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"处女座"</span>&gt;</span>处女座<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"天秤座"</span>&gt;</span>天秤座<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"天蝎座"</span>&gt;</span>天蝎座<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"射手座"</span>&gt;</span>射手座<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"魔羯座"</span>&gt;</span>魔羯座<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"水瓶座"</span>&gt;</span>水瓶座<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"双鱼座"</span>&gt;</span>双鱼座<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"intro"</span>&gt;</span>个人简介：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"intro"</span> <span class="attr">value</span>=<span class="string">"&#123;$user.intro&#125;"</span> <span class="attr">id</span>=<span class="string">"intro"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"保存修改"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的html页面中，我列出了用户个人资料中的几项：昵称、真实姓名、性别、星座、个人简介。从代码中可以看出，并不是简单的静态页面，而是已经结合了php代码，从而实现动态页面的效果。</p><blockquote><p>后端业务处理</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* /practice/Home/Controller/UserSettingController.class.php */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSettingController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户基本信息视图</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $where = <span class="keyword">array</span>(<span class="string">'id'</span> =&gt; $_SESSION[<span class="string">'uid'</span>]);</span><br><span class="line">        <span class="comment">//从数据库中取出有用的字段</span></span><br><span class="line">        $field = <span class="keyword">array</span>(<span class="string">'username'</span>,<span class="string">'truename'</span>,<span class="string">'constellation'</span>,<span class="string">'sex'</span>,<span class="string">'intro'</span>);</span><br><span class="line">        $user = M(<span class="string">'userinfo'</span>)-&gt;where($where)-&gt;field($field)-&gt;find();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = $user;            <span class="comment">//传递变量到模板中，可供模板调用</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;display();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改基本信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">editBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!IS_POST) &#123;</span><br><span class="line">            E(<span class="string">'页面不存在'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//整理待插入数据库的数据</span></span><br><span class="line">        $data = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">'username'</span> =&gt; I(<span class="string">'post.username'</span>),</span><br><span class="line">            <span class="string">'truename'</span> =&gt; I(<span class="string">'post.truename'</span>),</span><br><span class="line">            <span class="string">'sex'</span> =&gt; I(<span class="string">'post.sex/d'</span>),</span><br><span class="line">            <span class="string">'constellation'</span> =&gt; I(<span class="string">'post.constellation'</span>),</span><br><span class="line">            <span class="string">'intro'</span> =&gt; I(<span class="string">'post.intro'</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        $where = <span class="keyword">array</span>(<span class="string">'id'</span> =&gt; $_SESSION[<span class="string">'uid'</span>]);</span><br><span class="line">        <span class="keyword">if</span> (M(<span class="string">'userinfo'</span>)-&gt;where($where)-&gt;save($data)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;success(<span class="string">'修改成功'</span>,U(<span class="string">'index'</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error(<span class="string">'修改失败'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h1><p>根据之前的数据库建模，用户的账号和密码信息都保存在<strong>用户表</strong>中，所以我们只需要将原先数据表中保存的密码信息替换为用户提交的新密码信息即可。</p><blockquote><p>前端页面</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- UserSetting/index.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;:U(editPwd)&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>修改密码<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"old"</span>&gt;</span>旧密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"old"</span> <span class="attr">id</span>=<span class="string">"old"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"new"</span>&gt;</span>新密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"new"</span> <span class="attr">id</span>=<span class="string">"new"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"newed"</span>&gt;</span>确认密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"newed"</span> <span class="attr">id</span>=<span class="string">"newed"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"确认修改"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>后台业务处理</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* UserSettingController.class.php */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改密码</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">editPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!IS_POST) &#123;</span><br><span class="line">        E(<span class="string">'页面不存在'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $old = I(<span class="string">'post.old'</span>,<span class="string">''</span>,<span class="string">'md5'</span>);</span><br><span class="line">    $where = <span class="keyword">array</span>(<span class="string">'id'</span> =&gt; $_SESSION[<span class="string">'uid'</span>]);</span><br><span class="line">    $value = M(<span class="string">'user'</span>)-&gt;where($where)-&gt;field(<span class="string">'password'</span>)-&gt;find();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($old != $value[<span class="string">'password'</span>]) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;error(<span class="string">'旧密码不正确'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ($_POST[<span class="string">'new'</span>] != $_POST[<span class="string">'newed'</span>]) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;error(<span class="string">'两次密码不一致'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $data = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'password'</span> =&gt; I(<span class="string">'post.new'</span>,<span class="string">''</span>,<span class="string">'md5'</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(M(<span class="string">'user'</span>)-&gt;where($where)-&gt;save($data)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;success(<span class="string">'修改成功'</span>,U(<span class="string">'index'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;error(<span class="string">'修改失败'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在微博项目中有&lt;strong&gt;个人中心&lt;/strong&gt;页面，用户可以在该页面中修改个人资料信息以及密码等。而这一节中，我会针对一些简单的信息修改进行代码实现。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>微博项目_注册登录功能(2).md</title>
    <link href="http://yoursite.com/2018/02/12/%E5%BE%AE%E5%8D%9A%E9%A1%B9%E7%9B%AE_%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD(2)/"/>
    <id>http://yoursite.com/2018/02/12/微博项目_注册登录功能(2)/</id>
    <published>2018-02-12T08:00:00.000Z</published>
    <updated>2018-02-12T07:58:53.662Z</updated>
    
    <content type="html"><![CDATA[<p>在上一节中，对于一个简单的登录注册流程进行了整理，而该小节主要对其补充几个附加功能，使其更加完善。</p><a id="more"></a><h1 id="验证码检验"><a href="#验证码检验" class="headerlink" title="验证码检验"></a>验证码检验</h1><p>利用TP框架附带的Verify类方法，实现验证码功能。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- register.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> checkVerify = <span class="string">"&#123;:U('checkVerify')&#125;"</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"verify"</span>&gt;</span>验证码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"verify"</span> <span class="attr">id</span>=<span class="string">"verify"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;:U('verify')&#125;"</span> <span class="attr">width</span>=<span class="string">"80"</span> <span class="attr">height</span>=<span class="string">"25"</span> <span class="attr">id</span>=<span class="string">"verify-img"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* register.js */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//点击刷新验证码</span></span><br><span class="line"><span class="keyword">var</span> verifyUrl = $(<span class="string">'#verify-img'</span>).attr(<span class="string">'src'</span>);</span><br><span class="line">$(<span class="string">'#verify-img'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).attr(<span class="string">'src'</span>,verifyUrl + <span class="string">'/'</span> +<span class="built_in">Math</span>.random());</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">'form[name=register]'</span>).validate(&#123;</span><br><span class="line">    errorElement : <span class="string">'span'</span>,</span><br><span class="line">    success : <span class="function"><span class="keyword">function</span>(<span class="params">label</span>) </span>&#123;</span><br><span class="line">        label.addClass(<span class="string">'success'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    rules : &#123;</span><br><span class="line">        verify : &#123;</span><br><span class="line">            required : <span class="literal">true</span>,</span><br><span class="line">            remote : &#123;</span><br><span class="line">                url : checkVerify,</span><br><span class="line">                type : <span class="string">'post'</span>,</span><br><span class="line">                dataType : <span class="string">'json'</span>,</span><br><span class="line">                data : &#123;</span><br><span class="line">                    verify : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> $(<span class="string">'#verify'</span>).val();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    messages : &#123;</span><br><span class="line">        verify : &#123;</span><br><span class="line">                required : <span class="string">'请填写验证码'</span>,</span><br><span class="line">                remote : <span class="string">'验证码不正确'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* loginController.class.php */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取验证码</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//配置验证码的一些参数</span></span><br><span class="line">    $config = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'fontsize'</span> =&gt; <span class="number">30</span>,       <span class="comment">//验证码字体大小</span></span><br><span class="line">        <span class="string">'length'</span> =&gt; <span class="number">4</span>,          <span class="comment">//验证码位数</span></span><br><span class="line">        <span class="string">'useNoise'</span> =&gt; <span class="keyword">false</span>,    <span class="comment">//关闭验证码杂点</span></span><br><span class="line">    );</span><br><span class="line">    $verify = <span class="keyword">new</span> \Think\Verify($config);</span><br><span class="line">    $verify-&gt;entry();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//异步验证验证码</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVerify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!IS_AJAX) &#123;</span><br><span class="line">        E(<span class="string">'页面不存在'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $verify = <span class="keyword">new</span> \Think\Verify();      <span class="comment">//调用TP框架中的Verify类</span></span><br><span class="line">    $verify-&gt;reset = <span class="keyword">false</span>;             <span class="comment">//验证码检验后不被重置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($verify-&gt;check($_POST[<span class="string">'verify'</span>])) &#123;         <span class="comment">//check函数是TP框架封装好的检验验证码的一个方法</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'true'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'false'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自动登录功能"><a href="#自动登录功能" class="headerlink" title="自动登录功能"></a>自动登录功能</h1><p><img src="http://opznmu7n5.bkt.clouddn.com/post31_1.png" alt=""><br>如上图所示，当用户登录时，其中有一项<strong>下次自动登录</strong>，当用户选中时，我们需要进行一些处理，使得相同的用户下一次访问页面时，可以跳过登录页，自动登录进入首页。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- login.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"auto"</span> <span class="attr">checked</span>=<span class="string">"1"</span> <span class="attr">id</span>=<span class="string">"auto"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"auto"</span>&gt;</span>下次自动登录<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* LoginController.class.php */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//处理下一次自动登录</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'auto'</span>])) &#123;</span><br><span class="line">    $account = $user[<span class="string">'account'</span>];            <span class="comment">//$user是当前登录用户，结合之前登录部分的代码，已经从数据库中查出</span></span><br><span class="line">    $ip = get_client_ip();                  <span class="comment">//获取当前登录IP</span></span><br><span class="line">    $value = $account . <span class="string">'|'</span> . $ip;</span><br><span class="line">    $value = encryption($value);            <span class="comment">//将需要保存的COOKIE值进行加密处理</span></span><br><span class="line">    cookie(<span class="string">'login'</span>,$value,<span class="number">3600</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在处理自动登录时，我们自定义了一个加密函数<code>encryption</code>，该函数可以放在公共函数文件中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* /practice/Common/Common/function.php */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异位或加密字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [String]  $value [需要加密的字符串]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  [integer] $type  [加密解密（0：加密，1：解密）]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> [String]         [加密或解密后的字符串]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">encryption</span><span class="params">($value,$type=<span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        $key = md5(<span class="string">'goodgoodstudydaydayup'</span>);        <span class="comment">//用于加密的一个key值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//加密</span></span><br><span class="line">        <span class="keyword">if</span> (!$type) &#123;</span><br><span class="line">            <span class="keyword">return</span> base64_encode($value ^ $key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//解密</span></span><br><span class="line">        $value = base64_decode($value);</span><br><span class="line">        <span class="keyword">return</span> $value ^ $key;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>接下来，我们在首页控制器中判断是否进行账号的自动登录。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* /practice/Home/Controller/IndexController.class.php */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//处理自动登录</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[<span class="string">'login'</span>]) &amp;&amp; !<span class="keyword">isset</span>($_SESSION[<span class="string">'uid'</span>])) &#123;</span><br><span class="line">            <span class="comment">//将COOKIE值解密并拆分</span></span><br><span class="line">            $value = explode(<span class="string">'|'</span>, encryption($_COOKIE[<span class="string">'login'</span>],<span class="number">1</span>));</span><br><span class="line">            $ip = get_client_ip();              <span class="comment">//获取当前登录IP</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断当前登录IP与COOKIE中保存的IP是否相同</span></span><br><span class="line">            <span class="comment">//如果相同，则执行账号自动登录</span></span><br><span class="line">            <span class="keyword">if</span> ($ip == $value[<span class="number">1</span>]) &#123;</span><br><span class="line">                $account = $value[<span class="number">0</span>];</span><br><span class="line">                $where = <span class="keyword">array</span>(<span class="string">'account'</span> =&gt; $account);</span><br><span class="line">                $user= M(<span class="string">'user'</span>)-&gt;where($where)-&gt;field(<span class="string">'id'</span>)-&gt;find();</span><br><span class="line">                session(<span class="string">'uid'</span>,$user[<span class="string">'id'</span>]);     <span class="comment">//将COOKIE中保存的账号信息存入SESSION中</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断用户是否已经登录</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($_SESSION[<span class="string">'uid'</span>])) &#123;</span><br><span class="line">            redirect(U(<span class="string">'Login/login'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h1><p>在网站页面中，会有一个<strong>退出登录</strong>的链接，当用户点击时，可以登出当前在线用户。而此时需要进行处理得即是将与该用户相关的session和cookie信息清楚即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /practice/Home/View/Index/index.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;:U('Index/loginOut')&#125;"</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* LoginController.class.php */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//退出登录处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">loginOut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    session_unset();                        <span class="comment">//卸载session</span></span><br><span class="line">    session_destroy();                      <span class="comment">//销毁session</span></span><br><span class="line">    cookie(<span class="string">'login'</span>,<span class="keyword">null</span>);                   <span class="comment">//清楚cookie</span></span><br><span class="line">    redirect(U(<span class="string">'Login/login'</span>));             <span class="comment">//跳转至登录页</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一节中，对于一个简单的登录注册流程进行了整理，而该小节主要对其补充几个附加功能，使其更加完善。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>微博项目_登录注册功能</title>
    <link href="http://yoursite.com/2018/02/12/%E5%BE%AE%E5%8D%9A%E9%A1%B9%E7%9B%AE_%E6%B3%A8%E5%86%8C%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2018/02/12/微博项目_注册登录功能/</id>
    <published>2018-02-12T03:22:00.000Z</published>
    <updated>2018-02-12T07:59:09.358Z</updated>
    
    <content type="html"><![CDATA[<p>登录注册功能在一个项目中是很常见的，所以我希望将该微博项目中用到的方法和思路归纳一下，方便自己日后去进行调用。<br>因为使用的ThinkPHP框架，所以功能的实现是建立在该框架之上的，有关TP的部分在这里不多做说明，默认按照它的架构去进行布局。</p><a id="more"></a><h1 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h1><p>因为登录注册功能涉及到一些表单的提交和处理，在这里使用了一个基于jQuery的<strong>Validate</strong>插件，该插件为表单提供了强大的验证功能，能够让客户端表单验证变得更加简单。</p><blockquote><p>注册页面</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--/practice/Home/View/Login/register.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"__PUBLIC__/JS/jquery-1.7.2.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"__PUBLIC__/JS/jquery-validate.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"__PUBLIC__/JS/register.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">var checkAccount = "&#123;:U('checkAccount')&#125;";</span></span><br><span class="line"><span class="undefined">var checkUname = "&#123;:U('checkUname')&#125;";</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;:U('runRegis')&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">name</span>=<span class="string">"register"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"account"</span>&gt;</span>登录账户：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"account"</span> <span class="attr">id</span>=<span class="string">"account"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pwd"</span>&gt;</span>登录密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">id</span>=<span class="string">"pwd"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"pwded"</span>&gt;</span>确认密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwded"</span> <span class="attr">id</span>=<span class="string">"pwded"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"uname"</span>&gt;</span>昵称：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uname"</span> <span class="attr">id</span>=<span class="string">"uname"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"马上注册"</span> <span class="attr">id</span>=<span class="string">"regis"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>查漏补缺：</strong></p><ol><li>引入的js文件，jQuery应放置于第一个，Validate插件是基于jQuery的，所以应放于其后，根据TP框架的布局，js文件均放置于主目录下Public/Js文件夹下。</li><li>脚本中添加的两个变量checkAccount和checkUname是用于js异步验证时所提交的后台处理地址。</li><li>提交表单时涉及到的几个标签及属性，要熟练掌握其用法。</li></ol><ul><li><code>action</code>属性用于规定当提交表单时向何处发送表单数据</li><li><code>U</code>方法是TP框架中的一个函数，用于URL的动态生成，能够动态地根据当前的URL设置生成对应的URL地址</li></ul><blockquote><p>Js处理脚本</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* /practice/Public/Js/register.js */</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//jQuery Validate 表单验证</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加自定义验证方法</span></span><br><span class="line"><span class="comment"> * 以字母开头，5-17位 字母、数字、下划线'_'</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> jQuery.validator.addMethod(<span class="string">"user"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">value,element</span>) </span>&#123;</span><br><span class="line"> <span class="comment">//正则表达式</span></span><br><span class="line"> <span class="keyword">var</span> tel = <span class="regexp">/^[a-zA-Z][\w]&#123;4,16&#125;$/</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || (tel.test(value));</span><br><span class="line"> &#125;,<span class="string">"以字母开头，5-17位 字母、数字、下划线'_'"</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'form[name=register]'</span>).validate(&#123;</span><br><span class="line">errorElement : <span class="string">'span'</span>,                 <span class="comment">//用什么标签标记错误</span></span><br><span class="line">success : <span class="function"><span class="keyword">function</span>(<span class="params">label</span>) </span>&#123;</span><br><span class="line">label.addClass(<span class="string">'success'</span>);</span><br><span class="line">&#125;,</span><br><span class="line">rules : &#123;</span><br><span class="line">account : &#123;</span><br><span class="line">required : <span class="literal">true</span>,<span class="comment">//必须输入的字段</span></span><br><span class="line">user : <span class="literal">true</span>,</span><br><span class="line"><span class="comment">//异步验证</span></span><br><span class="line">remote : &#123;</span><br><span class="line">url : checkAccount,<span class="comment">//后台处理地址</span></span><br><span class="line">type : <span class="string">'post'</span>,<span class="comment">//数据发送方式</span></span><br><span class="line">dataType : <span class="string">'json'</span>,<span class="comment">//接收数据格式</span></span><br><span class="line">data : &#123;<span class="comment">//要传递的数据</span></span><br><span class="line">account : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> $(<span class="string">'#account'</span>).val();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">pwd : &#123;</span><br><span class="line">required : <span class="literal">true</span>,</span><br><span class="line">user : <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">pwded : &#123;</span><br><span class="line">required : <span class="literal">true</span>,</span><br><span class="line">equalTo : <span class="string">"#pwd"</span> <span class="comment">//输入值必须和pwd相同</span></span><br><span class="line">&#125;,</span><br><span class="line">uname : &#123;</span><br><span class="line">required : <span class="literal">true</span>,</span><br><span class="line">rangelength : [<span class="number">2</span>,<span class="number">10</span>],<span class="comment">//输入长度必须介于2-10之间的字符串</span></span><br><span class="line">remote : &#123;</span><br><span class="line">url : checkUname,</span><br><span class="line">type : <span class="string">'post'</span>,</span><br><span class="line">dataType : <span class="string">'json'</span>,</span><br><span class="line">data : &#123;</span><br><span class="line">uname : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> $(<span class="string">'#uname'</span>).val();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">messages : &#123;</span><br><span class="line">account : &#123;</span><br><span class="line">required : <span class="string">'账号不能为空'</span>,</span><br><span class="line">remote : <span class="string">'账号已存在'</span></span><br><span class="line">&#125;,</span><br><span class="line">pwd : &#123;</span><br><span class="line">required : <span class="string">'密码不能为空'</span></span><br><span class="line">&#125;,</span><br><span class="line">pwded : &#123;</span><br><span class="line">required : <span class="string">'请确认密码'</span>,</span><br><span class="line">equalTo : <span class="string">'两次密码不一致'</span></span><br><span class="line">&#125;,</span><br><span class="line">uname : &#123;</span><br><span class="line">required : <span class="string">'请填写您的昵称'</span>,</span><br><span class="line">rangelength : <span class="string">'昵称必须介于2-10个字符串之间'</span>,</span><br><span class="line">remote : <span class="string">'昵称已存在'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>查漏补缺：</strong></p><p>Js处理脚本中主要涉及到的就是Validate插件的使用，以下是该插件中常用的一些验证方法。</p><table><thead><tr><th style="text-align:center">验证规则</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">required:true</td><td style="text-align:center">必须输入的字段</td></tr><tr><td style="text-align:center">remote:”check.php”</td><td style="text-align:center">使用ajax方法调用check.php异步验证输入值</td></tr><tr><td style="text-align:center">equalTo:”#field”</td><td style="text-align:center">输入值必须和field相同</td></tr><tr><td style="text-align:center">rangelength:[5,10]</td><td style="text-align:center">输入长度必须介于5和10之间的字符串</td></tr><tr><td style="text-align:center">maxlength:5</td><td style="text-align:center">输入长度最多为5的字符串(汉字算一个字符)</td></tr><tr><td style="text-align:center">minlength:10</td><td style="text-align:center">输入长度最小为10的字符串(汉字算一个字符)</td></tr><tr><td style="text-align:center">email:true</td><td style="text-align:center">必须输入正确格式的电子邮件</td></tr><tr><td style="text-align:center">url:true</td><td style="text-align:center">必须输入正确格式的网址</td></tr><tr><td style="text-align:center">date:true</td><td style="text-align:center">必须输入正确格式的日期</td></tr><tr><td style="text-align:center">number:true</td><td style="text-align:center">必须输入正确格式的数字</td></tr></tbody></table><blockquote><p>创建用户关联模型</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* /practice/Home/Model/UserModel.class.php */</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Model</span>\<span class="title">RelationModel</span>;</span><br><span class="line"><span class="comment">//用户表与用户信息表关联模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="keyword">extends</span> <span class="title">RelationModel</span>  </span>&#123;</span><br><span class="line"><span class="comment">//定义用户表与用户信息表关联关系属性</span></span><br><span class="line"><span class="keyword">protected</span> $_link = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'userinfo'</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line"><span class="string">'mapping_type'</span>=&gt;<span class="keyword">self</span>::HAS_ONE,<span class="comment">//HAS_ONE表示一对一关联</span></span><br><span class="line"><span class="string">'class_name'</span>=&gt;<span class="string">'userinfo'</span>,<span class="comment">//要关联的模型类名</span></span><br><span class="line"><span class="string">'foreign_key'</span>=&gt;<span class="string">'uid'</span><span class="comment">//关联的外键名称</span></span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"><span class="comment">//自动插入的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span><span class="params">($data=NULL)</span>  </span>&#123;</span><br><span class="line">$data = is_null($data) ? $_POST : $data;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;relation(<span class="keyword">true</span>)-&gt;data($data)-&gt;add();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>需要创建该关联模型的原因在于根据上一节对于数据库的建模，我们可以看出注册页面提交表单的内容需要插入到两张不同的数据表中(用户表和用户信息表)，所以可以使用TP框架中的<strong>关联模型</strong>将两张表关联起来，从而实现一并插入的效果。</p><blockquote><p>后端php业务处理</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* /practice/Home/Controller/LoginController.class.php */</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Home</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Think</span>\<span class="title">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"><span class="comment">//注册页面</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;display();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注册表单处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">runRegis</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!IS_POST) &#123;</span><br><span class="line">E(<span class="string">'页面不存在'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">'pwd'</span>] != $_POST[<span class="string">'pwded'</span>]) &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;error(<span class="string">'两次密码不一致'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收post数据</span></span><br><span class="line">$data = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'account'</span> =&gt; I(<span class="string">'post.account'</span>),</span><br><span class="line"><span class="string">'password'</span> =&gt; I(<span class="string">'post.pwd'</span>,<span class="string">''</span>,<span class="string">'md5'</span>),</span><br><span class="line"><span class="string">'registime'</span> =&gt; time(),</span><br><span class="line"><span class="string">'userinfo'</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'username'</span> =&gt; I(<span class="string">'post.uname'</span>)</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line">$id = D(<span class="string">'User'</span>)-&gt;insert($data);         <span class="comment">//insert方法定义在关联模型中</span></span><br><span class="line"><span class="keyword">if</span> ($id) &#123;</span><br><span class="line">session(<span class="string">'uid'</span>,$id);</span><br><span class="line">redirect(__APP__,<span class="number">3</span>,<span class="string">'注册成功，正在跳转中...'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;error(<span class="string">'注册失败，请重试'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//异步验证账号是否存在</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!IS_AJAX) &#123;</span><br><span class="line">E(<span class="string">'页面不存在'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$account = I(<span class="string">'post.account'</span>);</span><br><span class="line">$where = <span class="keyword">array</span>(<span class="string">'account'</span> =&gt; $account);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Js异步验证时，验证地址端只能返回'false'和'true'</span></span><br><span class="line"><span class="keyword">if</span> (M(<span class="string">'user'</span>)-&gt;where($where)-&gt;getField(<span class="string">'id'</span>)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'false'</span>;           </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'true'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//异步验证昵称是否存在</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkUname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!IS_AJAX) &#123;</span><br><span class="line">E(<span class="string">'页面不存在'</span>);</span><br><span class="line">&#125;</span><br><span class="line">$uname = I(<span class="string">'post.uname'</span>);</span><br><span class="line">$where = <span class="keyword">array</span>(<span class="string">'username'</span> =&gt; $uname);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (M(<span class="string">'userinfo'</span>)-&gt;where($where)-&gt;getField(<span class="string">'id'</span>)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'false'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'true'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h1><blockquote><p>登录页面</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--/practice/Home/View/Login/login.html--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"__PUBLIC__/JS/jquery-1.7.2.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"__PUBLIC__/JS/jquery-validate.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"__PUBLIC__/JS/login.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;:U('runLogin')&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">name</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>登录账户：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"account"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"马上登录"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Js处理脚本</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* /practice/Public/Js/login.js */</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">jQuery.validator.addMethod(<span class="string">"user"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">value,element</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> tel = <span class="regexp">/^[a-zA-Z][\w]&#123;4,16&#125;/</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || (tel.test(value));</span><br><span class="line">&#125;,<span class="string">"以字母开头，5-17位 字母、数字、下划线'_'"</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'form[name=login]'</span>).validate(&#123;</span><br><span class="line">success : <span class="function"><span class="keyword">function</span>(<span class="params">label</span>) </span>&#123;</span><br><span class="line">label.addClass(<span class="string">'success'</span>);</span><br><span class="line">&#125;,</span><br><span class="line">rules : &#123;</span><br><span class="line">account : &#123;</span><br><span class="line">required : <span class="literal">true</span>,</span><br><span class="line">user : <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">pwd : &#123;</span><br><span class="line">required : <span class="literal">true</span>,</span><br><span class="line">user : <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">messages : &#123;</span><br><span class="line">account : &#123;</span><br><span class="line">required : <span class="string">'账号不能为空'</span></span><br><span class="line">&#125;,</span><br><span class="line">pwd : &#123;</span><br><span class="line">required : <span class="string">'密码不能为空'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>后端php业务处理</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* /practice/Home/Controller/LoginController.class.php */</span></span><br><span class="line"><span class="comment">//登录页面</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;display();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//登录表单处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">runLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!IS_POST) &#123;</span><br><span class="line">E(<span class="string">'页面不存在'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取表单内容</span></span><br><span class="line">$account = I(<span class="string">'post.account'</span>);</span><br><span class="line">$pwd = I(<span class="string">'post.pwd'</span>,<span class="string">''</span>,<span class="string">'md5'</span>);</span><br><span class="line"></span><br><span class="line">$where = <span class="keyword">array</span>(<span class="string">'account'</span> =&gt; $account);</span><br><span class="line">$user = M(<span class="string">'user'</span>)-&gt;where($where)-&gt;find();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($user) || $user[<span class="string">'password'</span>] != $pwd) &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;error(<span class="string">'用户名或者密码不正确'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//登录成功，写入session并且跳转到首页</span></span><br><span class="line">session(<span class="string">'uid'</span>,$user[<span class="string">'id'</span>]);</span><br><span class="line">redirect(__APP__,<span class="number">3</span>,<span class="string">'登录成功，正在为您跳转...'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;登录注册功能在一个项目中是很常见的，所以我希望将该微博项目中用到的方法和思路归纳一下，方便自己日后去进行调用。&lt;br&gt;因为使用的ThinkPHP框架，所以功能的实现是建立在该框架之上的，有关TP的部分在这里不多做说明，默认按照它的架构去进行布局。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>微博项目_数据库建模</title>
    <link href="http://yoursite.com/2018/02/12/%E5%BE%AE%E5%8D%9A%E9%A1%B9%E7%9B%AE_%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BB%BA%E6%A8%A1/"/>
    <id>http://yoursite.com/2018/02/12/微博项目_数据库建模/</id>
    <published>2018-02-12T03:20:00.000Z</published>
    <updated>2018-02-12T03:30:49.385Z</updated>
    
    <content type="html"><![CDATA[<p>利用两周时间看完了一个仿微博项目视频，希望对其中的一些流程及设计思路等方面加以<br>整理分析，加深自己的印象，并形成自己的一套方法。</p><a id="more"></a><p>下面是该项目教程资源链接：<br>百度云链接：<a href="https://pan.baidu.com/s/1bqf6qWB" target="_blank" rel="noopener">基于ThinkPHP仿微博项目实战</a><br>提取密码：halz</p><p>在具体去用编程实现一个微博项目之前，首要做好的是数据库方面的建模。这样，对于整个项目的轮廓和构架能够有一个更为清晰得认识和了解，对于后续的项目展开有很大的帮助。</p><h1 id="表的设计"><a href="#表的设计" class="headerlink" title="表的设计"></a>表的设计</h1><h2 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h2><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">描述</th><th style="text-align:center">数据类型</th><th style="text-align:center">是否为空</th><th style="text-align:center">Key</th><th style="text-align:center">默认值</th><th style="text-align:center">其他</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">用户id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">PRIMARY KEY</td><td style="text-align:center">NULL</td><td style="text-align:center">AUTO_INCREMENT</td></tr><tr><td style="text-align:center">account</td><td style="text-align:center">账号</td><td style="text-align:center">VARCHAR(20)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">UNIQUE</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">password</td><td style="text-align:center">密码</td><td style="text-align:center">VARCHAR(32)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">registime</td><td style="text-align:center">注册时间</td><td style="text-align:center">INT(10) UNSIGNED</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">lock</td><td style="text-align:center">是否锁定</td><td style="text-align:center">TINYINT(1) UNSIGNED</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center">0</td></tr></tbody></table><h2 id="用户信息表"><a href="#用户信息表" class="headerlink" title="用户信息表"></a>用户信息表</h2><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">描述</th><th style="text-align:center">数据类型</th><th style="text-align:center">是否为空</th><th style="text-align:center">Key</th><th style="text-align:center">默认值</th><th style="text-align:center">其他</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">用户信息id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">PRIMARY KEY</td><td style="text-align:center">NULL</td><td style="text-align:center">AUTO_INCREMENT</td></tr><tr><td style="text-align:center">username</td><td style="text-align:center">用户名</td><td style="text-align:center">VARCHAR(45)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">truename</td><td style="text-align:center">真实名</td><td style="text-align:center">VARCHAR(45)</td><td style="text-align:center">YES</td><td style="text-align:center"></td><td style="text-align:center">NULL</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">sex</td><td style="text-align:center">性别</td><td style="text-align:center">ENUM(‘男’,’女’)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center">男</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">location</td><td style="text-align:center">居住地</td><td style="text-align:center">VARCHAR(45)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">constellation</td><td style="text-align:center">星座</td><td style="text-align:center">VARCHAR(45)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">intro</td><td style="text-align:center">简介</td><td style="text-align:center">VARCHAR(100)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">face</td><td style="text-align:center">头像</td><td style="text-align:center">VARCHAR(60)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">follow</td><td style="text-align:center">关注</td><td style="text-align:center">INT(10) UNSIGNED</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">fans</td><td style="text-align:center">粉丝</td><td style="text-align:center">INT(10) UNSIGNED</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">weibo</td><td style="text-align:center">微博</td><td style="text-align:center">INT(10) UNSIGNED</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">uid</td><td style="text-align:center">用户id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">MULTIPLE</td><td style="text-align:center">NULL</td></tr></tbody></table><h2 id="私信表"><a href="#私信表" class="headerlink" title="私信表"></a>私信表</h2><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">描述</th><th style="text-align:center">数据类型</th><th style="text-align:center">是否为空</th><th style="text-align:center">Key</th><th style="text-align:center">默认值</th><th style="text-align:center">其他</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">私信id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">PRIMARY KEY</td><td style="text-align:center">NULL</td><td style="text-align:center">AUTO_INCREMENT</td></tr><tr><td style="text-align:center">from</td><td style="text-align:center">发信用户</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center">NULL</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">content</td><td style="text-align:center">内容</td><td style="text-align:center">VARCHAR(255)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">time</td><td style="text-align:center">发送时间</td><td style="text-align:center">INT(10) UNSIGNED</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center">NULL</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">uid</td><td style="text-align:center">用户id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">MULTIPLE</td><td style="text-align:center">NULL</td></tr></tbody></table><h2 id="表"><a href="#表" class="headerlink" title="@表"></a>@表</h2><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">描述</th><th style="text-align:center">数据类型</th><th style="text-align:center">是否为空</th><th style="text-align:center">Key</th><th style="text-align:center">默认值</th><th style="text-align:center">其他</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">@id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">PRIMARY KEY</td><td style="text-align:center">NULL</td><td style="text-align:center">AUTO_INCREMENT</td></tr><tr><td style="text-align:center">wid</td><td style="text-align:center">微博id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">MULTIPLE</td><td style="text-align:center">NULL</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">uid</td><td style="text-align:center">用户id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">MULTIPLE</td><td style="text-align:center">NULL</td></tr></tbody></table><h2 id="分组表"><a href="#分组表" class="headerlink" title="分组表"></a>分组表</h2><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">描述</th><th style="text-align:center">数据类型</th><th style="text-align:center">是否为空</th><th style="text-align:center">Key</th><th style="text-align:center">默认值</th><th style="text-align:center">其他</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">分组id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">PRIMARY KEY</td><td style="text-align:center">NULL</td><td style="text-align:center">AUTO_INCREMENT</td></tr><tr><td style="text-align:center">name</td><td style="text-align:center">分组名称</td><td style="text-align:center">VARCHAR(45)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">uid</td><td style="text-align:center">用户id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">MULTIPLE</td><td style="text-align:center">NULL</td></tr></tbody></table><h2 id="关注表"><a href="#关注表" class="headerlink" title="关注表"></a>关注表</h2><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">描述</th><th style="text-align:center">数据类型</th><th style="text-align:center">是否为空</th><th style="text-align:center">Key</th><th style="text-align:center">默认值</th><th style="text-align:center">其他</th></tr></thead><tbody><tr><td style="text-align:center">follow</td><td style="text-align:center">关注用户的id</td><td style="text-align:center">INT(10) UNSIGNED</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">MULTIPLE</td><td style="text-align:center">NULL</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">fans</td><td style="text-align:center">粉丝用户的id</td><td style="text-align:center">INT(10) UNSIGNED</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">MULTIPLE</td><td style="text-align:center">NULL</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">gid</td><td style="text-align:center">所属关注分组的id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">MULTIPLE</td><td style="text-align:center">0</td></tr></tbody></table><h2 id="微博表"><a href="#微博表" class="headerlink" title="微博表"></a>微博表</h2><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">描述</th><th style="text-align:center">数据类型</th><th style="text-align:center">是否为空</th><th style="text-align:center">Key</th><th style="text-align:center">默认值</th><th style="text-align:center">其他</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">微博id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">PRIMARY KEY</td><td style="text-align:center">NULL</td><td style="text-align:center">AUTO_INCREMENT</td></tr><tr><td style="text-align:center">content</td><td style="text-align:center">内容</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">isturn</td><td style="text-align:center">是否转发</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">time</td><td style="text-align:center">发布时间</td><td style="text-align:center">INT(10) UNSIGNED</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center">NULL</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">turn</td><td style="text-align:center">转发次数</td><td style="text-align:center">INT(10) UNSIGNED</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">keep</td><td style="text-align:center">收藏次数</td><td style="text-align:center">INT(10) UNSIGNED</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">comment</td><td style="text-align:center">评论次数</td><td style="text-align:center">INT(10) UNSIGNED</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center">0</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">uid</td><td style="text-align:center">用户id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">MULTIPLE</td><td style="text-align:center">NULL</td></tr></tbody></table><h2 id="图片表"><a href="#图片表" class="headerlink" title="图片表"></a>图片表</h2><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">描述</th><th style="text-align:center">数据类型</th><th style="text-align:center">是否为空</th><th style="text-align:center">Key</th><th style="text-align:center">默认值</th><th style="text-align:center">其他</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">图片id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">PRIMARY KEY</td><td style="text-align:center">NULL</td><td style="text-align:center">AUTO_INCREMENT</td></tr><tr><td style="text-align:center">picture</td><td style="text-align:center">图片</td><td style="text-align:center">VARCHAR(60)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center">NULL</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">wid</td><td style="text-align:center">微博id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">MULTIPLE</td><td style="text-align:center">NULL</td></tr></tbody></table><h2 id="评论表"><a href="#评论表" class="headerlink" title="评论表"></a>评论表</h2><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">描述</th><th style="text-align:center">数据类型</th><th style="text-align:center">是否为空</th><th style="text-align:center">Key</th><th style="text-align:center">默认值</th><th style="text-align:center">其他</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">评论id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">PRIMARY KEY</td><td style="text-align:center">NULL</td><td style="text-align:center">AUTO_INCREMENT</td></tr><tr><td style="text-align:center">content</td><td style="text-align:center">内容</td><td style="text-align:center">VARCHAR(255)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">time</td><td style="text-align:center">评论时间</td><td style="text-align:center">INT(10) UNSIGNED</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center">NULL</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">uid</td><td style="text-align:center">用户id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">MULTIPLE</td><td style="text-align:center">NULL</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Wid</td><td style="text-align:center">微博id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">MULTIPLE</td><td style="text-align:center">NULL</td></tr></tbody></table><h2 id="收藏表"><a href="#收藏表" class="headerlink" title="收藏表"></a>收藏表</h2><table><thead><tr><th style="text-align:center">字段名</th><th style="text-align:center">描述</th><th style="text-align:center">数据类型</th><th style="text-align:center">是否为空</th><th style="text-align:center">Key</th><th style="text-align:center">默认值</th><th style="text-align:center">其他</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">收藏id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">PRIMARY KEY</td><td style="text-align:center">NULL</td><td style="text-align:center">AUTO_INCREMENT</td></tr><tr><td style="text-align:center">uid</td><td style="text-align:center">用户id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">MULTIPLE</td><td style="text-align:center">NULL</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">time</td><td style="text-align:center">收藏时间</td><td style="text-align:center">INT(10) UNSIGNED</td><td style="text-align:center">NOT NULL</td><td style="text-align:center"></td><td style="text-align:center">NULL</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">wid</td><td style="text-align:center">微博id</td><td style="text-align:center">INT(11)</td><td style="text-align:center">NOT NULL</td><td style="text-align:center">MULTIPLE</td><td style="text-align:center">NULL</td></tr></tbody></table><h1 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h1><p>表与表之间不是独立的，存在着一定的关联。</p><table><thead><tr><th style="text-align:center">表名</th><th style="text-align:center">联系</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">用户表与用户信息表</td><td style="text-align:center">1:1</td><td style="text-align:center">一个用户对应着一套用户信息</td></tr><tr><td style="text-align:center">用户表与私信表</td><td style="text-align:center">1:N</td><td style="text-align:center">一个用户可以发多条私信</td></tr><tr><td style="text-align:center">用户表与分组表</td><td style="text-align:center">1:N</td><td style="text-align:center">一个用户可以创建多个分组</td></tr><tr><td style="text-align:center">用户表与@表</td><td style="text-align:center">1:N</td><td style="text-align:center">一个用户可以被多次@</td></tr><tr><td style="text-align:center">用户表与微博表</td><td style="text-align:center">1:N</td><td style="text-align:center">一个用户可以发多条微博</td></tr><tr><td style="text-align:center">分组表与关注表</td><td style="text-align:center">1:N</td><td style="text-align:center">一个分组里可以有多个关注用户</td></tr><tr><td style="text-align:center">微博表与图片表</td><td style="text-align:center">1:1</td><td style="text-align:center">一篇微博对应着一组图片（图片可有可无）</td></tr><tr><td style="text-align:center">微博表与评论表</td><td style="text-align:center">1:N</td><td style="text-align:center">一篇微博可以有多条评论</td></tr><tr><td style="text-align:center">微博表与收藏表</td><td style="text-align:center">1:N</td><td style="text-align:center">一篇微博可以被多次收藏（多个用户收藏）</td></tr></tbody></table><p><img src="http://opznmu7n5.bkt.clouddn.com/post29_1.png" alt=""></p><p>通过这个项目数据库建模以及其中各个表之间的关联，让自己对于整个项目的布局有了更进一步的认识和了解。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;利用两周时间看完了一个仿微博项目视频，希望对其中的一些流程及设计思路等方面加以&lt;br&gt;整理分析，加深自己的印象，并形成自己的一套方法。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>国庆节前小记</title>
    <link href="http://yoursite.com/2017/09/28/%E5%9B%BD%E5%BA%86%E8%8A%82%E5%89%8D%E5%B0%8F%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/09/28/国庆节前小记/</id>
    <published>2017-09-28T10:05:00.000Z</published>
    <updated>2018-05-05T15:17:17.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>我们养成习惯，习惯造就我们</p></blockquote><p>在开始此次的博客内容之前，我想先试着去转变自己的<strong>思维习惯</strong>。今天我主要是要做两件事，其一是在<strong>个人博客</strong>中写下总结博客，其二是整理自己的想法，去写一篇日记。</p><a id="more"></a><h1 id="螺旋式成长思维"><a href="#螺旋式成长思维" class="headerlink" title="螺旋式成长思维"></a>螺旋式成长思维</h1><p>回想过去，那时候因为学习紧张，抽不出太多时间来<strong>写日记</strong>，所以我将写日记放到了每周的周五下午，但是真正到了周五下午，由于感觉自己一周来积压的想法太多，一时间让我将心中的想法全然表达出来，我又会显得不知所措，考虑到这种情况，我当时的想法是<strong>不要给自己施加太大压力，写日记应该是一件很放松，很舒服的事情，你不能因为考虑到有好多内容需要去整理从而感觉到压力太大，不能很好地去享受这一过程，顺其自然就好，按照自己心中的想法慢慢去写，能够写多少就写多少</strong>。这种想法不能被理解为是错误的，因为它的确让我感觉到心情放松了很多，因为我给自己设置的<strong>期望值</strong>低了，所以能够更容易达到要求，结合自己原先意识到的<strong>完美主义</strong>心态，在做事情的过程中，尽管有时候觉得自己做出来的效果和想象中的会有差距，但是我会告诉自己<strong>完美的事情是不存在的</strong>，如果你一味地追求完美，很可能会陷入<strong>要么完美，要么一无是处</strong>的心态，通常情况下在这两种思维的引导下，我能够做成一件件事情，包括目前这个博客里的27篇博客，诚然其中一些博客的质量相比较于其他人总结出来的以及我内心最期待的效果是有一定差距的，但是我能够学着去<strong>接纳自己的不完美</strong>，你能够很好地坚持下来这个习惯已经是很大的进步，不然的话，我很可能会因为<strong>担心最后做到的效果不尽如人意，不完美，为了逃避失败从而不敢于去开始去写博客</strong>。</p><p>上面提到的事例即是一个<strong>引子</strong>，尽管这种思维习惯可以帮助自己做到一些之前不容易做到的事情，但是从长远来看，这种思维模式也是不太好的，它能够对我带来的帮助是不够的，有时候面对一些事情时，我也会去想像这样<strong>通过降低自己的期望值</strong>来帮助自己更容易做到一些事情的做法是不是不太好，因为有时候我特别想做好一件事情，但是想要做好一件事又肯定不会是一件随随便便的事情，在这个实现的过程中不免会有一定的压力及困难，这时按照以往的习惯，我的大脑会告诉自己<strong>降低你的期望，这样我才能更好地确保你可以将其做好</strong>，我会矛盾，是选择听从大脑的指示，通过降低自己的期望，让自己更容易去做到这件事（但是这样和我的初衷便有了出入，因为我想要得是把这件事给做好，但是你为了更容易实现它降低了自己的期望，如此说来，就违背了自己最初的想法），还是说你希望自己能够去搏一把，去迎接难度。</p><p>当面对这样的问题时，我就会显得比较矛盾，不知哪种选择才是更好的。而前段时间因为看<a href="http://open.163.com/special/positivepsychology/" target="_blank" rel="noopener">哈佛幸福课</a>，其中谈到了这个问题，让我更好地认识到了<strong>完美主义者</strong>和<strong>追求卓越者</strong>思想上的差异以及<strong>积极主义者</strong>和<strong>消极主义者</strong>思想上的差异，从中我能够了解到一种更好地处理问题的思维方式，也就是今天我想要试着去改变的，结合<strong>积极主义者</strong>在目标设置上的<strong>高期望</strong>以及<strong>追求卓越者</strong>在实现高期望的目标时，如何正确看待其中的过程，认识到<strong>螺旋式成长曲线</strong>才是更健康的一种生活方式，对于自己能够带来更大的帮助。</p><p>在这里，简单解释一下上面提到的一些名词，因为<strong>哈佛幸福课</strong>的课程有一个特点，它更多地是从科学实验观察的角度来总结那些最优秀的人身上所共有的一些品质，发现他们的共同点，根据<strong>尖端统计学原理</strong>，这些共同点才是我们真正能够从那些成功人士身上所学到的一些东西，不是一些言过其实不可大用的鸡汤，是我们真正可以去相信的一些事情。而从一些观察结果来看，他们发现积极主义者和消极主义者在<strong>长远目标</strong>的设置上都是现实的，可实现的，但是在<strong>近期目标</strong>的设置上，积极主义者的目标是不现实的，对目标有着<strong>高期望</strong>，而消极主义者的目标依旧是<strong>低期望值</strong>。单从这一层面来讲，我之前的思维模式对于自己目标的设置是低期望值的，这样反而陷入了一种消极心理。另一方面，他们发现完美主义者和追求卓越者对于目标的追求都是高期望的，都希望能够<strong>做好一件事</strong>，但不同之处在于如何看待这个过程，完美主义者认为实现这个目标的过程是一条直线，他们只注重最终的结果，害怕在这个过程中会遭遇困难或失败，而追求卓越者所理解的实现目标的过程是一条<strong>螺旋式成长曲线</strong>，能够去享受这个实现目标的过程，正因为整个过程不会是一条直线，而是螺旋式的，所以会有起伏波动，他们能够正确地看待<strong>失败</strong>，享受整个过程。单从这一层面来讲，我之前由于对完美主义有了一定的了解，所以在做事的时候，会有意识地去避免自己陷入其中，会接纳自己的不完美，不会因为觉得自己实际做到的效果并不完美从而放弃前进，但在另一方面，由于我对于自己目标的期望值设置是比较低的，并不能说明我便是一个追求卓越的人，因为较低的期望值，所以我有时候更容易去实现要求，对于<strong>螺旋式成长</strong>的体会并不那么深刻，也不会因为期望值比较高体会到<strong>如何面对失败，如何从失败中去学习，如何才能将由失败所造成的向下的曲线转变为向上的曲线，从而实现螺旋式成长的过程</strong>，所以我觉得这才是我希望加以改善的一个方面，这样的生活才更有价值和意义，能够让自己有更高的热情。</p><p>与此同时，我在这个课程中还了解到了<strong>可塑思维</strong>和<strong>固有思维</strong>的差异，结合这几个方面，现在我所希望进行改善的即是<strong>当自己需要做一件事（例如记博客）时，可以对结果保持较高的期望值，想要将事情做到更好，但是你需要认可「螺旋式成长思维」，意识到高期望难免会招致困难或失败，自己要学会去正确认识它，并「努力」（可塑思维）去想办法将向下的曲线转变为向上，学会去享受这个追求目标的过程</strong>。这种思维习惯即是<strong>追求卓越</strong>的一种表现，它能够让我们对于事情抱有更大的热情，而且因为明白想要实现它不可能是随随便便的，需要自己为之付出汗水和心血，而自己也很乐意为之而努力，这样的生活才也更有意义价值，不是么？</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>结合上面所提及的<strong>思维转换</strong>，具体到这从的博客上即是<strong>我的目标是希望运用博客将自己内心的想法很好地展现出来，我想要令自己感到满意，但它有可能不会是一帆风顺的，需要自己为之付出更多，而我也能够学会去享受这个过程，很乐意为实现这个目标而努力。</strong></p><p>这次呢，抓住了九月的小尾巴，给自己的博客又增添了一丝痕迹。而在记录这篇博客之前，我将之前自己曾写过的几篇<strong>心情随笔</strong>看了一下，算上这次一共是四次，比较巧妙的是我发现每一次博客的时间间隔都是两个月。两个月，对于生活能够有什么转变呢？</p><ul><li>第一次心情随笔也是我搭建好博客平台后的第一篇博客，在表明将学习重心放于理论学习之上的同时，希望自己能够培养一些生活爱好，不要做一个太无趣的人。</li><li>第二次写在<strong>端午节</strong>那天，在学习方面汇报了自己之前定下的目标进度，同时为下一阶段的学习制定了计划，在生活方面，点出了自己存在的几个问题。</li><li>第三次写在<strong>大二暑假</strong>期间，字里行间流露出一种无奈和伤感，很好地凸显出了自己身上存在的一个大问题（在后面我会详细讲到这个问题）。</li></ul><p>通过回顾这几篇博客，我发现其中提到的一些事情，有些自己一直在做，也有些开始被自己慢慢忽略掉。开学一个月的时间，自己已经没再看过<strong>电影</strong>了，<strong>锻炼</strong>一直在坚持（大二暑假期间曾因为心情一度低落，那时特别担心锻炼会被自己遗弃），出去<strong>旅游</strong>过一次，<strong>知乎</strong>上写了两篇回答，说好的大三可以<strong>谈恋爱</strong>，只是我已经找不到那个自己愿意为之而付出的女人，也未能发现愿意为我付出的那个女人，是我要求太高？还是对自己的认定太低？自负的同时又夹杂着自卑，影响着自己的选择。</p><p>开学这段时间，我只写过一篇博客，这是我不愿看到的结果，你这些天都在做些什么？简单总结来说，开学四周时间，有三周自己处于学习状态，有一周是被自己荒废掉的。学习的这几周，自己并未记录博客，也并不代表着自己没有前进，只是因为我比较担心自己的项目进度而不愿花费时间去整理学习笔记，用来更多地去想如何实现项目功能。我无从得知这种担心是多虑的还是有必要的，只是因此我在博客上看不到了自己的坚持，它变成了一个被我遗弃的角落，而有关自己的项目进度，有时也会出现一些问题，虽说自己之前一直嚷嚷着要代入项目中去进行学习，但是真正到了这个阶段你又显得没有那么自信了。在突破这个桎梏的过程中，我所希望的是如何能够利用好<strong>螺旋式成长思维</strong>来帮助自己改善这种状况。</p><p>在这里分析一下我刚刚讲到的自身存在的一个问题，这几篇<strong>心情随笔</strong>都是在特定的环境下去写的，自己在写第二篇博客时心情正处于低落状态还未调整过来，希望借博客来表达自己内心的想法，舒缓身心。在写第三篇博客时心情也很不好，从字里行间也能看得出来，那时我正经历着从堕落到学习的转化期，放暑假的将近前半个月，我一直都没能进入学习状态，很痛苦。而在新开学的第一个月里，我提到有一周自己是没有学习的，这其中都有一定的联系，因为说到底自己都是受一种思维的影响，而这次的博客其实也可以被称之为一剂<strong>预防针</strong>，即是希望自己放松清闲之后不要再重蹈覆辙。</p><p>这种现象是<strong>由于对自律的严要求、高期望，但是未能做到且内心又无法接受这一现实从而使得自己崩溃</strong>所导致的。我觉得在这一方面，我陷入了<strong>完美主义</strong>，因为眼里容不得沙子，我无法认可自己在严于律己的过程中有哪怕一丝丝的堕落，这都会让我特别痛苦，而我也为之付出了沉重的代价，越是无法认可它，越是自责，越是为自己增加罪恶感，我的心情会变得越沉重，反而越容易一直陷入其中无法自拔，就这样形成了向下的一个<strong>消极循环</strong>。之前的自己一直就是这样处理着生活，当我心态平稳时我能够用心去学习，但是哪怕我犯了一点小错误，我都无法接受，心情很低落，不知不觉间便形成了这样一种消极循环，会让我那几天里都无法正常学习，心情低沉。<strong>要么完美，要么崩溃</strong>，就是这样的一种状态。从<strong>《自控力》</strong>这本书以及<strong>《哈佛幸福课》</strong>中，我看到了这一点，而且从中了解到了一个更好的方法来帮助自己处理这个问题。一方面自己不能够盲目乐观，要<strong>在自信能够做成某事的基础上直视现实问题，并努力为之付出</strong>。同时，我意识到<strong>在心情已经很低落时自责，惩罚自己，为自己施加罪恶感只会让自己心情更低落，而心情低落的时候我们又会更容易去犯错误，容易陷入消极循环。当心情低落时首要去做的是要能够恢复自己的状态，要学会自我同情，去安慰自己</strong>。其次，对于一些正确的减压方式，例如<strong>冥想，听歌，运动</strong>等，的确能够让自己的心情好转很多，你不能够忽略掉这一点。<strong>行动</strong>也显得特别重要，试着给自己5分钟时间去开始，因为你很清楚当你心情低落时，你最担心的就是去行动，去面对。但是逃避会<strong>放大</strong>问题，使你不敢于去做，你意识到当自己真正开始去做，去行动，去面对时，它顿时显得没有那么难度。</p><p>原先的自己在严于律己的道路上犯了小错误，会因为我的思维问题，慢慢演化为一个大问题，而上面这些体会是我开学那一周因为心情低落而切身体会到的整个心理变化历程，结合自己了解到的心理学原理，能够对它有进一步地认识，我之所以在这里提及这个话题也是希望能够学着将自己所了解到的一些想法运用于日常生活中，慢慢去进行改善。</p><h1 id="生活规划"><a href="#生活规划" class="headerlink" title="生活规划"></a>生活规划</h1><p>这段时间，自己并未有什么生活乐趣，每天分为两种状态，心情平稳时会学习，心情不好时会想办法恢复状态，一直以来是处于两种极端，而这也是我说了这么多，想要去改善的一个方面，因为你需要意识到有时候会因为各种问题或失败从而让自己的心情变得不好，这是很正常的一件事情，<strong>螺旋式成长思维</strong>正是体现于此，因为有着起伏波动，才形成了螺旋式曲线，这是很健康的一种生活方式，当遭遇问题或失败时，没关系，这绝不应理解为生极端，也不应理解为对于自己严于律己的断节，89你所需要的即是正确认识它，努力想办法将由失败或问题所造成的向下的曲线转换为向上的曲线，去享受这个改变的过程，这即是一种生活的意义。</p><p>我目前能够谈到的，依旧是那几个方面，经过这段时间的坚持以及思维方式的转换，</p><ul><li><strong>运动</strong>这一习惯慢慢地被自己培养起来，如果没有什么事情的话，晚上9点-10点这段时间便是自己锻炼身体的时间，有时候会跑步，有时候会结合keep教程来做无氧运动。</li><li>之前自己曾保持着<strong>看电影</strong>的习惯，但是有时候自己遇到问题难以解决，生活受挫心情比较差，但是又意识到是看电影的时间了，这时我将问题归结为是自己将时间都浪费在看电影上了，从而让自己变得迷茫。我明白这是不切实际的，但是当时我对于电影的确是抱有一丝幻想，因为我那时候更多地是去看了一些比较优秀、比较经典的电影，我曾认为它们能够对自己带来一些启迪作用，能够对自己的生活带来一些帮助作用，可以说是带着一种功利性的角度去看电影，但是我在现实生活中发现自己依旧会受挫，遇到一些问题无法解决时，我会觉得看这么些好电影有什么用呢，我的生活不是依旧很糟糕么，就这样慢慢将其忽略掉了。诚然，这是一种错误的认识，也是一种悲观的心态。如果让我重新去培养看电影的习惯，我不希望自己抱着原来的那种理念，将其作为一种<strong>生活娱乐消遣</strong>，不要过多地将其与自己的生活联系在一起。</li><li>关于<strong>谈恋爱</strong>，呵呵…哒￣ ￣)σ，我也是没什么办法吖，缘分天注定吧。</li><li>至于其他方面的<strong>生活爱好</strong>，我没发现有什么是自己喜欢的，也就无法去培养，所以还在努力去寻找。</li></ul><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><blockquote><p>每一个不起舞的日子都是对青春的辜负</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;我们养成习惯，习惯造就我们&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在开始此次的博客内容之前，我想先试着去转变自己的&lt;strong&gt;思维习惯&lt;/strong&gt;。今天我主要是要做两件事，其一是在&lt;strong&gt;个人博客&lt;/strong&gt;中写下总结博客，其二是整理自己的想法，去写一篇日记。&lt;/p&gt;
    
    </summary>
    
      <category term="心情随笔" scheme="http://yoursite.com/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="心语" scheme="http://yoursite.com/tags/%E5%BF%83%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP框架学习（三）</title>
    <link href="http://yoursite.com/2017/09/03/ThinkPHP%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2017/09/03/ThinkPHP框架学习（三）/</id>
    <published>2017-09-03T15:40:00.000Z</published>
    <updated>2018-05-05T15:16:43.706Z</updated>
    
    <content type="html"><![CDATA[<p>根据<a href="http://www.ai-heng.cn/2017/08/10/ThinkPHP%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/#more" target="_blank" rel="noopener">ThinkPHP框架学习（二）</a>中讲到的<strong>绝对路径</strong>与<strong>相对路径</strong>设置，将对应的商城模板文件转移到<strong>market文件夹</strong>后，接下来，就其中涉及到的一些知识点做一番补充总结。</p><a id="more"></a><h1 id="给静态资源文件设置目录访问常量"><a href="#给静态资源文件设置目录访问常量" class="headerlink" title="给静态资源文件设置目录访问常量"></a>给静态资源文件设置目录访问常量</h1><p>前面我们提及到，引入模板文件后，需要调整html文件和css文件的路径关系，再结合tp框架的<strong>路由解析形式</strong>，最后确定了类似<strong>/market/Public/Home/css/style.css</strong>的路径引用形式。但是这里可以进行一番改进，当路径发生变化时，为了便于后期的维护，避免重复地在代码中更改路径位置，可以在入口文件<strong>index.php</strong>中将css、img、js路径定义为常量，在模板中通过常量的形式把静态资源引入。<br>打开<strong>index.php</strong>，在其中添加如下代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给静态资源文件访问目录设置常量，方便后期维护</span></span><br><span class="line"><span class="comment">//Home分组</span></span><br><span class="line">define(<span class="string">'CSS_URL'</span>,<span class="string">'/market/Public/Home/css/'</span>);</span><br><span class="line">define(<span class="string">'IMG_URL'</span>,<span class="string">'/market/Public/Home/images/'</span>);</span><br><span class="line">define(<span class="string">'JS_URL'</span>,<span class="string">'/market/Public/Home/js/'</span>);</span><br><span class="line"><span class="comment">//Admin分组</span></span><br><span class="line">define(<span class="string">'A_CSS_URL'</span>,<span class="string">'/market/Public/Admin/css/'</span>);</span><br><span class="line">define(<span class="string">'A_IMG_URL'</span>,<span class="string">'/market/Public/Admin/img/'</span>);</span><br><span class="line">define(<span class="string">'A_JS_URL'</span>,<span class="string">'/market/Public/Admin/js/'</span>);</span><br></pre></td></tr></table></figure></p><p>此时，在模板中引入css文件时，引入形式如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改前</span></span><br><span class="line">&lt;link href=<span class="string">"/market/Public/Admin/css/mine.css"</span> type=<span class="string">"text/css"</span> rel=<span class="string">"stylesheet"</span> /&gt;</span><br><span class="line"><span class="comment">//修改后</span></span><br><span class="line">&lt;link href=<span class="string">"&lt;?php echo A_CSS_URL; ?&gt;mine.css"</span> type=<span class="string">"text/css"</span> rel=<span class="string">"stylesheet"</span> /&gt;</span><br></pre></td></tr></table></figure></p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>在<strong>TP框架</strong>中，有几种不同的配置文件，例如在market项目中，与之有关的配置文件如下：</p><ul><li>ThinkPHP/Conf/convention.php            系统主要配置文件，平时不做修改，针对所有项目都起作用</li><li>market/Common/Conf/config.php            当前market项目的配置文件，仅针对market项目起作用</li><li>market/Home/Conf/config.php                当前market项目Home分组的配置文件，仅针对market项目中的Home分组起作用</li></ul><p>对于以上三个配置文件，如果存在同名的配置变量，后者会覆盖前者。</p><p>接下来，针对<strong>market项目</strong>，对其具体做一些配置。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line"><span class="comment">//'配置项'=&gt;'配置值'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//页面底部显示跟踪信息</span></span><br><span class="line">    <span class="string">'SHOW_PAGE_TRACE'</span>   =&gt;<span class="keyword">true</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//默认分组设置</span></span><br><span class="line">    <span class="string">'DEFAULT_MODULE'</span>    =&gt; <span class="string">'Home'</span>, </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//默认模块,访问网站时，若省略分组内容，则填充为默认模块</span></span><br><span class="line">    <span class="string">'MODULE_ALLOW_LIST'</span>    =&gt; <span class="keyword">array</span>(<span class="string">'Home'</span>,<span class="string">'Admin'</span>),    <span class="comment">//定义可供访问的分组列表</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Smary模板引擎切换</span></span><br><span class="line">    <span class="string">'TMPL_ENGINE_TYPE'</span>      =&gt; <span class="string">'Smarty'</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>TP框架支持<strong>Smarty模板引擎</strong>，当切换为该引擎之后，对于css、img等静态资源文件的调用需要结合Smarty模板引擎进行设置，<br>此时，在模板中引入css文件时，引入形式如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改前</span></span><br><span class="line">&lt;link href=<span class="string">"&lt;?php echo A_CSS_URL; ?&gt;mine.css"</span> type=<span class="string">"text/css"</span> rel=<span class="string">"stylesheet"</span> /&gt;</span><br><span class="line"><span class="comment">//修改后</span></span><br><span class="line">&lt;link href=<span class="string">"&#123;$smarty.const.A_CSS_URL&#125;mine.css"</span> type=<span class="string">"text/css"</span> rel=<span class="string">"stylesheet"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p>另外，切换为Smarty引擎后，有可能会出现如下错误：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/post27_1.png" alt=""><br>其原因在于Smarty模板中的<code>{}</code>与css或js有冲突，有如下几种解决方案：</p><ol><li>在<code>{}</code>与内容中间设置空格</li><li>使<code>{}</code>左右标记换行</li><li>设置{literal}{/literal}标记</li><li>改变Smarty的标记符号</li></ol><h1 id="后台品字形页面搭建"><a href="#后台品字形页面搭建" class="headerlink" title="后台品字形页面搭建"></a>后台品字形页面搭建</h1><p>后台界面使用<strong>frame</strong>标签搭建而成，frame标签的src属性值不能设置相对路径，因为相对地址会受到路由最后一级地址的影响而使得请求有可能失败，所以最好使用绝对路径。设置过绝对路径之后，我们需要考虑同样的问题，即为了便于后期维护和升级，我们可以将路径地址设置为常量。</p><p>TP框架自身提供了一些常量：</p><p>http://网址/index.php/分组/控制器/操作方法/名称/值/名称/值/ </p><p><code>__MODULE__</code>:            路由地址分组信息        (http://网址/index.php/分组)<br><code>__CONTROLLER__</code>:        路由地址控制器信息        (http://网址/index.php/分组/控制器)<br><code>__ACTION__</code>：            路由地址操作方法信息    (http://网址/index.php/分组/控制器/操作方法)<br><code>__SELF__</code>:                路由地址的全部信息       (http://网址/index.php/分组/控制器/操作方法/名称/值/名称/值/ )</p><p><code>MODULE_NAME</code>:            分组名称<br><code>CONTROLIER_NAME</code>:        控制器名称<br><code>ACTION_NAME</code>:            操作方法名称</p><p>根据具体情况，选择相对应的常量去替换路径地址，而且这些常量不需要php的echo输出，会直接变成具体的常量信息，因为tp框架自身有“替换机制”，会将其替换为对应的常量内容。其次，在这里还需要结合Smarty模板语法特征，修改样例如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改前</span></span><br><span class="line">&lt;frame name=head src=<span class="string">"/market/index.php/Admin/Index/head.html"</span> frameborder=<span class="number">0</span> noresize scrolling=no&gt;</span><br><span class="line"><span class="comment">//修改后</span></span><br><span class="line">&lt;frame name=head src=<span class="string">"&#123;$smarty.const.__CONTROLLER__&#125;/head.html"</span> frameborder=<span class="number">0</span> noresize scrolling=no&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据&lt;a href=&quot;http://www.ai-heng.cn/2017/08/10/ThinkPHP%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/#more&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ThinkPHP框架学习（二）&lt;/a&gt;中讲到的&lt;strong&gt;绝对路径&lt;/strong&gt;与&lt;strong&gt;相对路径&lt;/strong&gt;设置，将对应的商城模板文件转移到&lt;strong&gt;market文件夹&lt;/strong&gt;后，接下来，就其中涉及到的一些知识点做一番补充总结。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>二叉树平衡检查（递归思想分析）</title>
    <link href="http://yoursite.com/2017/08/19/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B9%B3%E8%A1%A1%E6%A3%80%E6%9F%A5%EF%BC%88%E9%80%92%E5%BD%92%E6%80%9D%E6%83%B3%E5%88%86%E6%9E%90%EF%BC%89/"/>
    <id>http://yoursite.com/2017/08/19/二叉树平衡检查（递归思想分析）/</id>
    <published>2017-08-19T00:50:00.000Z</published>
    <updated>2018-07-18T09:35:45.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树平衡检查"><a href="#二叉树平衡检查" class="headerlink" title="二叉树平衡检查"></a>二叉树平衡检查</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>实现一个函数，检查二叉树是否平衡，平衡的定义如下，对于树中任意一个结点，两颗子树的高度差不超过1。<br>给定指向树根结点的指针TreeNode* root，请返回一个bool，代表这棵树是否平衡。</p><a id="more"></a><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>树结构自身就是<strong>递归</strong>定义，很多问题都可以利用递归巧妙地实现，对于这道题，关键点有两处：</p><ol><li>求结点左右子树高度差</li><li>遍历树中所有结点</li></ol><p>之前我们做过<strong>树的最大深度</strong>问题以及<strong>树的遍历</strong>问题，将两者结合起来，便可以解决这两个关键点。<br>解题思路为：</p><ol><li>若根结点为空，则二叉树平衡</li><li>调用Depth函数求结点高度</li><li>分别求出结点左右子树高度并将高度差赋给differ，判断是否满足平衡二叉树的条件</li><li>递归遍历左子树和右子树，重复以上操作</li></ol><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    struct TreeNode *left;</span></span><br><span class="line"><span class="comment">    struct TreeNode *right;</span></span><br><span class="line"><span class="comment">    TreeNode(int x) :</span></span><br><span class="line"><span class="comment">            val(x), left(NULL), right(NULL) &#123;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Balance</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isBalance</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> differ=Depth(root-&gt;left)-Depth(root-&gt;right);</span><br><span class="line">        <span class="keyword">if</span> (differ&gt;<span class="number">1</span>||differ&lt;<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> isBalance(root-&gt;left)&amp;&amp; isBalance(root-&gt;right);       <span class="comment">//递归遍历树中所有结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算结点高度</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> L_high=Depth(root-&gt;left);</span><br><span class="line">        <span class="keyword">int</span> R_high=Depth(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> (left&gt;right) ? (left+<span class="number">1</span>) : (right+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="递归思想分析"><a href="#递归思想分析" class="headerlink" title="递归思想分析"></a>递归思想分析</h1><p>这道题中值得一提的是其中体现出的<strong>递归思想</strong>，<strong>源代码</strong>中有两处递归调用，而如果我们去观察的话，会发现它们的形式是不同的。<strong>isBalance函数</strong>中，<strong>问题的解决</strong>在<strong>递归调用函数</strong>之前，而在<strong>Depth</strong>函数中，<strong>递归调用函数</strong>在<strong>问题的解决</strong>之前。但是，这又有什么不同呢？</p><p>我们知道<strong>递归</strong>是一个调用并返回的过程，它要求待解决的问题可以拆分为很多个解法相同或类似的小问题,通过<strong>递</strong>的过程由近及远，到达<strong>临界点</strong>（也就是<strong>结束条件</strong>）然后再开始<strong>归</strong>，我们经常搞不清楚的是在这样一个过程中，问题是如何一步步被解决的？</p><p>之前看了一篇关于<a href="http://zisong.me/post/suan-fa/ren-nao-li-jie-di-gui" target="_blank" rel="noopener">大脑理解递归</a>的文章，里面对于这一点讲得很好，对于我理解递归起到了很大的帮助。<br>递归过程有不同的模式，而它们都有三个共同的要素：<strong>递+结束条件+归</strong></p><h2 id="模式1"><a href="#模式1" class="headerlink" title="模式1"></a>模式1</h2><pre><code>function(大问题)  {    if (end_condition)  {             //结束条件        return ;    }    else  {        //先将一个大问题拆分为小问题，当“递”到“结束条件”返回的过程中，再依次解决问题        recursive(小问题);          // 递  =&gt;  递归调用函数        solve questions;           // 归  =&gt;  问题的解决    }}</code></pre><p>这种模式就对应于<strong>源代码</strong>中的<strong>Depth函数</strong>，假如我们给定一棵如下结构的二叉树，</p><p><img src="http://opznmu7n5.bkt.clouddn.com/post26_4.png" alt=""><br>我们去分析<strong>Depth函数</strong>的递归流程，如下：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/post26_2.png" alt=""><br>从图中可以看出，程序的执行流程是<strong>递归调用函数（递）→返回（结束条件）→解决问题（归）</strong>，问题是在递归调用返回的过程中一步步被解决的。</p><h2 id="模式2"><a href="#模式2" class="headerlink" title="模式2"></a>模式2</h2><pre><code>function(大问题)  {    if (end_condition)  {          //结束条件        return ;    }    else  {        //在将大问题逐步拆分为小问题的同时去解决问题        solve questions;            // 递  =&gt; 问题的解决        recursive(小问题);          // 递  =&gt; 递归调用函数    }}</code></pre><p>这种模式就对应于<strong>源代码</strong>中的<strong>isBalance函数</strong>，依旧利用上面提及的二叉树结构，去分析<strong>isBalance函数</strong>的递归流程，如下：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/post26_3.png" alt=""><br>从图中可以看出，程序的执行流程是<strong>解决问题（递）→递归调用函数（递）→返回（结束条件）→一步步返回上层（归）</strong>，每一次问题的解决都是在递归调用函数的过程中（<strong>递</strong>）便已经被解决，而不是在返回（<strong>归</strong>）的过程中。</p><p>对于<strong>递归思想</strong>的理解，有人曾做了一个形象的比喻：</p><blockquote><p>你打开面前这扇门，看到屋里面还有一扇门（这门可能跟前面打开的门一样大小（静），也可能门小了些（动）），你走过去，发现手中的钥匙还可以打开它，你推开门，发现里面还有一扇门，你继续打开，。。。， 若干次之后，你打开面前一扇门，发现只有一间屋子，没有门了。 你开始原路返回，<strong>每走回一间屋子，你数一次</strong>，走到入口的时候，你可以回答出你到底用这钥匙开了几扇门。</p></blockquote><p>这种说法其实并不全面，它对应了<strong>模式1</strong>，在<strong>归</strong>的过程中一步步解决问题。<br>而我们可以对其稍加修改，这样就可以对应<strong>模式2</strong>。</p><blockquote><p>你打开面前这扇门，看到屋里面还有一扇门（这门可能跟前面打开的门一样大小（静），也可能门小了些（动）），你走过去，发现手中的钥匙还可以打开它，你推开门，发现里面还有一扇门，你继续打开。。。而在打开门的过程中，<strong>每走到一间屋子，你数一次</strong>， 若干次之后，你打开面前一扇门，发现只有一间屋子，没有门了。 你开始原路返回，走到入口的时候，你可以回答出你到底用这钥匙开了几扇门。</p></blockquote><p>这两种形式都有调用并返回（<strong>递归</strong>）的过程，不同点在于问题被解决的时机不同，有可能是在<strong>递</strong>的过程中就已经被解决，也可能是在<strong>归</strong>的过程中被解决。</p><blockquote><p>以上是我对于<strong>递归</strong>的一些理解，可能会有不当之处，望指出Thanks♪(･ω･)ﾉ</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;二叉树平衡检查&quot;&gt;&lt;a href=&quot;#二叉树平衡检查&quot; class=&quot;headerlink&quot; title=&quot;二叉树平衡检查&quot;&gt;&lt;/a&gt;二叉树平衡检查&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;实现一个函数，检查二叉树是否平衡，平衡的定义如下，对于树中任意一个结点，两颗子树的高度差不超过1。&lt;br&gt;给定指向树根结点的指针TreeNode* root，请返回一个bool，代表这棵树是否平衡。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
      <category term="递归" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>recover-binary-search-tree</title>
    <link href="http://yoursite.com/2017/08/17/recover-binary-search-tree/"/>
    <id>http://yoursite.com/2017/08/17/recover-binary-search-tree/</id>
    <published>2017-08-17T09:20:00.000Z</published>
    <updated>2018-05-05T15:14:56.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Two elements of a binary search tree (BST) are swapped by mistake.<br>Recover the tree without changing its structure.<br><strong>Note:</strong><br>A solution using O(n ) space is pretty straight forward. Could you devise a constant space solution?</p><a id="more"></a><p>意思就是一个<strong>二叉排序树</strong>中的两个元素互换了位置，我们需要将其调整过来。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>根据<strong>BST(二叉排序树)</strong>中序遍历结果为增序的特点，在中序遍历该二叉树的过程中找到两处不符合BST特点的位置并加以保存，之后将两者交换位置。</p><h1 id="源代码表示"><a href="#源代码表示" class="headerlink" title="源代码表示"></a>源代码表示</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for binary tree</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    TreeNode *pre=<span class="literal">NULL</span>;         <span class="comment">//当前访问结点的前一个结点</span></span><br><span class="line">    TreeNode *first=<span class="literal">NULL</span>;       <span class="comment">//第一个需要调换的结点</span></span><br><span class="line">    TreeNode *second=<span class="literal">NULL</span>;      <span class="comment">//第二个需要调换的结点</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//利用中序遍历思想找出两个位置错误的结点</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Inorder</span><span class="params">(TreeNode *root)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="literal">nullptr</span>)</span><br><span class="line">            <span class="keyword">return</span>;              <span class="comment">//递归结束条件</span></span><br><span class="line">        Inorder(root-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(pre!=<span class="literal">NULL</span>&amp;&amp;pre-&gt;val&gt;root-&gt;val)  &#123;</span><br><span class="line">            <span class="comment">//不满足BST特性，说明pre结点位置有误</span></span><br><span class="line">            <span class="keyword">if</span>(first==<span class="literal">NULL</span>)</span><br><span class="line">                first=pre;</span><br><span class="line">                <span class="comment">//如果此时的root即为第二个错误的结点位置，那么这一次就找到了两个结点位置，</span></span><br><span class="line">                <span class="comment">//如果不是的话，second在后面的执行的过程中会被重新赋值</span></span><br><span class="line">                second=root;</span><br><span class="line">        &#125;</span><br><span class="line">        pre=root;       <span class="comment">//每次判断之后将pre向前推进</span></span><br><span class="line">        Inorder(root-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recoverTree</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        Inorder(root);</span><br><span class="line">        <span class="keyword">int</span> tmp=first-&gt;val;</span><br><span class="line">        first-&gt;val=second-&gt;val;</span><br><span class="line">        second-&gt;val=tmp;             <span class="comment">//将找到的两个错误结点互换位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h1><p>之前对于递归调用总是有些迷糊，在上一篇博客中，我分析了一下<strong>先序递归遍历二叉树</strong>的流程，对于这道题也是有一定的帮助，我稍微加以改进即能够将这道题递归调用的流程分析出来，我觉得这种用大括号来表示层层递归的方式还是挺不错的，容易理解。</p><p>例如，给定一棵如下结构的<strong>二叉排序树</strong></p><p><img src="http://opznmu7n5.bkt.clouddn.com/post25_2.png" alt=""><br>从中可以看出，结点7和结点2的位置有错误，按照上述代码执行的话，其中<strong>Inorder函数</strong>的具体流程如下：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/post25_1.png" alt=""><br>从图中可以看出，当<strong>Inorder函数</strong>执行结束后，<strong>first=7,second=2</strong>，正是我们需要找的结点，将它们进行互换即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;Two elements of a binary search tree (BST) are swapped by mistake.&lt;br&gt;Recover the tree without changing its structure.&lt;br&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;br&gt;A solution using O(n ) space is pretty straight forward. Could you devise a constant space solution?&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
      <category term="LeetCode" scheme="http://yoursite.com/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>遍历二叉树（递归与非递归）</title>
    <link href="http://yoursite.com/2017/08/17/%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E9%80%92%E5%BD%92%E4%B8%8E%E9%9D%9E%E9%80%92%E5%BD%92%EF%BC%89/"/>
    <id>http://yoursite.com/2017/08/17/遍历二叉树（递归与非递归）/</id>
    <published>2017-08-17T07:51:00.000Z</published>
    <updated>2018-05-05T15:14:18.522Z</updated>
    
    <content type="html"><![CDATA[<p>接下来的几天里，我会更多地关注于<strong>算法</strong>这一块，每天去<strong>牛客网</strong>刷题，并将其记录在这里。<br>这两天一直在看与<strong>二叉树</strong>相关的题，利用这篇博客对于二叉树的遍历做一番总结。</p><p><strong>二叉树的遍历</strong>是指按照某条搜索路线遍访每个结点且不重复，它是树结构插入、删除、修改、查找和排序运算的前提，也是二叉树一切运算的基础和核心。<br>因为树的结构定义本身就是递归，所以递归遍历二叉树会显得更加简洁。但是越简单，有时候理解起来就感觉越为抽象，就像著名的<strong>汉诺塔</strong>问题一样，我对于递归遍历二叉树的流程没有一个深入的认识了解，而接下来我会去深入了解一下。</p><a id="more"></a><p>定义二叉树的存储结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line">status BiNode *lchild,*rchild; </span><br><span class="line">&#125;TreeNode,*BiTree;</span><br></pre></td></tr></table></figure><h1 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h1><p><strong>特点：</strong>若二叉树为空，则空操作；否则先访问根结点，然后遍历左子树，再遍历右子树</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span><span class="params">(TreeNode *root)</span>  </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root!=<span class="literal">NULL</span>)  &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;root-&gt;data;               <span class="comment">//在层层调用的过程中即输出结点值</span></span><br><span class="line">PreOrderTraverse(root-&gt;lchild);</span><br><span class="line">PreOrderTraverse(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>假如有一棵如下结构的二叉树：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/post24_1.png" alt=""></p><p>将其利用<strong>递归先序</strong>的方式遍历，具体执行流程如下：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/post24_2.png" alt=""></p><p>整个递归过程即是函数的层层调用，类似于将函数进行<strong>压栈处理</strong>。</p><p>另外需要提及的一点是：从递归的角度去遍历二叉树时，如果去掉输出语句，三种算法是完全相同的。<br>即<strong>访问路径是相同的，只是访问结点的时机不同</strong>。</p><p><img src="http://opznmu7n5.bkt.clouddn.com/post24_4.png" alt=""></p><p>从虚线的出发点到终点路径上，每个结点经过3次。</p><ul><li>第1次经过时访问结点：<strong>先序遍历</strong></li><li>第2次经过时访问结点：<strong>中序遍历</strong></li><li>第3次经过时访问结点：<strong>后序遍历</strong></li></ul><h2 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorderTraverse</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode *&gt; s;</span><br><span class="line">        TreeNode *p=root;</span><br><span class="line">        <span class="keyword">while</span> (p||!s.empty())  &#123;</span><br><span class="line">            <span class="keyword">while</span> (p)  &#123;         <span class="comment">//沿着结点到最左下</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;p-&gt;data;      </span><br><span class="line">                s.push(p);</span><br><span class="line">                p=p-&gt;lchild;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!s.empty())  &#123;</span><br><span class="line">                p=s.top();</span><br><span class="line">                s.pop();</span><br><span class="line">                p=p-&gt;rchild;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原理分析-1"><a href="#原理分析-1" class="headerlink" title="原理分析"></a>原理分析</h3><p>还是利用上面提及的那棵二叉树，将其利用<strong>先序非递归</strong>的方式遍历，<strong>栈</strong>的变化过程如下：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/post24_3.png" alt=""></p><h1 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h1><p><strong>特点：</strong>若二叉树为空，则空操作；否则先遍历左子树，然后访问根结点，再遍历右子树</p><h2 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(TreeNode *root)</span>  </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root!=<span class="literal">NULL</span>)  &#123;</span><br><span class="line">InOrderTraverse(root-&gt;lchild);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;root-&gt;data;</span><br><span class="line">InOrderTraverse(root-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非递归-1"><a href="#非递归-1" class="headerlink" title="非递归"></a>非递归</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InorderTraverse</span><span class="params">(TreeNode *root)</span>  </span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;TreeNode *&gt; s;</span><br><span class="line">TreeNode *p=root;</span><br><span class="line"><span class="keyword">while</span> (p||!s.empty())  &#123;</span><br><span class="line"><span class="keyword">while</span> (p)  &#123;</span><br><span class="line">s.push(p);</span><br><span class="line">p=p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!s.empty())  &#123;</span><br><span class="line">p=s.top();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;p-&gt;data;</span><br><span class="line">s.pop();</span><br><span class="line">p=p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h1><p><strong>特点：</strong>若二叉树为空，则空操作；否则先遍历左子树，然后访问根结点，再遍历右子树</p><h2 id="递归-2"><a href="#递归-2" class="headerlink" title="递归"></a>递归</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraverse</span><span class="params">(TreeNode *root)</span>  </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root!=<span class="literal">NULL</span>)  &#123;</span><br><span class="line">PostOrderTraverse(root-&gt;lchild);</span><br><span class="line">PostOrderTraverse(root-&gt;rchild);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;root-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非递归-2"><a href="#非递归-2" class="headerlink" title="非递归"></a>非递归</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorderTraverse</span><span class="params">(TreeNode *root)</span>  </span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;TreeNode *&gt; s;</span><br><span class="line">TreeNode *p=root,*q=<span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">nullptr</span>) &#123;         <span class="comment">//顺着结点一直往左下走</span></span><br><span class="line">            s.push(p);</span><br><span class="line">            p = p-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        q = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">while</span> (!s.empty()) &#123;</span><br><span class="line">            p = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="comment">//判断处于栈顶的p结点右孩子是否为空或者右孩子是否已经被访问过</span></span><br><span class="line">            <span class="keyword">if</span> (p-&gt;right == q) &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;p-&gt;data;</span><br><span class="line">                <span class="comment">//保存访问过的结点，可供父节点判断使用</span></span><br><span class="line">                q = p; </span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;                <span class="comment">//说明右孩子存在且未被访问过</span></span><br><span class="line">                <span class="comment">//栈顶的p结点之前被错误释放，所以需要重新入栈</span></span><br><span class="line">                s.push(p);</span><br><span class="line">                p = p-&gt;right;</span><br><span class="line">                <span class="keyword">break</span>;            <span class="comment">//跳出当前循环，将右孩子压入栈中</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!s.empty());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接下来的几天里，我会更多地关注于&lt;strong&gt;算法&lt;/strong&gt;这一块，每天去&lt;strong&gt;牛客网&lt;/strong&gt;刷题，并将其记录在这里。&lt;br&gt;这两天一直在看与&lt;strong&gt;二叉树&lt;/strong&gt;相关的题，利用这篇博客对于二叉树的遍历做一番总结。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二叉树的遍历&lt;/strong&gt;是指按照某条搜索路线遍访每个结点且不重复，它是树结构插入、删除、修改、查找和排序运算的前提，也是二叉树一切运算的基础和核心。&lt;br&gt;因为树的结构定义本身就是递归，所以递归遍历二叉树会显得更加简洁。但是越简单，有时候理解起来就感觉越为抽象，就像著名的&lt;strong&gt;汉诺塔&lt;/strong&gt;问题一样，我对于递归遍历二叉树的流程没有一个深入的认识了解，而接下来我会去深入了解一下。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
      <category term="递归" scheme="http://yoursite.com/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP框架学习（二）</title>
    <link href="http://yoursite.com/2017/08/10/ThinkPHP%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2017/08/10/ThinkPHP框架学习（二）/</id>
    <published>2017-08-09T23:30:00.000Z</published>
    <updated>2018-05-05T15:13:34.424Z</updated>
    
    <content type="html"><![CDATA[<p>在上一节中，我主要讲到了如何获取<strong>ThinkPHP框架</strong>，以及<strong>虚拟目录</strong>和<strong>虚拟主机</strong>的配置。准备工作完成之后，就可以利用<strong>ThinkPHP</strong>去部署项目了。</p><a id="more"></a><p>先在工作目录（D:/zend/workspace）下新建一个<strong>market</strong>文件夹，用来部署项目，在<strong>market</strong>文件下再新建一个<strong>index.php</strong>，作为项目的<strong>入口文件</strong>。因为我们需要调用<strong>ThinkPHP框架</strong>，打开自己下载好的ThinkPHP框架文件，将其中的<strong>ThinkPHP文件夹</strong>(其他的Application、Public等均不需要)复制一份到<strong>D:/zend/workspace</strong>目录下（与market文件夹同级，因为ThinkPHP框架可以支持多个项目调用，不仅限于这一个项目），利用<strong>zend studio</strong>打开<strong>index.php</strong>，去引入框架的核心程序。</p><p><img src="http://opznmu7n5.bkt.clouddn.com/tp_8.png" alt=""></p><blockquote><p>这里用到了<strong>相对路径</strong>知识， <code>../</code>表示上一级目录，后面会介绍到</p></blockquote><p>之后，在浏览器中输入<strong><a href="http://www.myweb.com/market" target="_blank" rel="noopener">www.myweb.com/market</a></strong>，出现如下效果，则说明框架引入成功。</p><p><img src="http://opznmu7n5.bkt.clouddn.com/tp_7.png" alt=""><br>当框架引入成功之后，<strong>market</strong>文件夹会自动生成3个文件夹，如下图：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/tp_10.png" alt=""><br>其中<strong>Home</strong>文件夹下的内容如下：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/TP_12.png" alt=""><br>接下来即利用<strong>Home文件夹</strong>去部署<strong>雍达商城</strong>前端页面。<strong>雍达商城</strong>前端页面主要包括如下几个部分：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/tp_11.png" alt=""><br>选取其中的几个页面为例，根据其功能的不同，在<strong>Home文件夹</strong>中创建<strong>控制器</strong>和对应的<strong>视图</strong>文件，引入相应的文件，最后效果如下图：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/tp_13.png" alt=""><br>具体实现流程不再细致讲解，对于其中的一些注意事项进行分析。</p><h1 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h1><p>引入模板文件后，原先<strong>html文件</strong>和<strong>css文件</strong>之间的相对路径关系会发生改变，需要考虑如何去进行调整，使css样式正确显示（包括图片也是一样的道理），这时就需要考虑<strong>相对路径</strong>和<strong>绝对路径</strong>问题了。</p><blockquote><p><strong>绝对路径</strong>就是文件的真正存在的路径，是指从硬盘的根目录开始，进行一级级目录指向文件。<br><strong>相对路径</strong>就是以当前文件为基准进行一级级目录指向被引用的资源文件。</p></blockquote><ul><li><code>../</code>表示当前文件所在的目录的上一级目录</li><li><code>./</code>表示当前文件所在的目录（所以可以省略不写）</li><li><code>/</code>表示当前<strong>站点</strong>的根目录（域名映射的硬盘目录）（我们一会儿会用到）</li></ul><p>就拿这个项目为例，当我把前台模板文件都移植到<strong>market</strong>文件后，需要对html、css、img之间的相对路径关系进行调整，以其中的<strong>inex.html</strong>为例，原始样式如下：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/tp_14.png" alt=""><br>而移植到<strong>market</strong>文件后，变成了如下效果：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/tp_15.png" alt=""><br>可以看出，html文件正常显示，但是css样式和图片没有正常显示，其中的相对路径关系从目录结构中可以看出</p><p><img src="http://opznmu7n5.bkt.clouddn.com/tp_16.png" alt=""></p><p><strong>index.html</strong>文件所在的<strong>绝对路径</strong>为：D:/zend/workspace/market/Home/View/Index/index.html<br><strong>style.css</strong>文件所在的<strong>绝对路径</strong>为：D:/zend/workspace/market/Public/Home/css/style.css<br>如何才能在<strong>index.html</strong>文件中正确引用<strong>style.css</strong>文件？</p><ul><li>若利用<strong>相对路径</strong>，以<strong>index.html</strong>为基准，正确的引用方式为：<strong>../../../Public/Home/css/style.css</strong></li></ul><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">含义</th><th style="text-align:center">当前路径地址</th></tr></thead><tbody><tr><td style="text-align:center">../</td><td style="text-align:left">上一级目录</td><td style="text-align:center">D:/zend/workspace/market/Home/View/…</td></tr><tr><td style="text-align:center">../../</td><td style="text-align:left">上上级目录</td><td style="text-align:center">D:/zend/workspace/market/Home/…</td></tr><tr><td style="text-align:center">../../../</td><td style="text-align:left">上上上级目录</td><td style="text-align:center">D:/zend/workspace/market/…</td></tr></tbody></table><p>根据<strong>index.html</strong>和<strong>style.css</strong>的绝对路径地址以及表格分析，我们可以看出当跳了三级目录（../../../）时，可以正确地去引用<strong>style.css</strong></p><p><strong>../../../Public/Home/css/style.css   &lt;=&gt;   D:/zend/workspace/market/Public/Home/css/style.css</strong></p><ul><li>若利用<strong>绝对路径</strong>，正确的引用方式为<strong>D:/zend/workspace/market/Public/Home/css/style.css</strong></li></ul><p>同样地，css样式调整好之后，还需要调整<strong>html文件</strong>与<strong>img</strong>之间的引用关系。<br><strong>index.html</strong>文件所在的<strong>绝对路径</strong>为：D:/zend/workspace/market/Home/View/Index/index.html<br>很多图片都存储在<strong>images</strong>文件夹下，而<strong>images</strong>文件所在的<strong>绝对路径</strong>为：D:/zend/workspace/market/Public/Home/images</p><ul><li>若利用<strong>相对路径</strong>，以<strong>index.html</strong>为基准，正确的引用方式为：<strong>../../../Public/Home/images/XXX.jpg</strong></li><li>若利用<strong>绝对路径</strong>，正确的引用方式为<strong>D:/zend/workspace/market/Public/Home/images/XXX.jpg</strong></li></ul><h1 id="路由解析"><a href="#路由解析" class="headerlink" title="路由解析"></a>路由解析</h1><p>ThinkPHP框架的URL地址可以有以下四种形式：</p><ol><li><strong>基本get形式：</strong> http://网站/index.php?m=分组&amp;c=控制器&amp;a=操作方法</li><li><strong>pathinfo路径形式：</strong> http://网址/index.php/分组/控制器/操作方法</li><li><strong>rewrite重写形式（伪静态技术）：</strong> 省略index.php入口文件：http://网站/分组/控制器/操作方法</li><li><strong>兼容形式：</strong> http://网址/index.php?s=/分组/控制器/操作方法</li></ol><p>前面我们讲到了一般情况下是如何进行<strong>绝对路径</strong>和<strong>相对路径</strong>的调整，而结合<strong>TP框架</strong>进行设置时，我们还需要遵循一定的规则，根据路由形式选择的不同，可能会造成一定的影响。</p><ul><li><p>当我们采用<strong>pathinfo路径形式</strong>去访问页面时，如果我们希望利用<strong>相对路径</strong>的形式去引用css或者图片，上面讲到的路径形式是没有问题的，因为这时<strong>它是以index.html为基准去引用style.css</strong></p></li><li><p>当采用<strong>基本get形式</strong>去访问页面时，如果我们希望采用<strong>相对路径</strong>的形式去引用css或者图片，这时<strong>它并不是以index.html为基准，而是以项目的入口文件index.php为基准</strong>，所以如果还按照上面讲到的路径形式去设置的话，就会出现问题。</p></li></ul><p><strong>index.php</strong>的<strong>绝对路径</strong>为D:/zend/workspace/market/index.php<br>正确的引用路径为：<strong>./Public/Home/css/style.css</strong>(<code>./</code>表示当前目录，可以省去)，而不是上面讲到的<strong>../../../Public/Home/css/style.css</strong>。</p><p><img src="http://opznmu7n5.bkt.clouddn.com/tp_17.png" alt=""><br><img src="http://opznmu7n5.bkt.clouddn.com/tp_18.png" alt=""></p><p>为了避免这类问题的出现，我们可以采用<strong>绝对路径</strong>，但不采用上面讲到的方式。<br>我们在前面提及到<strong><code>/</code> 表示当前站点的根目录（域名映射的硬盘目录）</strong>，即我们之前设置的虚拟目录位置<strong>D:/zend/workspace</strong>，<code>/</code>就等价于该地址，所以利用这种方式，正确的引用路径为：<strong>/market/Public/Home/css/style.css</strong>.<br>对于图片的引用也是一样的道理，这里不再赘述。这样一来，<strong>index.html</strong>对于<strong>css样式</strong>和<strong>img</strong>的引用就完成了，其他页面的引用均类似，进行一番调整便可以正确引入css和图片。</p><p>某些css样式里也有图片，在引入图片时，可以使用相对路径，它是以css文件自身为基准，与其他文件没有关系。</p><blockquote><p><strong>注：</strong>以上内容仅是我看过视频教程后个人的一些理解，可能会有不当之处，望理解:)…</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一节中，我主要讲到了如何获取&lt;strong&gt;ThinkPHP框架&lt;/strong&gt;，以及&lt;strong&gt;虚拟目录&lt;/strong&gt;和&lt;strong&gt;虚拟主机&lt;/strong&gt;的配置。准备工作完成之后，就可以利用&lt;strong&gt;ThinkPHP&lt;/strong&gt;去部署项目了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP框架学习（一）</title>
    <link href="http://yoursite.com/2017/08/09/ThinkPHP%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/08/09/ThinkPHP框架学习（一）/</id>
    <published>2017-08-09T06:00:00.000Z</published>
    <updated>2018-05-05T15:13:08.815Z</updated>
    
    <content type="html"><![CDATA[<p>这几天呢，断断续续地在看孙叔华老师的<strong>ThinkPHP教程</strong>，期间还做了一些其他事情，出去办了点事，总结总结下一学期规划等等，不知不觉间又过去了大半个星期。现在呢，看完了一天的教程，在这里，还是希望稍微总结一番，加强自己的印象。</p><a id="more"></a><p>既然是学习<strong>ThinkPHP</strong>，那第一步肯定是要先获取该框架，可以从<a href="https://github.com/top-think/thinkphp" target="_blank" rel="noopener">GitHub主页</a>将其下载到本地。下载完成后，可以看到其初始目录如下：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/tp_2.png" alt=""></p><p>其中的<strong>ThinkPHP</strong>目录结构如下：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/tp_3.png" alt=""></p><p>有关这些文件夹的具体作用，可以参照下图（参考<a href="https://www.kancloud.cn/manual/thinkphp/1682" target="_blank" rel="noopener">ThinkPHP3.2.3开发手册</a>）</p><p><img src="http://opznmu7n5.bkt.clouddn.com/tp_1.png" alt=""></p><p>该视频教程是以<strong>雍达商城</strong>为实例，进行一步步改进，商城模板的下载链接为<a href="http://pan.baidu.com/s/1migdl2o" target="_blank" rel="noopener">百度网盘链接</a>，提取密码为<strong>4fjw</strong>。<br>商城模板里有写好的前端和后台代码，而我们接下来需要去做的就是利用<strong>ThinkPHP框架</strong>将商城模板结合起来。<br>我们在安装<strong>Apache</strong>的时候，知道PHP的默认工作空间是在<strong>Apache</strong>目录下的<strong>htdocs</strong>文件夹中，<br>而为了方便起见，我们通常都会去设置一个<strong>虚拟目录</strong>，将工作空间转移到其他任何位置，便于自己的查找和操作等。另外，接下来的过程中我会使用<strong>zend studio</strong>来编写文件，它同样也有一个<strong>workspace</strong>，所以在这里，将二者结合起来，我在D盘新建了一个<strong>zend</strong>文件夹，再在<strong>zend</strong>文件夹中新建一个<strong>workspace</strong>，我会将<strong>Apache</strong>的工作目录和<strong>zend studio</strong>的工作空间均置于此处，这样方便自己的操作。</p><h1 id="虚拟目录设置"><a href="#虚拟目录设置" class="headerlink" title="虚拟目录设置"></a>虚拟目录设置</h1><p>经过前面的分析，我们了解到，<strong>Apache</strong>的默认目录位于<strong>D:/phpenvir/Apache2.4.25/htdocs</strong>，而我接下来要将其修改为<strong>D:/zend/workspace</strong>。</p><p>打开<strong>Apache</strong>的安装目录，在<code>conf</code>文件夹下打开<code>httpd.conf</code>文件，<code>Ctrl+F</code>找到下面的代码：</p><pre><code>#默认工作空间目录，将其关闭（在前面加#号即可）DocumentRoot &quot;D:/phpenvir/Apache2.4.25/htdocs&quot;</code></pre><p>接着<code>Crtl+F</code>,找到<code>&lt;IfModule dir_module&gt;</code>这一块，在其中加入如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule dir_module&gt;</span><br><span class="line">    #设置缺省载入界面 </span><br><span class="line">DirectoryIndex index.html index.htm index.php</span><br><span class="line">#设置站点别名，和网页访问路径有关</span><br><span class="line">Alias /myweb &quot;D:/zend/workspace&quot;</span><br><span class="line">    #定义目录权限设置</span><br><span class="line">        &lt;Directory &quot;D:/zend/workspace&quot;&gt;</span><br><span class="line">        #Indexes用于显示目录结构，MultiViews是搜索功能，用于进行文件名模式匹配</span><br><span class="line">Options Indexes MultiViews FollowSymLinks</span><br><span class="line">#不允许覆盖</span><br><span class="line">AllowOverride None</span><br><span class="line">#设置访问权限</span><br><span class="line">#先允许，后拒绝</span><br><span class="line">Order allow,deny</span><br><span class="line">#允许所有人访问</span><br><span class="line">Allow from all</span><br><span class="line">#对这个目录给予授权</span><br><span class="line">Require all granted</span><br><span class="line">        &lt;/Directory&gt;</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>保存文件，重启<strong>Apache</strong>，在浏览器中输入<strong><a href="http://localhost/myweb" target="_blank" rel="noopener">http://localhost/myweb</a></strong>即可以正常访问，如下图：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/tp_4.png" alt=""></p><h1 id="zend-Studio工作空间设置"><a href="#zend-Studio工作空间设置" class="headerlink" title="zend Studio工作空间设置"></a>zend Studio工作空间设置</h1><p><strong>具体流程：</strong> Windows-&gt;Preferences-&gt;General-&gt;Starup and Shutdown-&gt;Workspaces-&gt;选中Prompt for workspace on statup这一项，关闭zend studio重新打开即可调整workspace路径地址，如下图：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/tp_5.png" alt=""></p><p>虚拟目录和zend studio工作空间设置好之后，我们就可以在<strong>D:/zend/workspace</strong>文件夹中新建项目了。此时我们打开工作目录的路径地址为<strong><a href="http://localhost/myweb" target="_blank" rel="noopener">http://localhost/myweb</a></strong>。</p><h1 id="虚拟主机配置"><a href="#虚拟主机配置" class="headerlink" title="虚拟主机配置"></a>虚拟主机配置</h1><p>这里可以再做一件事（也可以略去），例如我们希望通过<strong><a href="http://www.myweb.com" target="_blank" rel="noopener">http://www.myweb.com</a></strong>这样一种方式来进行访问网页，但是我们并未申请该域名，直接进行访问<strong><a href="http://www.myweb.com" target="_blank" rel="noopener">www.myweb.com</a></strong>是行不通的（不过这个域名好像已经被其他人注册使用了，但终归是不能为己所用），这时我们可以去设置一个<strong>虚拟主机</strong>，通过修改本地<strong>hosts</strong>文件，对该域名进行解析，就可以在自己电脑上使用<strong><a href="http://www.myweb.com" target="_blank" rel="noopener">www.myweb.com</a></strong>来访问网页了（当然仅限于在自己电脑上，其实也没太大用途…而<strong>修改hosts文件翻墙</strong>也大致是利用了这个原理）。具体流程如下：</p><ul><li><p>打开<strong>Apache</strong>的安装目录，在<code>conf</code>文件夹下打开<code>httpd.conf</code>文件，<code>Ctrl+F</code>找到下面的代码：</p><pre><code>#Virtual hosts  去掉下面一行前面的#号，启动虚拟主机配置#Include conf/extra/httpd-vhosts.conf</code></pre></li><li><p>在<strong>conf</strong>目录下的<strong>extra</strong>文件夹下找到<code>httpd-vhosts.conf</code>文件，在文件最后加入下面一段代码：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#指定虚拟主机的IP地址和端口号，默认为127.0.0.1</span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">#主机名称</span><br><span class="line">ServerName www.myweb.com</span><br><span class="line">#网站目录</span><br><span class="line">DocumentRoot &quot;D:/zend/workspace&quot;</span><br><span class="line">DirectoryIndex index.html index.htm index.php</span><br><span class="line">&lt;Directory &quot;D:/zend/workspace&quot;&gt;</span><br><span class="line">Options Indexes MultiViews FollowSymLinks</span><br><span class="line">AllowOverride All</span><br><span class="line">Order deny,allow</span><br><span class="line">Allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><ul><li><p>打开位于<strong>C:/Windows/System32/drivers/etc</strong>目录下的<code>hosts</code>文件，在文件末尾添加一行代码：</p><pre><code>127.0.0.1           www.myweb.com</code></pre></li></ul><p>将该域名与本地主机建立解析关系。如下图所示：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/tp_6.png" alt=""></p><ul><li>以上修改完成之后，<strong>重启</strong> Apache服务器，在地址栏输入<strong><a href="http://www.myweb.com" target="_blank" rel="noopener">http://www.myweb.com</a></strong>即可以打开自己的工作目录。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天呢，断断续续地在看孙叔华老师的&lt;strong&gt;ThinkPHP教程&lt;/strong&gt;，期间还做了一些其他事情，出去办了点事，总结总结下一学期规划等等，不知不觉间又过去了大半个星期。现在呢，看完了一天的教程，在这里，还是希望稍微总结一番，加强自己的印象。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客MathJax公式渲染问题</title>
    <link href="http://yoursite.com/2017/08/03/hexo%E5%8D%9A%E5%AE%A2MathJax%E5%85%AC%E5%BC%8F%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/08/03/hexo博客MathJax公式渲染问题/</id>
    <published>2017-08-03T04:14:00.000Z</published>
    <updated>2018-07-18T09:35:04.613Z</updated>
    
    <content type="html"><![CDATA[<p>这个问题自己很早以前便碰到了，用<strong>MathJax语法</strong>写的一些公式，在本地<strong>Markdown编译器</strong>上渲染是没问题的，可是部署到hexo博客中就出现问题了，之前我是使用图片代替公式应付过去了，今天从网上找了一下资料，发现了其问题所在，同时也解决了这个问题。</p><a id="more"></a><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>hexo默认使用<strong>hexo-renderer-marked</strong>引擎去渲染网页，它会把利用<strong>Markdown语法</strong>写的文本去转换为相应的<strong>html标签</strong>。在利用Markdown写<strong>MathJax公式</strong>的时候，经常会用到下划线<code>_</code>表示<strong>下标</strong>，但是下划线<code>_</code>会被hexo的默认引擎<strong>hexo-renderer-marked</strong>渲染成html中的<code>&lt;em&gt;</code>标签，表示<strong>斜体</strong>，这样一来，我们写的MathJax公式就被错误渲染了，也就没办法正确显示出来。</p><p><strong>例如：</strong></p><p>在我写的<a href="http://www.ai-heng.cn/2017/07/18/KMP%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">KMP算法</a>这篇文章中，没有解决问题之前，出现着各种渲染错误，而当你仔细观察那些错误之处时，会发现你写的<strong>MathJax公式</strong>中的下划线<code>_</code>会莫名其妙地消失。<br>下图是我利用<strong>Markdown编译器</strong>写的文本</p><p><img src="http://opznmu7n5.bkt.clouddn.com/post22_3.png" alt=""><br>是表格的一部分，在<strong>Markdown编译器</strong>预览是正确的，如下图</p><p><img src="http://opznmu7n5.bkt.clouddn.com/post22_8.png" alt=""><br>但是部署到<strong>hexo博客</strong>后，便出现了错误，呈现的效果如下图</p><p><img src="http://opznmu7n5.bkt.clouddn.com/post22_2.png" alt=""><br>我们发现公式没有渲染成功，仔细观察这个式子特征，发现它和我之前写的相比，少了部分<code>_</code>,打开该网页<strong>源代码</strong>，定位到这里，如下图</p><p><img src="http://opznmu7n5.bkt.clouddn.com/post22_1.png" alt=""><br>会发现缺少的<code>_</code>其实是被hexo的渲染引擎渲染成了html中的<code>&lt;em&gt;</code>标签，这样一来，这个公式就不完整了，那么也就不能正确显示了。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>从上面的分析，我们可以知道问题或许出在hexo的<strong>渲染引擎</strong>上，如果渲染引擎不把公式中的一些特殊字符渲染成html标签，也就避免了这个问题。当然已经有人意识到了这个问题，并且对原先的渲染引擎进行了改进，生成了新的<strong>hexo-renderer-kramed</strong>引擎，这里是它的<a href="https://github.com/sun11/hexo-renderer-kramed" target="_blank" rel="noopener">Github页面</a>，所以我们只需要<strong>卸载</strong>默认引擎，并<strong>安装</strong>这个新的渲染引擎即可。</p><pre><code>npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-kramed --save</code></pre><p>我之前写有一篇<a href="http://www.ai-heng.cn/2017/07/18/KMP%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">KMP算法</a>，就是在这里发现的渲染出错问题，当我把渲染引擎更换之后，发现<strong>大部分</strong>公式都正确渲染了，而从网上其他人的叙述中，也同样提到了这个问题，即是<strong>行间公式</strong>都没有问题，但是个别<strong>行内公式</strong>还会出现渲染出错，从网上找到了一个方法，解决了这一问题。<br>定位到你的<strong>博客根目录</strong>，找到<strong>../node_modules/kramed/lib/rules/inline.js</strong>文件，<br><img src="http://opznmu7n5.bkt.clouddn.com/post22_7.png" alt=""><br>进行部分修改：</p><pre><code>//escape: /^\\([\\`*{}\[\]()#$+\-.!_&gt;])/,      第11行，将其修改为escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,//em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,    第20行，将其修改为em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</code></pre><p>它取消了该渲染引擎对<code>\,{,}</code>的转义，然后再<code>hexo clean、hexo g</code>重新部署，即可解决问题。</p><blockquote><p>另外需要注意一点，对于需要用到<strong>MathJax公式</strong>的文章，要在<strong>Front-matter</strong>中打开MathJax开关，例如：</p></blockquote><pre><code>---date: 2017/8/3 18:20:00tags: hexomathjax: truetitle: hexo博客MathJax公式渲染---</code></pre><h1 id="MathJax公式语法"><a href="#MathJax公式语法" class="headerlink" title="MathJax公式语法"></a>MathJax公式语法</h1><p>下面呢，我整理总结了一番比较常用的<strong>MathJax公式语法</strong>，同时也可以用来测试一下渲染效果。</p><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">释义</th><th style="text-align:center">测试用例</th><th style="text-align:center">最终效果</th></tr></thead><tbody><tr><td style="text-align:center">^</td><td style="text-align:center">上标</td><td style="text-align:center">x^{y^z}=(1+e^x)^{-2xy^w}</td><td style="text-align:center">$ x^{y^z}=(1+e^x)^{-2xy^w} $</td></tr><tr><td style="text-align:center">_</td><td style="text-align:center">下标</td><td style="text-align:center">CO_2</td><td style="text-align:center">$ CO_2 $</td></tr><tr><td style="text-align:center">\frac{分子}{分母} or 分子 \over 分母</td><td style="text-align:center">分数</td><td style="text-align:center">f(x,y,z)=3y^2z(3+\frac{7x+5}{1+y^2})</td><td style="text-align:center">$ f(x,y,z)=3y^2z(3+\frac{7x+5}{1+y^2}) $</td></tr><tr><td style="text-align:center">\sqrt[根指数，省略时为2]{被开方数}</td><td style="text-align:center">开方</td><td style="text-align:center">\sqrt{2}、\sqrt[3]{9}</td><td style="text-align:center">$\sqrt{2} 、\sqrt[3]{9}$</td></tr><tr><td style="text-align:center">\ldots</td><td style="text-align:center">与文本底线对齐的省略号</td><td style="text-align:center">x_1x_2{\ldots}x_n</td><td style="text-align:center">$x_1x_2{\ldots}x_n$</td></tr><tr><td style="text-align:center">\cdots</td><td style="text-align:center">与文本中线对齐的省略号</td><td style="text-align:center">x_1x_2{\cdots}x_n</td><td style="text-align:center">$x_1x_2{\cdots}x_n$</td></tr><tr><td style="text-align:center">\int_积分下限^积分上限(被积表达式)</td><td style="text-align:center">积分</td><td style="text-align:center">\int_1^n{x^2}dx</td><td style="text-align:center">$ \int_1^n{x^2}dx $</td></tr><tr><td style="text-align:center">\sum_{下标表达式}^{上标表达式} {累加表达式}</td><td style="text-align:center">累加</td><td style="text-align:center">\sum_{i=1}^n \frac{1}{i^2}</td><td style="text-align:center">$ \sum_{i=1}^n \frac{1}{i^2} $</td></tr><tr><td style="text-align:center">\, or \; or \quad or \qquad</td><td style="text-align:center">不同宽度的空格</td><td style="text-align:center">a \, b \mid a \; b \mid a \quad b \mid a \qquad b</td><td style="text-align:center">$ a \, b \mid a \; b \mid a \quad b \mid a \qquad b $</td></tr><tr><td style="text-align:center">\color{颜色}{文字}</td><td style="text-align:center">更改文字颜色</td><td style="text-align:center">\color{red}{红色}</td><td style="text-align:center">$ \color{red}{红色} $</td></tr></tbody></table><p>上面的一些基本语法使用了<strong>行内公式</strong>， 渲染效果没有问题，下面再利用<strong>行间公式</strong>写一些较为复杂的公式。</p><h2 id="分段函数"><a href="#分段函数" class="headerlink" title="分段函数"></a>分段函数</h2><p>分段函数格式为<code>f(x)=\begin{cases}语句1\\语句2\\...\end{cases}</code><br><code>\text{文字}</code>中仍可以使用<code>$公式$</code>去插入其他公式，所以可以将其结合分段函数一起使用。</p><p><strong>实例：</strong><br><strong>md文本</strong></p><pre><code> $$ f(n)=\begin{cases}n/2, &amp; \text{如果$ x&lt;=2 $}\\3n+1, &amp; \text{如果$ x&gt;2 $}\end{cases}$$</code></pre><p><strong>最终效果</strong></p><p>$$<br>f(n)=\begin{cases}<br>n/2, &amp; \text{如果$ x&lt;=2 $}\\<br>3n+1, &amp; \text{如果$ x&gt;2 $}<br>\end{cases}<br>$$</p><h2 id="大括号和小括号"><a href="#大括号和小括号" class="headerlink" title="大括号和小括号"></a>大括号和小括号</h2><p><code>()、[]、{}</code>表示的即是符号本身，使用<code>\{\}</code>来表示<code>{}</code>。但是如果要显示大号的括号时，需要使用<code>\left</code>和<code>\right</code>命令。</p><p><strong>实例：</strong></p><ul><li><strong>正常括号</strong></li></ul><p><strong>md文本</strong></p><pre><code> $$f([\frac{1+\{x,y\}}{(\frac{x}{y}+\frac{y}{x})(u+1)}+a]^{3\2})$$</code></pre><p><strong>最终效果</strong></p><p>$$<br>f([\frac{1+{x,y}}{(\frac{x}{y}+\frac{y}{x})(u+1)}+a]^{3\2})<br>$$</p><ul><li><strong>大括号</strong></li></ul><p><strong>md文本</strong></p><pre><code>    $$f\left(    \left[        \frac{            1+\left\{x,y\right\}        }{        \left(            \frac{x}{y}+\frac{y}{x}        \right)        \left(u+1\right)        }+a    \right]^{3\2}\right)$$</code></pre><p><strong>最终效果</strong></p><p>$$<br>f\left(<br>    \left[<br>        \frac{<br>            1+\left\{x,y\right\}<br>        }{<br>        \left(<br>            \frac{x}{y}+\frac{y}{x}<br>        \right)<br>        \left(u+1\right)<br>        }+a<br>    \right]^{3\2}<br>\right)<br>$$</p><h2 id="添加删除线"><a href="#添加删除线" class="headerlink" title="添加删除线"></a>添加删除线</h2><p>使用删除线功能必须使用<strong>行间公式</strong>，删除线分为<strong>片段删除线</strong>和<strong>整段删除线</strong>，样式比较多，在这里我只列举一种比较常用的<strong>水平删除线</strong>，它属于整段删除线的一种。</p><p><strong>整段删除线</strong>使用<code>\require{enclose}</code>来显示，声明整段删除线后，使用<code>\enclose{删除线效果}{字符}</code>来实现删除线效果，而<strong>水平删除线</strong>效果用关键字<code>horizontalstrike</code>。</p><p><strong>实例：</strong></p><p><strong>md文本</strong></p><pre><code>$$\require{enclose}\begin{array}{}\enclose{horizontalstrike}{x+y}\\\enclose{horizontalstrike}{x*y}\\\end{array}$$</code></pre><p><strong>最终效果</strong></p><p>$$<br>\require{enclose}\begin{array}{}<br>\enclose{horizontalstrike}{x+y}\\<br>\enclose{horizontalstrike}{x*y}\\<br>\end{array}<br>$$</p><p><strong>注意事项</strong></p><p>我在更换hexo的渲染引擎的时候，还出了一点问题，当我卸载了原先的渲染引擎，安装新的时，出了错误，如下图：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/post22_9.png" alt=""><br>它显示我的<code>npm</code>版本为<code>v4.2.0</code>，我将<code>npm</code>更新到了最新版本，再次安装，便没有问题了。</p><p>通过这篇文章和<a href="http://www.ai-heng.cn/2017/07/18/KMP%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">KMP算法</a>，里面也涉及了较多的MathJax公式，从效果上来看，都没有出现什么问题，这也说明了该方法还是有一定的效果的。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.zybuluo.com/codeep/note/163962#6如何输入省略号" target="_blank" rel="noopener">CMD公式指导手册</a></li><li><a href="http://2wildkids.com/2016/10/06/%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86Hexo%E5%92%8CMathJax%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/#小结" target="_blank" rel="noopener">如何处理Hexo和MathJax的兼容问题</a></li><li><a href="http://www.jianshu.com/p/7ab21c7f0674" target="_blank" rel="noopener">在Hexo中渲染MathJax数学公式</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个问题自己很早以前便碰到了，用&lt;strong&gt;MathJax语法&lt;/strong&gt;写的一些公式，在本地&lt;strong&gt;Markdown编译器&lt;/strong&gt;上渲染是没问题的，可是部署到hexo博客中就出现问题了，之前我是使用图片代替公式应付过去了，今天从网上找了一下资料，发现了其问题所在，同时也解决了这个问题。&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="MathJax" scheme="http://yoursite.com/tags/MathJax/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>修饰hexo博客</title>
    <link href="http://yoursite.com/2017/08/02/%E4%BF%AE%E9%A5%B0hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/08/02/修饰hexo博客/</id>
    <published>2017-08-02T11:21:00.000Z</published>
    <updated>2018-05-05T15:12:05.475Z</updated>
    
    <content type="html"><![CDATA[<p>转眼间，又过了半个月，刚放假还在学校的时候，就没能好好学习，回到家还想着来一次<strong>思想上的救赎</strong>，认真学习，弥补弥补内心的愧疚感，但是坚持了一个星期，又中断了，期间无所事事，荒废了很多天，直到昨天下午，我才又想到学习…啥也不说了，<strong>对不起，让你久等了</strong>，为了克服懒癌，我真的是耗费了太长时间…</p><a id="more"></a><p>今天，主要做了一件事，那就是去完善<strong>hexo博客</strong>界面，这件事被我一拖再拖直至今天。我将GitHubPages和我买的自定义域名ai-heng.cn绑定到了一起，插入了<strong>Google数据分析</strong>，设置<strong>了阅读次数及用户浏览量</strong>、添加了<strong>畅言评论</strong>系统，还将<strong>about</strong>页面补充了一下。这样一来，我的博客界面便显得更加更加完善。</p><p>整个流程其实还算比较简单，只是我一直没能抽出时间去整理，才一直拖到了现在。在此稍微总结一下吧。</p><h2 id="畅言评论"><a href="#畅言评论" class="headerlink" title="畅言评论"></a>畅言评论</h2><p>之前，<strong>多说</strong>一直是博客中用到最多的评论系统，但是今年3月份停止服务了，<strong>网易云跟帖</strong>在8.1号（也就是昨天）也停止服务了，没得选择了，而听说<strong>畅言</strong>评论系统还需要备案之后才能够使用，但是我发现一篇博客里面讲到其实并不需要备案，而我按照他的流程走了一遍，没想到真的顺利搞定了，也可以说是一个surprise吧。<br>我现在使用的hexo主题<strong>Next</strong>已经支持畅言评论系统，所以我主要去做的事情就是从<a href="http://changyan.kuaizhan.com/" target="_blank" rel="noopener">畅言评论官网</a>注册了一个账号，然后获取到了配置畅言系统所需要的<strong>APP ID和APP KEY</strong>，将其添加到配置文件中，重新部署了一下就ok了。具体流程可以参照<a href="http://www.jianshu.com/p/5888bd91d070" target="_blank" rel="noopener">hexo博客之next主题添加畅言评论</a></p><h2 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h2><p>我的域名已经注册有一段时间了，只是我一直懒得将其和自己的博客绑定到一起，今天也搞定了这个问题，大致流程也稍微叙述一番。</p><p>首要去做的事是<strong>解析</strong>域名，记录类型为<strong>CNAME</strong>，主机记录为<strong>www</strong>(这个可以根据自己的需要去设置)，解析线路为<strong>默认</strong>，记录名为<strong>xx.github.io</strong>(即是你的GitHubPages页面地址)；然后在GitHub的xx.github.io这个仓库里添加一个名为<strong>CNAME</strong>的文件，文件内容为自定义域名，我这里即是<a href="http://www.ai-heng.cn;接下来，把相同的文件放到本地hexo文件夹下source目录下，`Hexo" target="_blank" rel="noopener">www.ai-heng.cn;接下来，把相同的文件放到本地hexo文件夹下source目录下，`Hexo</a> d -g`重新部署到GitHub，就可以了。</p><h2 id="阅读次数"><a href="#阅读次数" class="headerlink" title="阅读次数"></a>阅读次数</h2><p>这个功能也是我很早以前便想去添加的，今天也弄了一下。主要步骤如下：<br>先注册一个<strong>LeanCloud</strong>账号，进入<strong>控制台</strong>页面，创建一个名为<strong>Counter</strong>的class，在设置中的<strong>应用Key</strong>中找到<strong>app_id和app_key</strong>，将其添加到配置文件config.yml中，重新部署hexo就ok了。</p><p><strong>参考资料</strong></p><ul><li><a href="http://www.jianshu.com/p/5888bd91d070" target="_blank" rel="noopener">畅言评论系统</a></li><li><a href="http://www.jianshu.com/p/cea41e5c9b2a" target="_blank" rel="noopener">绑定自定义域名</a></li><li><a href="http://www.jeyzhang.com/hexo-next-add-post-views.html" target="_blank" rel="noopener">阅读次数及访客数</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转眼间，又过了半个月，刚放假还在学校的时候，就没能好好学习，回到家还想着来一次&lt;strong&gt;思想上的救赎&lt;/strong&gt;，认真学习，弥补弥补内心的愧疚感，但是坚持了一个星期，又中断了，期间无所事事，荒废了很多天，直到昨天下午，我才又想到学习…啥也不说了，&lt;strong&gt;对不起，让你久等了&lt;/strong&gt;，为了克服懒癌，我真的是耗费了太长时间…&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>常用软件快捷键</title>
    <link href="http://yoursite.com/2017/07/22/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2017/07/22/常用软件快捷键/</id>
    <published>2017-07-22T14:00:00.000Z</published>
    <updated>2018-05-05T15:11:36.728Z</updated>
    
    <content type="html"><![CDATA[<p>前两天呢，自己用<strong>Visio</strong>作图工具画了一些流程图，之前自己也用它做过流程图，不过觉得操作上有些麻烦，所以不太喜欢，而这次从网上找了一些常用快捷键，发现效率真的高了很多，就喜欢上了这款软件。由此，我也感觉到去记一些<strong>常用快捷键</strong>还是挺有必要的，能够提升自己的用户体验，所以对于我经常使用的软件，我就大致整理一下平时最常用到的操作快捷键。我觉得这也就好比<strong>Markdown</strong>编译器，之前不熟悉它的时候，感觉着好像挺麻烦的，但是熟悉之后，发现格式完全可以在自己书写的过程中整理归纳好，自己可以全身心投入到写作当中，这种方式真的很棒，也就越来越喜欢使用它，对于快捷键也是如此，你不必再因为某个需求而在脱离键盘，还要用鼠标去操作，我觉得这样有助于自己提升精力。</p><a id="more"></a><h1 id="ZendStudio常用快捷键"><a href="#ZendStudio常用快捷键" class="headerlink" title="ZendStudio常用快捷键"></a>ZendStudio常用快捷键</h1><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">快捷键</th></tr></thead><tbody><tr><td style="text-align:center">行注释</td><td style="text-align:center">Crtl+/</td></tr><tr><td style="text-align:center">块注释</td><td style="text-align:center">Crtl+Shift+/</td></tr><tr><td style="text-align:center">增加代码缩进</td><td style="text-align:center">Tab</td></tr><tr><td style="text-align:center">减少代码缩进</td><td style="text-align:center">Shift+Tab</td></tr><tr><td style="text-align:center">页面切换</td><td style="text-align:center">Crtl+Tab</td></tr><tr><td style="text-align:center">切换到前一个编辑的页面</td><td style="text-align:center">Alt+←</td></tr><tr><td style="text-align:center">切换到下一个编辑的页面</td><td style="text-align:center">Alt+→</td></tr><tr><td style="text-align:center">复制当前行到下一行</td><td style="text-align:center">Crtl+Alt+↓</td></tr><tr><td style="text-align:center">删除当前行</td><td style="text-align:center">Crtl+D</td></tr><tr><td style="text-align:center">编辑窗口最大化</td><td style="text-align:center">Crtl+M</td></tr><tr><td style="text-align:center">当前行所在位置到行尾</td><td style="text-align:center">Shift+End</td></tr><tr><td style="text-align:center">当前行所在位置到行首</td><td style="text-align:center">Shift+Home</td></tr><tr><td style="text-align:center">光标移动到行首</td><td style="text-align:center">Home</td></tr><tr><td style="text-align:center">光标移动到行尾</td><td style="text-align:center">End</td></tr><tr><td style="text-align:center">当前行与下一行互换位置</td><td style="text-align:center">Alt+↓</td></tr><tr><td style="text-align:center">当前行与上一行互换位置</td><td style="text-align:center">Alt+↑</td></tr><tr><td style="text-align:center">代码助手</td><td style="text-align:center">Alt+/</td></tr><tr><td style="text-align:center">跳转到函数所在位置</td><td style="text-align:center">F3或（Crtl+函数）</td></tr><tr><td style="text-align:center">在当前行的下一行插入空行</td><td style="text-align:center">Shift+Enter</td></tr><tr><td style="text-align:center">在当前行的上一行插入空行</td><td style="text-align:center">Crtl+Shift+Enter</td></tr></tbody></table><h1 id="Visio常用快捷键"><a href="#Visio常用快捷键" class="headerlink" title="Visio常用快捷键"></a>Visio常用快捷键</h1><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">快捷键</th></tr></thead><tbody><tr><td style="text-align:center">删除选中形状（剪切）</td><td style="text-align:center">Delete(Crtl+x)</td></tr><tr><td style="text-align:center">格式刷</td><td style="text-align:center">Crtl+Shift+p</td></tr><tr><td style="text-align:center">指针工具</td><td style="text-align:center">Crtl+1</td></tr><tr><td style="text-align:center">文本工具</td><td style="text-align:center">Crtl+2</td></tr><tr><td style="text-align:center">连接线</td><td style="text-align:center">Crtl+3</td></tr><tr><td style="text-align:center">选择连接点</td><td style="text-align:center">Crtl+Shift+1</td></tr><tr><td style="text-align:center">选择线条工具</td><td style="text-align:center">Crtl+6</td></tr><tr><td style="text-align:center">选择矩形工具</td><td style="text-align:center">Crtl+8</td></tr></tbody></table><p><strong>8/4：</strong> updated…</p><h1 id="Chrome浏览器常用快捷键"><a href="#Chrome浏览器常用快捷键" class="headerlink" title="Chrome浏览器常用快捷键"></a>Chrome浏览器常用快捷键</h1><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">快捷键</th></tr></thead><tbody><tr><td style="text-align:center">关闭当前标签页</td><td style="text-align:center">Crtl+w</td></tr><tr><td style="text-align:center">关闭所有打开的标签页和浏览器</td><td style="text-align:center">Crtl+Shift+w</td></tr><tr><td style="text-align:center">刷新网页</td><td style="text-align:center">Crtl+r</td></tr><tr><td style="text-align:center">放大网页内容</td><td style="text-align:center">Crtl和+</td></tr><tr><td style="text-align:center">缩小网页内容</td><td style="text-align:center">Crtl和-</td></tr><tr><td style="text-align:center">打开新窗口</td><td style="text-align:center">Crtl+n</td></tr><tr><td style="text-align:center">打开新标签页，并跳转到该页面</td><td style="text-align:center">Crtl+t</td></tr><tr><td style="text-align:center">跳转到下一个打开的标签页</td><td style="text-align:center">Crtl+Tab或Crtl+PgDn</td></tr><tr><td style="text-align:center">跳转到上一个打开的标签页</td><td style="text-align:center">Crtl+Shift+Tab或Crtl+PgUp</td></tr><tr><td style="text-align:center">跳转到特定标签页</td><td style="text-align:center">Crtl+1到Crtl+8</td></tr><tr><td style="text-align:center">在新标签页中打开<strong>下载内容</strong>页</td><td style="text-align:center">Crtl+j</td></tr><tr><td style="text-align:center">将当前网页保存为<strong>书签</strong></td><td style="text-align:center">Crtl+d</td></tr></tbody></table><h1 id="CMD编译器常用快捷键"><a href="#CMD编译器常用快捷键" class="headerlink" title="CMD编译器常用快捷键"></a>CMD编译器常用快捷键</h1><p>我之前已经觉得用<strong>Markdown编译器</strong>写起来已经很方便了，而昨天又注意到<strong>CMD编译器</strong>中还可以对Markdown语法进一步简化，因为它提供了常见语法的快捷键。</p><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">快捷键</th><th style="text-align:center">对于md语法</th></tr></thead><tbody><tr><td style="text-align:center">加粗</td><td style="text-align:center">Crtl+B</td><td style="text-align:center">**粗体文本**</td></tr><tr><td style="text-align:center">斜体</td><td style="text-align:center">Crtl+I</td><td style="text-align:center">*斜体文本*</td></tr><tr><td style="text-align:center">超链接</td><td style="text-align:center">Crtl+L</td><td style="text-align:center">[]()</td></tr><tr><td style="text-align:center">段落引用</td><td style="text-align:center">Crtl+Q</td><td style="text-align:center">&gt;</td></tr><tr><td style="text-align:center">行内代码</td><td style="text-align:center">Crtl+K</td><td style="text-align:center">`此处输入代码`</td></tr><tr><td style="text-align:center">插入图片</td><td style="text-align:center">Crtl+G</td><td style="text-align:center">![]()</td></tr><tr><td style="text-align:center">有序列表</td><td style="text-align:center">Crtl+O</td><td style="text-align:center">1.,2.,3.,…</td></tr><tr><td style="text-align:center">无序列表</td><td style="text-align:center">Crtl+U</td><td style="text-align:center">-,*,+…</td></tr></tbody></table><p><strong>8/5：</strong>updated…</p><h1 id="Editplus常用快捷键"><a href="#Editplus常用快捷键" class="headerlink" title="Editplus常用快捷键"></a>Editplus常用快捷键</h1><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">快捷键</th></tr></thead><tbody><tr><td style="text-align:center">切换到下一个文档窗口</td><td style="text-align:center">Crtl+Tab</td></tr><tr><td style="text-align:center">切换到上一个文档窗口</td><td style="text-align:center">Crtl+Shift+Tab</td></tr><tr><td style="text-align:center">切换到上次访问的文档窗口</td><td style="text-align:center">F12</td></tr><tr><td style="text-align:center">载入当前文档到浏览器</td><td style="text-align:center">Crtl+B</td></tr><tr><td style="text-align:center">选择当前行</td><td style="text-align:center">Crtl+R</td></tr><tr><td style="text-align:center">复制当前行到下一行</td><td style="text-align:center">Crtl+J</td></tr><tr><td style="text-align:center">删除当前行</td><td style="text-align:center">Alt+Shift+Delete</td></tr><tr><td style="text-align:center">新建普通文本文档</td><td style="text-align:center">Crtl+N</td></tr><tr><td style="text-align:center">打开一个现有的文档</td><td style="text-align:center">Crtl+O</td></tr><tr><td style="text-align:center">新建浏览器窗口</td><td style="text-align:center">Crtl+Shift+B</td></tr><tr><td style="text-align:center">是否显示所有文档窗口列表</td><td style="text-align:center">F11</td></tr></tbody></table><p>我平时也会经常使用<strong>OneNote</strong>，因为前几天总结了<strong>CMD编译器</strong>中的部分快捷键，今天在<strong>oneNote</strong>里去试了一下，发现有一些是通用的，然后我从网上找了找<strong>OneNote</strong>相关的快捷键，发现好多字体样式都可以用快捷键来实现，而且在<strong>Word</strong>中也是通用的，自己感觉就像发现了个宝似得，这样一来对于文字类的修饰会显得更加方便，我就想知道以前的自己都在想些什么，都不去开发快捷键，哈哈O(∩_∩)O…</p><h1 id="OneNote快捷键"><a href="#OneNote快捷键" class="headerlink" title="OneNote快捷键"></a>OneNote快捷键</h1><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">快捷键</th></tr></thead><tbody><tr><td style="text-align:center">加粗</td><td style="text-align:center">Crtl+B</td></tr><tr><td style="text-align:center">斜体</td><td style="text-align:center">Crtl+I</td></tr><tr><td style="text-align:center">下划线</td><td style="text-align:center">Crtl+U</td></tr><tr><td style="text-align:center">删除线</td><td style="text-align:center">Crtl+ -</td></tr><tr><td style="text-align:center">上标</td><td style="text-align:center">Crtl+Shift+ =</td></tr><tr><td style="text-align:center">下标</td><td style="text-align:center">Crtl+ =</td></tr><tr><td style="text-align:center">标题1</td><td style="text-align:center">Crtl+Alt+1</td></tr><tr><td style="text-align:center">放大文字</td><td style="text-align:center">Crtl+Shift+ &gt;</td></tr><tr><td style="text-align:center">缩小文字</td><td style="text-align:center">Crtl+Shift+ &lt;</td></tr><tr><td style="text-align:center">清除文字所有样式</td><td style="text-align:center">Crtl+Shift+N</td></tr><tr><td style="text-align:center">突出显示</td><td style="text-align:center">Crtl+Shift+H</td></tr><tr><td style="text-align:center">创建便笺</td><td style="text-align:center">Crtl+Shift+M</td></tr><tr><td style="text-align:center">放大窗口</td><td style="text-align:center">Crtl+Alt+Shift+ +</td></tr><tr><td style="text-align:center">缩小窗口</td><td style="text-align:center">Crtl+Alt+Shift+ -</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天呢，自己用&lt;strong&gt;Visio&lt;/strong&gt;作图工具画了一些流程图，之前自己也用它做过流程图，不过觉得操作上有些麻烦，所以不太喜欢，而这次从网上找了一些常用快捷键，发现效率真的高了很多，就喜欢上了这款软件。由此，我也感觉到去记一些&lt;strong&gt;常用快捷键&lt;/strong&gt;还是挺有必要的，能够提升自己的用户体验，所以对于我经常使用的软件，我就大致整理一下平时最常用到的操作快捷键。我觉得这也就好比&lt;strong&gt;Markdown&lt;/strong&gt;编译器，之前不熟悉它的时候，感觉着好像挺麻烦的，但是熟悉之后，发现格式完全可以在自己书写的过程中整理归纳好，自己可以全身心投入到写作当中，这种方式真的很棒，也就越来越喜欢使用它，对于快捷键也是如此，你不必再因为某个需求而在脱离键盘，还要用鼠标去操作，我觉得这样有助于自己提升精力。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>课后习题-查找</title>
    <link href="http://yoursite.com/2017/07/21/%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98-%E6%9F%A5%E6%89%BE/"/>
    <id>http://yoursite.com/2017/07/21/课后习题-查找/</id>
    <published>2017-07-21T14:50:00.000Z</published>
    <updated>2018-07-18T09:36:14.732Z</updated>
    
    <content type="html"><![CDATA[<p>还不到11点，竟然有些困意了，其实自己还没有完全整理好，不过任务大致完成了，今天就提交一次，充个绿点吧，毕竟昨天停了一天电，不得已还是断节了，如果可以的话，还是希望自己能够将其保持下去，加油。</p><a id="more"></a><p>7.22:完善中…</p><p>先将问题独立出来大致分析一番思路。</p><p><strong>问题1：</strong>如何判定一棵树是不是二叉排序树</p><p><strong>思路：</strong>根据二叉排序树中序遍历结果为增序的特性，可以设置一个flag，在中序遍历过程中将当前遍历结点与其前驱结点进行大小比较，即可得出结果。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Judge</span><span class="params">(BSTree T,<span class="keyword">int</span> &amp;flag)</span>  </span>&#123;</span><br><span class="line">    <span class="comment">//采用引用传递，将flag变化后的值传回到主函数中</span></span><br><span class="line">    <span class="comment">//int flag=1;                           //主函数中定义flag变量并初始化为1</span></span><br><span class="line">    <span class="keyword">static</span> BSTNode *pre=<span class="literal">NULL</span>;   </span><br><span class="line">    <span class="comment">//定义前驱结点指针，初始化为NULL(至于为何用static还不太清楚)</span></span><br><span class="line">    <span class="keyword">if</span> (T&amp;&amp;flag)  &#123;</span><br><span class="line">        Judge(T-&gt;lchild,flag);</span><br><span class="line">        <span class="keyword">if</span> (pre==<span class="literal">NULL</span>)</span><br><span class="line">            pre=T;                          <span class="comment">//pre为空时是遍历的第一个结点，将其指向当前指针</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pre=&gt;data.key&lt;T-&gt;data.key) <span class="comment">//满足二叉排序树特点，前驱结点值小于当前结点值</span></span><br><span class="line">            pre=T;                          <span class="comment">//将前驱指针指向当前结点</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            flag=<span class="number">0</span>;                         <span class="comment">//flag=0时，不是二叉排序树</span></span><br><span class="line">        Judge(T-&gt;rchild,flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>问题2：</strong>从小到大输出一棵二叉排序树中所有数据值&gt;=x的结点的数据</p><p><strong>思路：</strong>二叉排序树中序遍历即是增序，所以我们可以简单修改一下输出条件，当满足结点数据值&gt;=x时输出，遍历结束后输出的值即是从小到大排列。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InorderTraverse</span><span class="params">(BSTree &amp;T,<span class="keyword">char</span> x)</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T)  &#123;</span><br><span class="line">        InorderTraverse(T-&gt;lchild,x);</span><br><span class="line">        <span class="keyword">if</span> (T-&gt;data.key&gt;=x)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;T-&gt;data.key;</span><br><span class="line">        InorderTraverse(T-&gt;rchild,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和自己希望得类似，将其代入到实例中具体编译运行了一番，具体代码如下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ElemType</span>  &#123;</span></span><br><span class="line"><span class="keyword">char</span> key;</span><br><span class="line">&#125;ElemType; <span class="comment">//数据域类型 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BSTNode</span>  &#123;</span></span><br><span class="line">ElemType data;<span class="comment">//数据域 </span></span><br><span class="line">BSTNode *lchild,*rchild;<span class="comment">//指针域 </span></span><br><span class="line">&#125;BSTNode,*BSTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先序遍历方式创建二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBSTree</span><span class="params">(BSTree &amp;T)</span>  </span>&#123;</span><br><span class="line">ElemType e;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;e.key;</span><br><span class="line"><span class="keyword">if</span> (e.key==<span class="string">'#'</span>)     T=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span>  &#123;</span><br><span class="line">T=<span class="keyword">new</span> BSTNode;</span><br><span class="line">T-&gt;data.key=e.key;</span><br><span class="line">CreateBSTree(T-&gt;lchild);</span><br><span class="line">CreateBSTree(T-&gt;rchild); </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BSTree &amp;T)</span>  </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T)  &#123;</span><br><span class="line">InOrderTraverse(T-&gt;lchild);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;T-&gt;data.key;</span><br><span class="line">InOrderTraverse(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为二叉排序树 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Judge</span><span class="params">(BSTree T,<span class="keyword">int</span> &amp;flag)</span>  </span>&#123;</span><br><span class="line"><span class="keyword">static</span> BSTNode *pre=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (T&amp;&amp;flag)  &#123;</span><br><span class="line">Judge(T-&gt;lchild,flag);</span><br><span class="line"><span class="keyword">if</span> (pre==<span class="literal">NULL</span>)  pre=T;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (pre-&gt;data.key&lt;T-&gt;data.key)<span class="comment">//满足前驱结点值小于当前结点值 </span></span><br><span class="line">pre=T;<span class="comment">//将前驱指针指向当前结点 </span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line">Judge(T-&gt;rchild,flag);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//生成二叉排序树 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBST</span><span class="params">(BSTree &amp;T)</span>  </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertBST</span><span class="params">(BSTree &amp;T,ElemType e)</span></span>;<span class="comment">//不知为何还要声明 </span></span><br><span class="line">T=<span class="literal">NULL</span>;</span><br><span class="line">ElemType e;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;e.key;</span><br><span class="line"><span class="keyword">while</span> (e.key!=<span class="string">'#'</span>)  &#123;</span><br><span class="line">InsertBST(T,e);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;e.key;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉排序树插入 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertBST</span><span class="params">(BSTree &amp;T,ElemType e)</span>   </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!T)  &#123;<span class="comment">//找到插入位置 </span></span><br><span class="line">BSTree S=<span class="keyword">new</span> BSTNode;</span><br><span class="line">S-&gt;data=e;</span><br><span class="line">S-&gt;lchild=S-&gt;rchild=<span class="literal">NULL</span>;</span><br><span class="line">T=S;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e.key&lt;T-&gt;data.key)</span><br><span class="line">InsertBST(T-&gt;lchild,e);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e.key&gt;T-&gt;data.key)</span><br><span class="line">InsertBST(T-&gt;rchild,e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出所有数据值&gt;=x的数据 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InorderTraverse</span><span class="params">(BSTree &amp;T,<span class="keyword">char</span> x)</span>  </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T)  &#123;</span><br><span class="line">InorderTraverse(T-&gt;lchild,x);</span><br><span class="line"><span class="keyword">if</span> (T-&gt;data.key&gt;=x)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;T-&gt;data.key;</span><br><span class="line">InorderTraverse(T-&gt;rchild,x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">BSTree T;</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//先序遍历方式创建二叉树</span></span><br><span class="line">CreateBSTree(T); </span><br><span class="line"><span class="comment">//判断二叉树是否为二叉排序树</span></span><br><span class="line">Judge(T,flag);</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"是二叉排序树"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"不是二叉排序树"</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"> </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入若干字符，用回车区分，以#结束输入，来创建二叉排序树"</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">CreateBST(T);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"从小到大输出二叉排序树中所有数据值&gt;=x的结点数据"</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">char</span> x;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">InorderTraverse(T,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还不到11点，竟然有些困意了，其实自己还没有完全整理好，不过任务大致完成了，今天就提交一次，充个绿点吧，毕竟昨天停了一天电，不得已还是断节了，如果可以的话，还是希望自己能够将其保持下去，加油。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
      <category term="查找" scheme="http://yoursite.com/tags/%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>雇员管理系统-解析</title>
    <link href="http://yoursite.com/2017/07/19/%E9%9B%87%E5%91%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F-%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2017/07/19/雇员管理系统-解析/</id>
    <published>2017-07-19T10:10:00.000Z</published>
    <updated>2018-05-05T15:09:25.206Z</updated>
    
    <content type="html"><![CDATA[<p>这两天，照着<strong>韩顺平</strong>老师的PHP教程，把<strong>雇员管理系统</strong>代码敲了一遍，在这个过程中，把自己不懂的知识点融入到项目中去学习，我觉得通过这种方式的确有助于帮助自己进步，通过<strong>stackOverflow</strong>也解决了运行调试过程中出现的一些问题，不过有一些还没有找到解决方案。而我今天呢，希望将这个<strong>项目框架</strong>以及其中比较重要的一些<strong>功能</strong>单独拿出来再分析一番，加强自己的印象。</p><a id="more"></a><p>首先，我先放一张该项目的整体框架图：<br><img src="http://opznmu7n5.bkt.clouddn.com/post17_1.png" alt=""></p><p>从图中各个类间的关系也可以大致看出，它采用了<strong>分层模式</strong>，将<strong>页面</strong>和<strong>业务逻辑</strong>分离。</p><p>该项目实现的大致功能包括：</p><ul><li>管理员登录系统</li><li>验证用户是否正确</li><li>后台主界面（包括管理、添加、修改、退出系统）</li><li>管理用户界面（实现数据分页功能）</li></ul><p>其中，比较重要的业务逻辑处理是在<strong>登录验证</strong>功能和<strong>数据分页处理</strong>功能，我结合其具体流程大致分析一番。</p><h2 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h2><p><strong>大致流程如下：</strong><br><img src="http://opznmu7n5.bkt.clouddn.com/post17_2.png" alt=""></p><p><strong>接收用户输入的数据</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$id=$_POST[<span class="string">'id'</span>];</span><br><span class="line">$password=$_POST[<span class="string">'password'</span>];</span><br></pre></td></tr></table></figure><p><strong>从admin表获取对应密码</strong></p><p>这个过程中会涉及到数据库的<strong>连接、查询、释放资源、关闭连接</strong>等等。因为该项目讲解视频是几年前的，他在其中采用的是<strong>mysql库</strong>，不过现在mysql库在<strong>PHP7</strong>中已经被弃用了，所以我将其修改为了<strong>mysqli库</strong>。<br>另外呢，我之前对于php操作mysql库并不是很了解，而通过网上的资料可知，利用mysqli库连接数据库时，有<strong>面向对象</strong>和<strong>面向过程</strong>两种方式，而从我的代码特点来看，应该是<strong>面向过程</strong>连接。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SqlHelper</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  $dbname=<span class="string">"empmanage"</span>;                <span class="comment">//数据库名称</span></span><br><span class="line">    <span class="keyword">public</span>  $username=<span class="string">"root"</span>;                   <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">public</span>  $password=<span class="string">"XXX"</span>                     <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">public</span>  $host=<span class="string">"localhost"</span>                   <span class="comment">//主机</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据库连接</span></span><br><span class="line">$conn=mysqli_connect(host,username,password,dbname);</span><br><span class="line"><span class="keyword">if</span> (!$conn)  &#123;</span><br><span class="line">    <span class="keyword">die</span> (<span class="string">"connect error"</span>.mysqli_connect_error());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据库查询</span></span><br><span class="line"><span class="comment">//根据用户输入的id号从admin表中获取对应的password</span></span><br><span class="line">$sql=<span class="string">"select password form admin where id='$id'"</span>;</span><br><span class="line">$res=mysqli_query($conn,$sql) <span class="keyword">or</span> <span class="keyword">die</span> (mysqli_error());</span><br><span class="line"></span><br><span class="line"><span class="comment">//密码比对</span></span><br><span class="line"><span class="keyword">if</span> ($row=mysqli_fetch_row($res))  &#123;</span><br><span class="line">    <span class="comment">//表明从admin表中查询到password</span></span><br><span class="line">    <span class="keyword">if</span> ($password==$row[<span class="string">'password'</span>])  &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源并关闭连接</span></span><br><span class="line">mysqli_free_result($res);</span><br><span class="line">mysqli_close($conn);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据分页处理"><a href="#数据分页处理" class="headerlink" title="数据分页处理"></a>数据分页处理</h2><p><strong>大致流程如下：</strong><br><img src="http://opznmu7n5.bkt.clouddn.com/post17_3.png" alt=""></p><p><strong>计算数据总页数</strong></p><p>在实现这一功能时，需要考虑到以下几个变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$pageSize         <span class="comment">//每页显示几条记录(由程序员来定义)</span></span><br><span class="line">$pageNow          <span class="comment">//显示第几页(用户输入)</span></span><br><span class="line">$pageCount        <span class="comment">//一共多少页(需要设计算法实现)</span></span><br><span class="line">$rowCount         <span class="comment">//共有多少行记录(需要从emp表中获取)</span></span><br></pre></td></tr></table></figure><p>计算总页数，也就是计算$pageCount的值，从逻辑上来讲，页数=进一法取整(总记录数/每页显示记录数)，用代码实现即是如下操作。</p><p>关于数据库连接、释放资源与关闭连接功能这里不再赘述、与上面讲到的一致，这里只提及功能实现部分。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//从emp表中获取总行数</span></span><br><span class="line">$sql=<span class="string">"select count(id) from emp"</span>;</span><br><span class="line">$res1=mysqli_query($conn,$sql) <span class="keyword">or</span> <span class="keyword">die</span>(mysqli_error());</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算总页数</span></span><br><span class="line"><span class="keyword">if</span> ($row=mysqli_fetch_row($res))  &#123;</span><br><span class="line">    $pageCount=ceil($row[<span class="number">0</span>]/$pageSize);         <span class="comment">//ceil是"进一取整"函数，正好符合题意</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>确定每页应当显示数据</strong></p><p>之所以定义\$pageSize，就是为了限制每页应当显示的记录数，可以实现将记录分页的效果。另外一个需要考虑的问题是当前页应当从哪一个记录开始显示？<br>我们假设当前页\$pageNow=3,每页显示记录数$pageSize=6。我们执行下面的指令，<br><code>select * from emp limit &quot;12,6&quot;</code></p><ul><li>limit取记录时从0开始计数，其中的<strong>12</strong>表示从第13条记录开始取</li><li>其中的<strong>6</strong>表示向后取出几条记录</li></ul><p>参数1的计算与当前页和每页显示记录数均有关，<br>12=(3-1)<em>6=(\$pageNow-1)\</em>$pageSize.<br>所以通过<code>select * from emp limit &quot;.($pageNow-1)*$pageSize.&quot;,$pageSize</code>就可以正确限制每页显示的数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从emp表中获取所有记录，并通过限制手段来实现正确的数据显示</span></span><br><span class="line">$sql=<span class="string">"select * from emp limit "</span>.($pageNow<span class="number">-1</span>)*$pageSize.<span class="string">",$pageSize"</span>;</span><br><span class="line">$res2=mysqli_query($conn,$sql) <span class="keyword">or</span> <span class="keyword">die</span> (mysqli_error());</span><br></pre></td></tr></table></figure><p>当页数和每页应当显示的数据都获取到之后，便可以返回到管理界面empList.php，打印出页面。</p><p><strong>打印管理用户界面</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印出表头</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;table width='700px' border='1px'&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;grade&lt;/th&gt;&lt;th&gt;email&lt;/th&gt;&lt;th&gt;salary&lt;/th&gt;&lt;th&gt;删除用户&lt;/th&gt;&lt;th&gt;修改用户&lt;/th&gt;&lt;/tr&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//传入数据</span></span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>;$i&lt;count($res2);$i++)  &#123;</span><br><span class="line">    $row=$res2[$i];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;tr&gt;&lt;td&gt;&#123;$row['id']&#125;&lt;/td&gt;&lt;td&gt;&#123;$row['name']&#125;&lt;/td&gt;&lt;td&gt;&#123;$row['grade']&#125;&lt;/td&gt;&lt;td&gt;&#123;$row['email']&#125;&lt;/td&gt;&lt;td&gt;&#123;$row['salary']&#125;&lt;/td&gt;&lt;td&gt;&lt;a href='#'&gt;删除用户&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a&gt;修改用户&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//表尾</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;/table&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上一页</span></span><br><span class="line"><span class="keyword">if</span> ($pageNow&gt;<span class="number">1</span>)  &#123;</span><br><span class="line">    $perPage=$pageNow<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;a href='empList.php?pageNow=$prePage'&gt;上一页&lt;/a&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下一页</span></span><br><span class="line"><span class="keyword">if</span> ($pageNow&lt;$pageCount)  &#123;</span><br><span class="line">    $nextPage=$pageNow+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">echo</span>  <span class="string">"&lt;a href='empList.php?pageNow=$nextPage'&gt;下一页&lt;/a&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>empList.php界面最终效果图</strong><br><img src="http://opznmu7n5.bkt.clouddn.com/post17_4.png" alt=""></p><p>在这里，我只对其中的部分关键功能进行了分析，完整代码可以参阅<a href="https://github.com/ai-heng/empmanage" target="_blank" rel="noopener">雇员管理系统</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天，照着&lt;strong&gt;韩顺平&lt;/strong&gt;老师的PHP教程，把&lt;strong&gt;雇员管理系统&lt;/strong&gt;代码敲了一遍，在这个过程中，把自己不懂的知识点融入到项目中去学习，我觉得通过这种方式的确有助于帮助自己进步，通过&lt;strong&gt;stackOverflow&lt;/strong&gt;也解决了运行调试过程中出现的一些问题，不过有一些还没有找到解决方案。而我今天呢，希望将这个&lt;strong&gt;项目框架&lt;/strong&gt;以及其中比较重要的一些&lt;strong&gt;功能&lt;/strong&gt;单独拿出来再分析一番，加强自己的印象。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="http://yoursite.com/2017/07/18/KMP%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/07/18/KMP算法/</id>
    <published>2017-07-18T09:35:00.000Z</published>
    <updated>2017-08-03T08:55:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>写在前面的话</strong></p></blockquote><p>看了眼第一次写这篇文章的时间，是4/12，现在已经是7/1了，还没发表，也是够尴尬了吧，很多事情，就是这样，一旦你拖了下去，就再没有继续的时候，迄今为止，其实这篇文章依旧尚未终结，我还差了一个具体事例讲解，先发表出来挖个坑吧，等到考完试填了。</p><a id="more"></a><p><strong>7/18：</strong>更新…</p><blockquote><p><strong>正文</strong></p></blockquote><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>子串的定位运算通常称为串的<strong>模式匹配/串匹配</strong>。著名的模式匹配算法是<strong>BF算法</strong>和<strong>KMP算法</strong>。</p><h1 id="BF算法"><a href="#BF算法" class="headerlink" title="BF算法"></a>BF算法</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li><p>分别利用计数指针i和j指示主串S和模式T中当前正待比较的字符位置，i初值为pos，j初值为1。</p></li><li><p>如果两个串均未比较到串尾，即i和j分别小于等于S和T的长度时，则循环执行以下操作：</p></li></ul><ol><li>S.ch[i]和T.ch[j]比较，若相等，则i和j分别指示串中下个位置，继续比较后续字符。</li><li>若不等，指针后退重新开始匹配，从主串的下一个字符(i-j+2)起再重新和模式的第一个字符(j=1)比较。</li></ol><ul><li>如果j&gt;T.length，说明模式T中的每个字符依次和主串S中的一个连续的字符序列相等，则匹配成功，返回和模式T中第一个字符相等的字符在主串S中的序号(i-T.length);否则称匹配不成功，返回0。</li></ul><h2 id="源代码表示"><a href="#源代码表示" class="headerlink" title="源代码表示"></a>源代码表示</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Index</span><span class="params">(SString S, SString T, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=pos,j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;=S.length &amp;&amp; j&lt;=T.length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (S.ch[i]==T.ch[j])</span><br><span class="line">            &#123;++i;++j;&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;i=i-j+<span class="number">2</span>;j=<span class="number">1</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j&gt;T.length)     <span class="keyword">return</span> i-T.length;</span><br><span class="line">    <span class="keyword">else</span>    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h1><h2 id="改进之处"><a href="#改进之处" class="headerlink" title="改进之处"></a>改进之处</h2><p>每当一趟匹配过程中出现字符比较不相等时，不需回溯i指针，而是利用已经得到的“部分匹配”的结果将模式串向右“滑动”尽可能远的一段距离后，继续进行比较。</p><p>假设主串为$ s_1s_2{\cdots}s_n $，模式串为$ p_1p_2{\cdots}p_m $</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>当主串中第i个字符与模式串中第j个字符“失配”时，主串中的第i个字符应与模式串中哪个字符进行比较？</p><p>假设此时应与模式中第k（k &lt; j）个字符继续比较，则须满足关系式：<br>$$<br>p_1p_2{\cdots}p_{k-1} = s_{i-k+1}s_{i-k+2}{\cdots}s_{i-1}\\<br>已得到的结果：\\<br>p_{j-k+1}p_{j-k+2}{\cdots}p_{j-1} = s_{i-k+1}s_{i-k+2}{\cdots}s_{i-1}\\<br>可以推出，须满足：\\<br>p_1p_2{\cdots}p_{k-1} = p_{j-k+1}p_{j-k+2}{\cdots}p_{j-1}<br>$$<br>其中关联如图所示：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/post14_1.jpg" alt=""></p><p>若令$ next[j]=k $，则<strong>next[j]</strong>表明当模式串中第j个字符与主串中相应字符“失配”时，在该模式串中需要重新和主串中该字符进行比较的字符的位置。</p><h2 id="模式串中的next函数"><a href="#模式串中的next函数" class="headerlink" title="模式串中的next函数"></a>模式串中的next函数</h2><p>$$<br>next[j]=<br>\begin{cases}<br>0,j=1 &amp; \text{($p_1$与$s_i$比较不等时，下一步进行$p_i$和$s_{i+1}$的比较)} \\<br>Max[k|1&lt;k&lt;j] &amp; \text{(满足<br>$ p_1p_2{\cdots}p_{k-1}=p_{j-k+1}p_{j-k+2}{\cdots}p_{j-1} $ 的最大k值)}\\<br>1,k=1 &amp; \text{(不存在相同子串，下一步进行$p_1$和$s_i$的比较)}<br>\end{cases}<br>$$</p><h2 id="如何求next函数值"><a href="#如何求next函数值" class="headerlink" title="如何求next函数值"></a>如何求next函数值</h2><ul><li>$ next[1]=0 $; 表明主串从下一字符$s_{i+1}$起和模式串重新开始匹配。   $ i=i+1;j=1 $ ;</li><li>设$ next[j]=k $, 则$ next[j+1]=? $</li></ul><p><strong>a：</strong> 若$ p_k=p_j $，则有<br>$$<br>p_1p_2{\cdots}p_{k-1}p_k = p_{j-k+1}p_{j-k+2}{\cdots}p_{j-1}p_j<br>$$<br>说明$ next[j+1]=k+1=next[j]+1 $。</p><p><strong>b：</strong> 若$ p_k{\neq}p_j $，可把求next值问题看成是一个模式匹配问题，整个模式串既是主串，又是子串。则需往前回溯，检查是否$ p_j=p_{next[k]} $,</p><p>若相等，则$ next[j+1]=next[k]+1 $;</p><p>若不等，检查是否$ p_j=p_{next[next[k]]} $，直到$ next[j+1]=1 $为止。</p><h2 id="源代码表示-1"><a href="#源代码表示-1" class="headerlink" title="源代码表示"></a>源代码表示</h2><h3 id="KMP算法-1"><a href="#KMP算法-1" class="headerlink" title="KMP算法"></a>KMP算法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Index_KMP</span><span class="params">(SString S,SString T, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    i=pos,j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;=S.length &amp;&amp; j&lt;=T.length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j==<span class="number">0</span> || S.ch[i]==T.ch[j])</span><br><span class="line">            &#123;++i;++j;&#125;</span><br><span class="line">        <span class="keyword">else</span>    j=next[j];          <span class="comment">//模式串向右移动</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j&gt;T.length)     <span class="keyword">return</span> i-T.length;</span><br><span class="line">    <span class="keyword">else</span>        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算next函数值"><a href="#计算next函数值" class="headerlink" title="计算next函数值"></a>计算next函数值</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">(SString T, <span class="keyword">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//求模式串T的next函数值并存入数组next</span></span><br><span class="line">    i=<span class="number">1</span>;next[<span class="number">1</span>]=<span class="number">0</span>;j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;T.length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j==<span class="number">0</span> || T.ch[i]==T.ch[j])</span><br><span class="line">            &#123;++i;++j;next[i]=j;&#125;</span><br><span class="line">            <span class="keyword">else</span> j=next[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><p><strong>求串′ababaaababaa′的next数组:</strong></p><p><strong>先给出答案：</strong></p><table><thead><tr><th style="text-align:center">j</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th><th style="text-align:center">11</th><th style="text-align:center">12</th></tr></thead><tbody><tr><td style="text-align:center">模式串</td><td style="text-align:center">a</td><td style="text-align:center">b</td><td style="text-align:center">a</td><td style="text-align:center">b</td><td style="text-align:center">a</td><td style="text-align:center">a</td><td style="text-align:center">a</td><td style="text-align:center">b</td><td style="text-align:center">a</td><td style="text-align:center">b</td><td style="text-align:center">a</td><td style="text-align:center">a</td></tr><tr><td style="text-align:center">Next[j]</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td></tr></tbody></table><p><strong>计算过程：</strong></p><p>next数组值的计算依据下面的<strong>分段函数</strong>，</p><p>$$<br>next[j]=<br>\begin{cases}<br>0,j=1 &amp; \text{($p_1$与$s_i$比较不等时，下一步进行$p_i$和$s_{i+1}$的比较)} \\<br>Max[k|1&lt;k&lt;j] &amp; \text{(满足<br>$ p_1p_2{\cdots}p_{k-1}=p_{j-k+1}p_{j-k+2}{\cdots}p_{j-1} $ 的最大k值)}\\<br>1,k=1 &amp; \text{(不存在相同子串，下一步进行$p_1$和$s_i$的比较)}<br>\end{cases}<br>$$</p><blockquote><p><strong>最大k值</strong>代表当模式中第j个字符与主串中第i个字符“失配”时，在该模式串中需要重新和主串中第i个字符进行<strong>比较的字符位置，最大k值与最终求得的next[j]值是相等的</strong>。</p></blockquote><p><strong>一定要注意观察分段函数第二段求max[k]时的满足条件，模式串中的最大相同子串应该满足：</strong></p><p>$$<br>p_1p_2{\cdots}p_{k-1}=p_{j-k+1}p_{j-k+2}{\cdots}p_{j-1}<br>$$</p><p>所以k值很关键，要找到一个<strong>最大k值</strong>，满足上式。</p><p>它是根据下面这张图片推出来的，假设主串为$s_1s_2···s_n$，模式串为$p_1p_2···p_m$，此时图片中对应的情形是<strong>主串中第i个字符与模式中第j个字符“失配”</strong>：<br><img src="http://opznmu7n5.bkt.clouddn.com/post14_1.jpg" alt=""></p><p><strong>下面结合这道题具体分析：</strong></p><table><thead><tr><th style="text-align:center">j</th><th style="text-align:center">模式串</th><th style="text-align:center">对应分段函数</th><th style="text-align:center">最大相同子串数</th><th style="text-align:center">最大k值</th><th style="text-align:center">对应子串</th><th style="text-align:center">next[j]</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">a</td><td style="text-align:center">第一段</td><td style="text-align:center">X</td><td style="text-align:center">X</td><td style="text-align:center">X</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">b</td><td style="text-align:center">第三段</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">X</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">a</td><td style="text-align:center">第三段</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">X</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">b</td><td style="text-align:center">第二段</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">$ p_1=p_3 $</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">a</td><td style="text-align:center">第二段</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">$ p_1p_2=p_2p_3 $</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">a</td><td style="text-align:center">第二段</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">$ p_1p_2p_3=p_3p_4p_5 $</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">a</td><td style="text-align:center">第二段</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">$ p_1=p_6 $</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">b</td><td style="text-align:center">第二段</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">$ p_1=p_7 $</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">a</td><td style="text-align:center">第二段</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">$ p_1p_2=P_7p_8 $</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">b</td><td style="text-align:center">第二段</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">$ p_1p_2p_3=p_7p_8p_9 $</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">a</td><td style="text-align:center">第二段</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">$ p_1p_2p_3p_4=p_7p_8p_9p_{10} $</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">a</td><td style="text-align:center">第二段</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">$ p_1p_2p_3p_4p_5=p_7p_8p_9p_{10}p_{11} $</td><td style="text-align:center">6</td></tr></tbody></table><blockquote><p><strong>写在后面的话</strong></p></blockquote><p>从这篇文章中可以看出来，里面的一些公式在<strong>hexo</strong>没有成功渲染出来，从网上查了下，好像是Markdown自带的 mathjax与hexo的公式渲染会有冲突，一些关键地方我先用图片代替了，先在这挖个坑，日后去解决这个问题…</p><p><strong>8/3：</strong>补坑，把上面提到的这个问题解决了，也将图片又还原成公式了，这次没有问题，具体解决方法在这里：<br><a href="http://www.ai-heng.cn/2017/08/03/hexo%E5%8D%9A%E5%AE%A2MathJax%E5%85%AC%E5%BC%8F%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">hexo博客MathJax公式渲染问题</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;写在前面的话&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看了眼第一次写这篇文章的时间，是4/12，现在已经是7/1了，还没发表，也是够尴尬了吧，很多事情，就是这样，一旦你拖了下去，就再没有继续的时候，迄今为止，其实这篇文章依旧尚未终结，我还差了一个具体事例讲解，先发表出来挖个坑吧，等到考完试填了。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="KMP" scheme="http://yoursite.com/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>大二暑假</title>
    <link href="http://yoursite.com/2017/07/16/%E5%A4%A7%E4%BA%8C%E6%9A%91%E5%81%87/"/>
    <id>http://yoursite.com/2017/07/16/大二暑假/</id>
    <published>2017-07-16T15:35:00.000Z</published>
    <updated>2018-05-05T15:08:15.634Z</updated>
    
    <content type="html"><![CDATA[<p>这个暑假，没有轰轰烈烈，也没有太多想法,也不像一些大神那样已经着手开发很多项目。反之，我已经是快要升入大三的家伙了，依旧像个小白一样，什么都懵懵懂懂，甚至于不敢面对自己的往昔，上篇博客记录于7月1日，第二天原本还有一篇，不过由于hexo出了些问题，没能上传成功。</p><a id="more"></a><p>我又<strong>拖延</strong>了，一下子到了16号，半个月没动博客，心生逃避心理，简直痛不欲生，暑假从6号就开始了，所以这些天，你到底都荒废了什么，总之我只知道，我很难受。也就从昨天晚上开始，才慢慢步入暑假正轨，学到深夜，早上6点钟起，今天学了一天，这是一个好兆头，我真正所期望的暑假，现在才刚刚开始。<br><img src="http://opznmu7n5.bkt.clouddn.com/post15_1.jpg" alt=""></p><p>接下来的一段时间，我由衷地希望自己能够充分利用，把握好，认真学习<strong>后端开发</strong>，认真去对待编程，努力去培养兴趣，让自己的暑假变得充实。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个暑假，没有轰轰烈烈，也没有太多想法,也不像一些大神那样已经着手开发很多项目。反之，我已经是快要升入大三的家伙了，依旧像个小白一样，什么都懵懵懂懂，甚至于不敢面对自己的往昔，上篇博客记录于7月1日，第二天原本还有一篇，不过由于hexo出了些问题，没能上传成功。&lt;/p&gt;
    
    </summary>
    
      <category term="心情随笔" scheme="http://yoursite.com/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="心语" scheme="http://yoursite.com/tags/%E5%BF%83%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>Java基础知识</title>
    <link href="http://yoursite.com/2017/07/02/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2017/07/02/Java基础知识/</id>
    <published>2017-07-02T14:00:00.000Z</published>
    <updated>2018-05-05T15:07:41.454Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>写在前面的话</strong></p></blockquote><p>这两天呢，关于<strong>计算机网络、Java以及数据结构</strong>方面，自己都整理总结了一番简单的知识点，马上就要考试了，所以就此方式大概复习了一下，祝自己考试顺利QAQ</p><a id="more"></a><blockquote><p><strong>正文</strong></p></blockquote><h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><p>抽象就是忽略问题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。<br>使用关键字<strong>abstract</strong>来定义抽象类。</p><ul><li><strong>过程抽象：</strong> 将整个系统的功能划分为若干部分，强调功能完成的过程和步骤，而隐蔽其具体的实现。</li><li><strong>数据抽象：</strong> 将系统中需要处理的数据和这些数据上的操作结合在一起，抽象成不同的抽象数据类型，每个抽象数据类型既包含了数据，也包含了针对这些数据的操作。</li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>允许创建者规定一个类的基本形式：方法名、自变量列表以及返回类型，但不规定方法主体，接口也包含了数据成员，但它们都默认为static和final，接口只提供一种形式，并不提供实施的细节。<br>使用关键字<strong>interface</strong>来声明接口，<strong>implements</strong>来实现接口。</p><h2 id="接口和抽象类的区别"><a href="#接口和抽象类的区别" class="headerlink" title="接口和抽象类的区别"></a>接口和抽象类的区别</h2><ul><li>接口中的所有方法都是抽象的，而抽象类可以同时包含抽象和非抽象的方法。</li><li>类可以实现很多接口，但只能继承一个抽象类。</li><li>接口中的成员函数默认是public的，抽象类的成员函数可以说private，protected或者public。</li><li>从设计层面来说，抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。</li><li>接口中声明的变量默认都是final的，抽象类可以包含非final的变量。</li></ul><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装是一种信息隐蔽技术，利用抽象数据类型将数据和基于数据的操作封装在一起，目的在于将对象的使用者和设计组分开，使使用者不必知道行为实现的细节，只需使用设计者提供的消息来访问对象。</p><ul><li>清楚的边界，所有对象的内部信息被限定在这个边界内。</li><li>接口，即对象对外界提供的方法，外界可以通过这些方法与对象进行交互。</li><li>受保护的内部实现，即软件对象功能的实现细节，实现细节不能从类外访问。</li></ul><h1 id="图像化界面"><a href="#图像化界面" class="headerlink" title="图像化界面"></a>图像化界面</h1><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul><li>掌握图形用户界面程序的编程方法、思路，学会在Applet和Application中引入图形用户界面</li><li>了解Java的图形环境，绘制简单图形</li><li>掌握Swing的结构和特点，学会使用布局管理、事件处理，以及常用的Swing组件</li></ul><h2 id="Applet的概念及基本方法"><a href="#Applet的概念及基本方法" class="headerlink" title="Applet的概念及基本方法"></a>Applet的概念及基本方法</h2><p>它一种嵌入html文档中的Java程序。<br>一个applet程序需要继承javax.swing包中的JApplet类，也可以继承老的awt组件中的Applet类，JApplet类属于新的Swing组件。</p><h2 id="Java的绘图机制，及实现更为出色绘图效果的Java-2D"><a href="#Java的绘图机制，及实现更为出色绘图效果的Java-2D" class="headerlink" title="Java的绘图机制，及实现更为出色绘图效果的Java 2D"></a>Java的绘图机制，及实现更为出色绘图效果的Java 2D</h2><p>Graphics对象专门管理图形环境，Graphics是一个抽象类，与平台无关。<br>Java 2D API提供了高级的二维图形功能。</p><h2 id="Swing的结构层次、布局管理，以及如何为其编写事件处理程序"><a href="#Swing的结构层次、布局管理，以及如何为其编写事件处理程序" class="headerlink" title="Swing的结构层次、布局管理，以及如何为其编写事件处理程序"></a>Swing的结构层次、布局管理，以及如何为其编写事件处理程序</h2><p> JFame和JApplet都是Swing组件，分别代表窗口组件和Applet容器组件。<br> JFC是关于GUI组件和服务的完整集合， 主要包括：AWT/Java2D/Accessibility/Drag&amp;Drop/Swing。</p><p>通常将javax.swing包里的Swing组件归为三个层次：顶层容器、中间层容器、原子组件。</p><ul><li><strong>顶层容器：</strong> JFrame(实现单个主窗口)、JDialog(实现一个二级窗口，即对话框)、JApplet(在浏览器窗口中实现一个applet显示区域)</li><li><strong>中间层容器：</strong> 分为一般用途的(JPanel/ JScrollPane/…)和特殊用途的(JintermalFrame/JRootPane)</li><li><strong>原子组件：</strong> 是在图形用户界面中和用户进行交互的组件。分为三类，包括显示不可 编辑信息的Jlabel…有控制功能、可以用来输入信息的JButton…能提供格式化的信息并允许用户选择的JColorChooser</li></ul><p>布局管理器能够将下级组件有秩序地摆在上一级容器中，使用关键字<strong>setLayout</strong>。</p><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>GUI是由事件驱动的，一些常见的事件包括：<br>移动鼠标、单双击鼠标各个按钮、单击按钮、拖动滚动条、关闭窗口…</p><p>编写事件处理程序时，需要注意<strong>事件源、事件监听器、事件对象</strong>。</p><p>很多Swing组件都要使用的特色如Action对象、边框、外观风格、线程、定时器等。</p><h1 id="常考面试题"><a href="#常考面试题" class="headerlink" title="常考面试题"></a>常考面试题</h1><h2 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h2><p><strong>Java虚拟机(Java Virtual Machine/JVM)</strong>是一个可以执行Java字节码的虚拟机进程，它有自己完善的硬件架构，如处理器、堆栈、寄存器等，还具有相应的指令系统。JVM屏蔽了与具体操作系统平台相关的信息，使得Java程序只需生成在Java虚拟机上运行的字节码，就可以在多种平台上不加修改地运行。</p><h2 id="JRE-与-JDK"><a href="#JRE-与-JDK" class="headerlink" title="JRE 与 JDK"></a>JRE 与 JDK</h2><ul><li><strong>JRE：</strong>(Java Runtime Environment)，是Java运行环境，包含了Java虚拟机，Java基础类库，是使用Java语言编写程序所需要的软件环境。</li><li><strong>JDK：</strong>(Java Development Kit)，是Java开发工具包，包含了JRE，编译器和其他的工具，可以让开发者开发、编译、执行Java应用程序。</li></ul><h2 id="方法覆盖和方法重载"><a href="#方法覆盖和方法重载" class="headerlink" title="方法覆盖和方法重载"></a>方法覆盖和方法重载</h2><ul><li><strong>方法重写(Overriding)：</strong>是说子类重新定义了父类的方法，方法重写必须有相同的方法名，参数列表和返回类型。</li><li><strong>方法重载(Overloading)：</strong>是发生在同一个类里面的两个或多个方法的方法名相同但参数不同的情况。</li></ul><p>两者的不同点在于：</p><ul><li>方法重写要求参数列表必须一致，而方法重载要求参数列表必须不一致。</li><li>方法重写要求返回类型必须一致，而方法重载对此没有要求。</li><li>方法重写只能用于子类重写 父类的方法，而方法重载用于同一个类中的所有方法。</li><li>方法重写对方法的访问权限和抛出的异常有特殊的要求，而方法重载 在这方面没有任何限制。</li><li>父类的一个方法只能被子类重写一次，而一个方法可以在所有的类中被重载多次。</li><li>重写是运行时多态，重载是编译时多态。</li></ul><h2 id="构造函数的特点"><a href="#构造函数的特点" class="headerlink" title="构造函数的特点"></a>构造函数的特点</h2><ul><li>方法名和类名相同</li><li>没有返回类型（修饰符void也不能有）</li><li>通常被声明为公有的(public)</li><li>可以有任意多个参数</li><li>主要作用是完成对象的初始化工作</li><li>不能在程序中显式地调用</li><li>在生成一个对象时，系统会自动调用该类的构造方法为新生成的对象初始化</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;写在前面的话&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这两天呢，关于&lt;strong&gt;计算机网络、Java以及数据结构&lt;/strong&gt;方面，自己都整理总结了一番简单的知识点，马上就要考试了，所以就此方式大概复习了一下，祝自己考试顺利QAQ&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络知识点</title>
    <link href="http://yoursite.com/2017/06/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2017/06/29/计算机网络知识点/</id>
    <published>2017-06-28T16:53:00.000Z</published>
    <updated>2018-05-05T15:06:55.211Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>写在前面的话</strong></p></blockquote><p>熬夜第3天，不过呢，今天也算出了点小状况，刚开始去试着享受夜晚的时光，今天在群里看到一则消息，XX同学因为熬夜复习突发意外，呃…真尴尬，自己平时还是要注意加强锻炼，保证好自己的身体。其次，还是会也有些困=_=，自己在晚上的确是抗不了多久，眼睛也会不舒服，今天就先挖个坑吧，尽快填好，晚安:)</p><p>6/30—:填坑中…</p><a id="more"></a><blockquote><p><strong>正文</strong></p></blockquote><h1 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h1><ul><li><strong>OSI分层：</strong>物理层、数据链路层、网络层、运输层、会话层、表示层、应用层</li><li><strong>TCP/IP分层：</strong>网络接口层、网络层、运输层、应用层</li><li><strong>五层因特网协议：</strong>物理层、数据链路层、网络层、运输层、应用层</li></ul><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul><li><strong>物理层：</strong>通过媒介传输比特，即负责物理传输，该层的协议既与链路有关，也与传输有关(比特Bit)。</li><li><strong>数据链路层：</strong>将比特组装成帧，负责点到点间的传递(帧Frame)。</li><li><strong>网络层：</strong>负责数据包从源到宿的传递，抓哟解决路由选择、拥塞控制和网络互联等问题(包Packet)。</li><li><strong>运输层：</strong>负责为信源和信宿提供应用程序进程间的数据传输服务(段Segment)。</li><li><strong>应用层：</strong>是网络应用程序及其应用协议存留的地方，是允许访问OSI环境的手段(应用协议数据单元APDU)。</li></ul><h1 id="协议名称及解释"><a href="#协议名称及解释" class="headerlink" title="协议名称及解释"></a>协议名称及解释</h1><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><ul><li><strong>RJ45：</strong>(Registered Jack 45),<strong>标准8位模块化接口</strong>，是布线系统中信息插座连接器的一种。</li><li><strong>IEEE 802.3：</strong> <strong>以太网</strong>，描述物理层和数据链路层的MAC子层的实现方法。</li></ul><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><ul><li><strong>PPP：</strong>(Point-to-Point Protocol),<strong>点对点协议</strong>，是各类型主机、网桥和路由器之间简单连接的一种解决方案。</li><li><strong>HDLC：</strong>(High-Level Data Link Control),<strong>高级数据链路控制</strong>，是一个在网上传输数据、面向比特的数据链路层协议。</li><li><strong>MAC：</strong>(Media Access Control),<strong>LAN地址/物理地址/硬件地址</strong>，用来定义网络设备的位置。</li><li><strong>VLAN：</strong>(Virtual Local Area Network),<strong>虚拟局域网</strong>，是一组逻辑上的设备和用户，这些设备和用户不受物理位置的限制，可以根据功能、部门及应用等因素将它们组织起来。</li></ul><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><ul><li><strong>IP：</strong>(Internet Protocol),<strong>网络协议</strong>，是为计算机网络相互连接进行通信而设计的协议。</li><li><strong>ICMP：</strong>(Internet Control Message Protocol),<strong>网络控制报文协议</strong>，用于在IP主机、路由器之间传递控制消息。</li><li><strong>ARP：</strong>(Address Resolution Protocol),<strong>地址解析协议</strong>，是根据IP地址获取物理地址的一个TCP/IP协议。</li><li><strong>RARP：</strong>(Reverse Address Resolution Protocol),<strong>反向地址转换协议</strong>，将局域网中某个主机的物理地址转换为IP地址。</li><li><strong>OSPF：</strong>(Open Shortest Path First),<strong>开放式最短路径优先</strong>，是用于IP网络的链路状态路由协议。</li></ul><h2 id="数据链路层-1"><a href="#数据链路层-1" class="headerlink" title="数据链路层"></a>数据链路层</h2><h2 id="物理层-1"><a href="#物理层-1" class="headerlink" title="物理层"></a>物理层</h2><h1 id="可靠数据传输机制及其用途"><a href="#可靠数据传输机制及其用途" class="headerlink" title="可靠数据传输机制及其用途"></a>可靠数据传输机制及其用途</h1><ul><li><strong>检验和：</strong>用于检验在一个传输分组中的比特错误</li><li><strong>定时器：</strong>用于超时/重传一个分组，可能因为该分组（或其ACK）在信道中丢失了，由于当一个分组延时但未丢失（过早超时），或当一个分组已被接收方收到但从接收方到发送方的ACK丢失时，可能产生超时事件，所以接收方可能会收到一个分组的多个冗余副本</li><li><strong>序号：</strong>用于为从发送方流向接收方的数据分组按顺序编号。所接收分组的序号间的空隙可使接收方检测出丢失的分组。具有相同序号的分组可是接收方检测出一个分组的冗余副本</li><li><strong>确认：</strong>接收方用于告诉发送方一个分组或一组分组已被正确地接收到了。确认报文通常携带着被确认的分组或多个分组的序号。确认可以是逐个的活累积的，这取决于协议</li><li><strong>否定确认：</strong>接收方用于告诉发送方某个分组未被正确地接收。否定确认报文通常携带着未被正确接收的分组的序号</li><li><strong>窗口、流水线：</strong>发送方也许被限制仅发送那些序号落在一个指定范围内的分组。通过允许一次发送多个分组但未被确认，发送方的利用率可在停等操作模式的基础上得到增加。我们很快将会看到，窗口长度可根据接收方接收和缓冲报文的能力、网络中的拥塞程度或两者情况进行设置</li></ul><h1 id="网络互联设备"><a href="#网络互联设备" class="headerlink" title="网络互联设备"></a>网络互联设备</h1><p>为了在更大范围内实现相互通信和资源共享，网络之间的互联便成为一种信息快速传达的最好方式。</p><h2 id="常见的互联设备"><a href="#常见的互联设备" class="headerlink" title="常见的互联设备"></a>常见的互联设备</h2><ul><li><strong>中继器：</strong>对接收信号进行再生和发送，只起到扩展传输距离的作用。(<strong>物理层</strong>)</li><li><strong>集线器：</strong>多端口的中继器。(<strong>物理层</strong>)</li><li><strong>网桥：</strong>根据帧物理地址进行网络之间的信息转发，可缓解网络通信繁忙度，提高效率。(数据链路层)</li><li><strong>二层交换机：</strong>传统的交换机，多端口网桥 (<strong>数据链路层</strong>)</li><li><strong>三层交换机：</strong>带路由功能的二层交换机(<strong>网络层</strong>)</li><li><strong>路由器：</strong>通过逻辑地址进行网络之间的信息转发，可完成异构网络之间的互联互通，只能连接相同网络协议的子网。(<strong>网络层</strong>)</li></ul><h1 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h1><ul><li>TCP提供面向连接的、可靠的数据流传输，而UDP提供非面向连接的、不可靠的数据流传输。</li><li>TCP传输单位称为TCP报文段，UDP传输单位称为用户数据报。</li><li>TCP着重数据安全性，UDP数据传输快，但安全性一般</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;写在前面的话&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;熬夜第3天，不过呢，今天也算出了点小状况，刚开始去试着享受夜晚的时光，今天在群里看到一则消息，XX同学因为熬夜复习突发意外，呃…真尴尬，自己平时还是要注意加强锻炼，保证好自己的身体。其次，还是会也有些困=_=，自己在晚上的确是抗不了多久，眼睛也会不舒服，今天就先挖个坑吧，尽快填好，晚安:)&lt;/p&gt;
&lt;p&gt;6/30—:填坑中…&lt;/p&gt;
    
    </summary>
    
      <category term="计算机网络" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>插入排序</title>
    <link href="http://yoursite.com/2017/06/27/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/06/27/插入排序/</id>
    <published>2017-06-26T18:03:00.000Z</published>
    <updated>2018-05-05T15:05:37.877Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>写在前面的话：</strong></p></blockquote><p>首先，这次的博客发表于早上1:27，算是熬夜了吧，其实这次的文章是之前挖的坑，但是中间又是隔了好几天，才发表出来，又凸显出自己的效率问题。其主要原因即是因为周末两天又自己荒废掉，而我之前想到一个对自己的<strong>惩罚措施</strong>，就是熬夜学习，既为了让自己印象深刻，又希望能够稍微对自己内心的愧疚有些弥补，原本惩罚是应该放于昨天的，可是昨天熬到12点的时候就完全不行了，真的可以说是<strong>心力交瘁</strong>，所以就睡下了，而今天就来接受这次的惩罚吧。</p><a id="more"></a><p>可能自己会意识到一个问题，总结的博客中，有关自己思想的东西不是特别多，基本上都是按照教材上的知识点自己敲了一遍，我承认这是自己所存在的一个问题，我意识到自己<strong>海绵式思维</strong>运用的不错，但<strong>淘金式思维</strong>，亦或者是<strong>想象力</strong>不足，我不明白这是<strong>智商</strong>的问题，还是自己<strong>思维</strong>的问题，但是前期的话，我还是希望自己先坚持下去，在这个过程中去寻找改变的突破口，去努力，去成长。</p><blockquote><p><strong>正文部分：</strong></p></blockquote><p><strong>排序</strong>在日常生活中运用很广泛，而且也是<strong>数据结构</strong>中比较重要的知识，在接下来的一些内容中，我将整理总结最常见、也是我们必须要掌握的几类算法。</p><p><strong>排序</strong>是按关键字的非递减或非递增顺序对一组记录重新进行排列的操作。其目的是便于我们的<strong>查找</strong>，可以通过排序算法的<strong>时间效率、空间效率、稳定性</strong>来衡量一个算法的好坏。</p><p>排序可分为<strong>内部排序</strong>和<strong>外部排序</strong>，又可以将内部排序大致分为<strong>插入类、交换类、选择类、归并类、分配类</strong>，这一小节中，我主要介绍几类常见的<strong>插入排序算法</strong>。</p><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h2 id="基本思想："><a href="#基本思想：" class="headerlink" title="基本思想："></a>基本思想：</h2><p>每一趟将一个待排序的记录，按其关键字的大小插入到已经排好序的一组记录的适当位置上，直到所有待排序记录全部插入为止。</p><blockquote><p>三种常见的插入排序算法：直接插入排序、折半插入排序、希尔排序。</p></blockquote><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><h3 id="基本操作："><a href="#基本操作：" class="headerlink" title="基本操作："></a>基本操作：</h3><p>将一条记录插入到已排好序的有序表中，从而得到一个新的、记录数量增1的有序表。</p><h3 id="数据类型定义："><a href="#数据类型定义：" class="headerlink" title="数据类型定义："></a>数据类型定义：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20<span class="comment">//顺序表的最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> KeyType;<span class="comment">//定义关键字为整数型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span><span class="comment">//定义每个数据元素的结构 </span></span><br><span class="line">KeyType key;<span class="comment">//关键字项 </span></span><br><span class="line">InfoTypeotherinfo;<span class="comment">//其他数据项 </span></span><br><span class="line">&#125;RedType; </span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span><span class="comment">//定义顺序表结构 </span></span><br><span class="line">RedType r[MAXSIZE+<span class="number">1</span>];<span class="comment">//存储顺序表的向量 </span></span><br><span class="line"><span class="keyword">int</span> length;<span class="comment">//顺序表长度 </span></span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure><h3 id="算法实现："><a href="#算法实现：" class="headerlink" title="算法实现："></a>算法实现：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">2</span>;i&lt;=L.length;++i)</span><br><span class="line"><span class="keyword">if</span> (L.r[i].key&lt;L.r[i<span class="number">-1</span>].key)&#123;</span><br><span class="line">L.r[<span class="number">0</span>]=L.r[i];<span class="comment">//复制为哨兵 </span></span><br><span class="line">L.r[i]=L.r[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span> (j=i<span class="number">-2</span>;L.r[<span class="number">0</span>].key&lt;L.r[j].key;--j)</span><br><span class="line">L.r[j+<span class="number">1</span>]=L.r[j];<span class="comment">//记录后移</span></span><br><span class="line">L.r[j+<span class="number">1</span>]=L.r[<span class="number">0</span>]; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="性能分析："><a href="#性能分析：" class="headerlink" title="性能分析："></a>性能分析：</h3><ul><li>时间复杂度为$O(n^2)$</li><li>空间复杂度为$O(1)$</li><li>适用于初始记录基本有序的情况，<strong>稳定</strong>排序</li></ul><h2 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h2><h3 id="算法实现：-1"><a href="#算法实现：-1" class="headerlink" title="算法实现："></a>算法实现：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BInsertSort</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">2</span>;i&lt;=L.length;++i)&#123;</span><br><span class="line">L.r[<span class="number">0</span>]=L.r[i];</span><br><span class="line">low=<span class="number">1</span>;high=i<span class="number">-1</span>;<span class="comment">//置查找区间初值 </span></span><br><span class="line"><span class="keyword">while</span> (low&lt;=high)&#123;<span class="comment">//折半查找插入位置 </span></span><br><span class="line">m=(low+high)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (L.r[<span class="number">0</span>].key&lt;L.r[m].key)</span><br><span class="line">high=m<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">low=m+<span class="number">1</span>; </span><br><span class="line">&#125;<span class="comment">//循环结束后，插入位置已确认</span></span><br><span class="line"><span class="keyword">for</span> (j=i<span class="number">-1</span>;j&gt;=high+<span class="number">1</span>;--j)</span><br><span class="line">L.r[j+<span class="number">1</span>]=L.r[j];<span class="comment">//记录后移，空出插入位置</span></span><br><span class="line">L.r[high+<span class="number">1</span>]=L.r[<span class="number">0</span>];<span class="comment">//插入数据 </span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="性能分析：-1"><a href="#性能分析：-1" class="headerlink" title="性能分析："></a>性能分析：</h3><ul><li>时间复杂度为$O(n^2)$</li><li>空间复杂度为$O(1)$</li><li>适用于初始记录无序，n较大的情况，<strong>稳定</strong>排序</li></ul><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><h3 id="算法实现：-2"><a href="#算法实现：-2" class="headerlink" title="算法实现："></a>算法实现：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellInsert</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> dk)</span></span>&#123;</span><br><span class="line"><span class="comment">//对顺序表L做一趟增量为dk的希尔插入排序</span></span><br><span class="line"><span class="keyword">for</span> (i=dk+<span class="number">1</span>;i&lt;=L.length;++i)</span><br><span class="line"><span class="keyword">if</span> (L.r[i].key&lt;L.r[i-dk].key)&#123;</span><br><span class="line">L.r[<span class="number">0</span>]=L.r[i];</span><br><span class="line"><span class="keyword">for</span> (j=i-dk;j&gt;<span class="number">0</span>&amp;&amp;L.r[<span class="number">0</span>].key&lt;L.r[j].key;j-=dk)</span><br><span class="line">L.r[j+dk]=L.r[j];</span><br><span class="line">L.r[j+dk]=L.r[<span class="number">0</span>];</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> dt[],<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="comment">//按增量序列dt[0,t-1]对顺序表L作t趟希尔排序</span></span><br><span class="line"><span class="keyword">for</span> (k=<span class="number">0</span>;k&lt;t;++k)</span><br><span class="line">ShellInsert(L,dt[k]); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="性能分析：-2"><a href="#性能分析：-2" class="headerlink" title="性能分析："></a>性能分析：</h3><ul><li>时间复杂度大致范围是$O(n^{1.25})-O(1.6n^{1.25})$</li><li>空间复杂度为$O(1)$</li><li>适用于初始记录无序，n较大的情况，<strong>不稳定</strong>排序</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;写在前面的话：&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先，这次的博客发表于早上1:27，算是熬夜了吧，其实这次的文章是之前挖的坑，但是中间又是隔了好几天，才发表出来，又凸显出自己的效率问题。其主要原因即是因为周末两天又自己荒废掉，而我之前想到一个对自己的&lt;strong&gt;惩罚措施&lt;/strong&gt;，就是熬夜学习，既为了让自己印象深刻，又希望能够稍微对自己内心的愧疚有些弥补，原本惩罚是应该放于昨天的，可是昨天熬到12点的时候就完全不行了，真的可以说是&lt;strong&gt;心力交瘁&lt;/strong&gt;，所以就睡下了，而今天就来接受这次的惩罚吧。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>平衡二叉树</title>
    <link href="http://yoursite.com/2017/06/16/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2017/06/16/平衡二叉树/</id>
    <published>2017-06-16T14:30:00.000Z</published>
    <updated>2018-06-05T11:27:39.167Z</updated>
    
    <content type="html"><![CDATA[<p>在<strong>二叉排序树</strong>中，对其查找性能进行分析时，其<strong>平均查找长度</strong>和二叉树的形态有关，而它的形态取决于其数据集。<br><strong>最好：</strong> $O(log_2n)$  (形态均匀，结构合理)<br><strong>最坏：</strong> $O(n)$  (数据呈有序排列)</p><a id="more"></a><p>数据集(24,37,55,12,40)，对应的两种情形分别如下：<br><img src="http://opznmu7n5.bkt.clouddn.com/post11_1.png" alt=""></p><p><strong>平衡二叉树（AVL树）</strong>即是为了提高二叉排序树的查找效率，尽量让二叉树的形状均衡。</p><p>平衡二叉树或者是空树，或者是具有以下特征的二叉排序树：</p><ol><li>左子树和右子树的深度之差的绝对值不超过1</li><li>左子树和右子树也是平衡二叉树</li></ol><p><strong>平衡因子：</strong>该结点左子树和右子树的高度差</p><p>问题的关键在于如何将二叉排序树调整为平衡二叉树。</p><p><strong>步骤：</strong>插入结点时，首先按照二叉排序树处理，若插入结点后破坏了平衡二叉树的特性，需对平衡二叉树进行调整。<br><strong>调整方法</strong>为：找到离插入结点最近且平衡因子绝对值超过1的祖先结点，以该结点为根的子树称为<strong>最小不平衡子树</strong>，可将重新平衡的范围局限于这棵子树。调整的过程称为<strong>平衡旋转</strong>。</p><p>一般有以下几种情况：</p><ul><li><strong>LL平衡旋转：</strong>若在A的左子树的左子树上插入结点，使A的平衡因子从1增加至2，需要进行一次顺时针旋转。<br><img src="http://opznmu7n5.bkt.clouddn.com/post11_2.jpg" alt=""></li><li><strong>RR平衡旋转：</strong>若在A的右子树的右子树上插入结点，使A的平衡因子从-1增加至-2，需要进行一次逆时针旋转。<br><img src="http://opznmu7n5.bkt.clouddn.com/post11_5.jpg" alt=""></li><li><strong>LR平衡旋转：</strong>若在A的左子树的右子树上插入结点，使A的平衡因子从1增加至2，需要先进行逆时针旋转，再顺时针旋转。<br><img src="http://opznmu7n5.bkt.clouddn.com/post11_3.jpg" alt=""></li><li><strong>RL平衡旋转：</strong>若在A的右子树的左子树上插入结点，使A的平衡因子从-1增加至-2，需要先进行顺时针旋转，再逆时针旋转。<br><img src="http://opznmu7n5.bkt.clouddn.com/post11_4.jpg" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;strong&gt;二叉排序树&lt;/strong&gt;中，对其查找性能进行分析时，其&lt;strong&gt;平均查找长度&lt;/strong&gt;和二叉树的形态有关，而它的形态取决于其数据集。&lt;br&gt;&lt;strong&gt;最好：&lt;/strong&gt; $O(log_2n)$  (形态均匀，结构合理)&lt;br&gt;&lt;strong&gt;最坏：&lt;/strong&gt; $O(n)$  (数据呈有序排列)&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
      <category term="查找" scheme="http://yoursite.com/tags/%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>二叉排序树</title>
    <link href="http://yoursite.com/2017/06/16/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/"/>
    <id>http://yoursite.com/2017/06/16/二叉排序树/</id>
    <published>2017-06-15T16:08:00.000Z</published>
    <updated>2018-05-05T15:03:45.734Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>说在前面的话</strong></p></blockquote><p>话说，平时自己也没怎么熬过夜，现在已经凌晨了，不过我还是不想睡，此刻想到最多的词汇就是<strong>不够、不够、不够</strong>，唉:-(，我也想多学会儿啊，只是总感觉什么都不够，时间不够，精力也不够，都说不要在晚上给自己定任何目标，可毕竟一个人只有在晚上夜深人静的时候，大脑才是最清醒的，更加清楚自己想要什么。期末考试临近，明天英语六级考试，最近又得忙着搞<strong>Java课程设计</strong>和<strong>计算机网络课程设计</strong>，曾经定下的目标又沦为空话，一次次地拖延，一次次地荒废，到现在依旧是什么都不会，终离目标越来越远。今年暑假不会待在学校培训学习了（一想起去年暑假自信满满地留在学校培训，却被自己荒废掉…），而是有些无奈地要去打暑假工，暑假过后，彼此之间的实力差距会更大，想到这里心里就不是个滋味，机遇摆在你面前，可是你却抓不住。这学期还剩两周时间，而且已经没课了，我近期的目标即是希望自己能够抓紧这段时间，保持一个平稳的心，继续前进，尽自己最大可能去做更多需要做的事情，只希望能够给自己的心灵一丝慰藉，让我看到自己从未放弃挣扎。而在这其中呢，记录技术学习博客就是很大的一方面。</p><a id="more"></a><p>今天呢，就在这里挖个坑，尽快将树表查找知识完善，晚安！</p><p>早上起来之后开始补坑…</p><p>关于本节树表内容，将涉及到几类特殊的二叉树形式，包括<strong>二叉排序树、平衡二叉树、B-树和B+树</strong>，线性表的查找更适用于<strong>静态查找表</strong>，而树表的查找更适用于<strong>动态查找表</strong>。</p><h1 id="二叉排序树（二叉查找树）"><a href="#二叉排序树（二叉查找树）" class="headerlink" title="二叉排序树（二叉查找树）"></a>二叉排序树（二叉查找树）</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>二叉排序树或者是空树，或者是满足下列性质的二叉树：</p><ol><li>若其左子树非空，则左子树上所有结点的值均小于根结点的值</li><li>若其右子树非空，则右子树上所有结点的值均大于根结点的值</li><li>其左右子树又各是一棵二叉排序树</li></ol><p>中序遍历一棵二叉排序树可以得到一个结点值递增的有序序列。</p><p>在对二叉树进行操作的时候，使用<strong>二叉链表</strong>作为存储结构，下面给出了<em>二叉排序树的二叉链表存储表示</em>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">Keytype key;<span class="comment">//关键字项</span></span><br><span class="line">InfoTypeotherinfo;<span class="comment">//其他数据项 </span></span><br><span class="line">&#125;ElemType; <span class="comment">//每个结点的数据域的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BSTNode</span>&#123;</span></span><br><span class="line">ElemType data;<span class="comment">//每个结点的数据域包括关键字项和其他数据项</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BSTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span><span class="comment">//左右孩子指针 </span></span><br><span class="line">&#125;BSTNode,*BSTree;</span><br></pre></td></tr></table></figure><h2 id="查找算法："><a href="#查找算法：" class="headerlink" title="查找算法："></a>查找算法：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BSTree <span class="title">SearchBST</span><span class="params">(BSTree T,KeyType key)</span></span>&#123;</span><br><span class="line"><span class="comment">//在根指针T所指二叉排序树中递归地查找某关键字等于key的数据元素</span></span><br><span class="line"><span class="comment">//若查找成功，则返回指向该数据元素结点的指针，否则返回空指针 </span></span><br><span class="line"><span class="keyword">if</span> ((!T)||key==T-&gt;data.key)</span><br><span class="line"><span class="keyword">return</span> T; <span class="comment">//查找结束</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key&lt;T-&gt;data.key)</span><br><span class="line"><span class="keyword">return</span> SearchBST(T-&gt;lchild,key);<span class="comment">//在左子树中继续查找</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> SearchBST(T-&gt;rchild,key);<span class="comment">//在右子树中继续查找 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在二叉排序树上查找其关键字等于给定值的过程，恰好是走了一条从根结点到该结点的路径的过程，和给定值比较的关键字个数等于路径长度加1（或结点所在层次数）。</li><li>对于需要经常进行插入、删除和查找运算的表，采用二叉排序树比较好。</li></ul><h2 id="插入算法："><a href="#插入算法：" class="headerlink" title="插入算法："></a>插入算法：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertBST</span><span class="params">(BSTree &amp;T,ElemType e)</span></span>&#123;</span><br><span class="line"><span class="comment">//当二叉排序树T中不存在关键字等于e.key的数据元素时，则插入该元素</span></span><br><span class="line"><span class="keyword">if</span> (!T)&#123;</span><br><span class="line"><span class="comment">//T为空，找到插入位置，递归结束</span></span><br><span class="line">BSTree S=<span class="keyword">new</span> BSTNode;<span class="comment">//生成新结点*S</span></span><br><span class="line">S-&gt;data=e;<span class="comment">//数据域置为e</span></span><br><span class="line">S-&gt;lchild=S-&gt;rchild=<span class="literal">NULL</span>;<span class="comment">//作为叶子结点</span></span><br><span class="line">T=S;<span class="comment">//把新结点*S链接到已找到的插入位置 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e.key&lt;T-&gt;data.key)</span><br><span class="line">InsertBST(T-&gt;lchild,e);<span class="comment">//将*S插入左子树</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e.key&gt;T-&gt;data.key)</span><br><span class="line">InsertBST(T-&gt;rchild,e);<span class="comment">//将*S插入右子树 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成算法："><a href="#生成算法：" class="headerlink" title="生成算法："></a>生成算法：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBST</span><span class="params">(BSTree &amp;T)</span></span>&#123;</span><br><span class="line"><span class="comment">//依次读入一个关键字为key的结点，将此结点插入二叉排序树T中</span></span><br><span class="line">T=<span class="literal">NULL</span>;<span class="comment">//将二叉排序树T初始化为空树</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;e;</span><br><span class="line"><span class="keyword">while</span> (e.key!=ENDFLAG)&#123;<span class="comment">//ENDFLAG为自定义常量，作为输入结束标志 </span></span><br><span class="line">InsertBST(T,e);<span class="comment">//调用插入算法，将此结点插入到二叉排序树T中 </span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;e.key; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除操作："><a href="#删除操作：" class="headerlink" title="删除操作："></a>删除操作：</h2><p>被删除的结点可能是二叉排序树中的任何结点，删除结点后，要根据其位置不同修改其双亲结点及相关结点的指针，以保持二叉排序树的特性。</p><p>删除的结点有以下几种情况：</p><ol><li>被删除的结点是叶子，则将其双亲结点中相应指针域的值改为“空”。</li><li>被删除的结点只有左子树或者只有右子树，则将其双亲结点的相应指针域的值改为“指向被删除结点的左子树或右子树”。</li><li>被删除的结点既有左子树，也有右子树，则以其前驱替代之，然后再删除该前驱结点。</li></ol><h3 id="删除算法："><a href="#删除算法：" class="headerlink" title="删除算法："></a>删除算法：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteBST</span><span class="params">(BSTree &amp;T,KeyType key)</span></span>&#123;</span><br><span class="line"><span class="comment">//从二叉排序树T中删除关键字等于key的结点</span></span><br><span class="line">p=T,f=<span class="literal">NULL</span>;<span class="comment">//初始化</span></span><br><span class="line"><span class="comment">/*------------下面的while循环从根开始查找关键字等于key的结点*P----------*/</span></span><br><span class="line"><span class="keyword">while</span> (p)&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data.key==key)<span class="keyword">break</span>;<span class="comment">//找到关键字等于key的结点*p，结束循环 </span></span><br><span class="line">f=p;<span class="comment">//*f为*p的双亲结点</span></span><br><span class="line"><span class="keyword">if</span> (p-&gt;data.key&gt;key)p=p-&gt;lchild;<span class="comment">//在*p的左子树中继续查找</span></span><br><span class="line"><span class="keyword">else</span> p=p-&gt;rchild;<span class="comment">//在*p的右子树上继续查找 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span> (!p)<span class="keyword">return</span>;<span class="comment">//如果找不到被删结点则返回</span></span><br><span class="line"><span class="comment">/*-----------考虑实现p所指子树内部的处理：*P左右子树均不空、无右子树、无左子树-------*/</span></span><br><span class="line">q=p;<span class="comment">//将被删结点p地址保存在q中</span></span><br><span class="line"><span class="comment">//被删结点左右子树都不空</span></span><br><span class="line"><span class="keyword">if</span> ((p-&gt;lchild)&amp;&amp;(p-&gt;rchild)) &#123;</span><br><span class="line">s=p-&gt;lchild;</span><br><span class="line"><span class="keyword">while</span> (s-&gt;rchild)&#123;</span><br><span class="line"><span class="comment">//在*p的左子树中继续查找其前驱结点，即最右下结点</span></span><br><span class="line">q=s;</span><br><span class="line">s=s-&gt;rchild; </span><br><span class="line">&#125;</span><br><span class="line">p-&gt;data=s-&gt;data;<span class="comment">//s指向被删结点的前驱</span></span><br><span class="line"><span class="keyword">if</span> (q!=p)<span class="comment">//用于判断程序是否执行了上面的while循环</span></span><br><span class="line">q-&gt;rchild=s-&gt;lchild;<span class="comment">//程序执行了while循环，需要重接*q的右子树</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">q-&gt;lchild=s-&gt;lchild;<span class="comment">//未执行while循环，需要重接*p的左子树</span></span><br><span class="line"><span class="keyword">delete</span> s;<span class="comment">//删除前驱结点s</span></span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//被删结点*p无右子树</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!p-&gt;rchild)</span><br><span class="line">p=p-&gt;lchild;<span class="comment">//重接左子树 </span></span><br><span class="line"><span class="comment">//被删结点*p无左子树 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!p-&gt;lchild) </span><br><span class="line">p=p-&gt;rchilid;<span class="comment">//重接右子树 </span></span><br><span class="line"><span class="comment">/*--------------将p所指的子树挂接到期双亲结点*f相应的位置--------------*/</span></span><br><span class="line"><span class="keyword">if</span> (!f)T=p;<span class="comment">//被删结点为根结点</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (q==f-&gt;lchild)f-&gt;lchild=p;<span class="comment">//挂接到*f的左子树位置</span></span><br><span class="line"><span class="keyword">else</span> f-&gt;rchild=p;<span class="comment">//挂接到*f的右子树位置</span></span><br><span class="line"><span class="keyword">delete</span> q; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说在前面的话&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;话说，平时自己也没怎么熬过夜，现在已经凌晨了，不过我还是不想睡，此刻想到最多的词汇就是&lt;strong&gt;不够、不够、不够&lt;/strong&gt;，唉:-(，我也想多学会儿啊，只是总感觉什么都不够，时间不够，精力也不够，都说不要在晚上给自己定任何目标，可毕竟一个人只有在晚上夜深人静的时候，大脑才是最清醒的，更加清楚自己想要什么。期末考试临近，明天英语六级考试，最近又得忙着搞&lt;strong&gt;Java课程设计&lt;/strong&gt;和&lt;strong&gt;计算机网络课程设计&lt;/strong&gt;，曾经定下的目标又沦为空话，一次次地拖延，一次次地荒废，到现在依旧是什么都不会，终离目标越来越远。今年暑假不会待在学校培训学习了（一想起去年暑假自信满满地留在学校培训，却被自己荒废掉…），而是有些无奈地要去打暑假工，暑假过后，彼此之间的实力差距会更大，想到这里心里就不是个滋味，机遇摆在你面前，可是你却抓不住。这学期还剩两周时间，而且已经没课了，我近期的目标即是希望自己能够抓紧这段时间，保持一个平稳的心，继续前进，尽自己最大可能去做更多需要做的事情，只希望能够给自己的心灵一丝慰藉，让我看到自己从未放弃挣扎。而在这其中呢，记录技术学习博客就是很大的一方面。&lt;/p&gt;
    
    </summary>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
      <category term="查找" scheme="http://yoursite.com/tags/%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>线性表的查找</title>
    <link href="http://yoursite.com/2017/06/10/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <id>http://yoursite.com/2017/06/10/线性表的查找/</id>
    <published>2017-06-10T03:20:00.000Z</published>
    <updated>2018-05-05T15:02:05.246Z</updated>
    
    <content type="html"><![CDATA[<p>查找运算是非常常见的，面对一些数据量很大的实时系统，如订票系统、互联网上的信息检索系统等，查找效率非常重要。接下来我将针对查找运算，讨论何时采用何种数据结构，使用什么样的方法，并通过对它们的效率进行分析来比较各种算法在不同条件下的优劣。</p><a id="more"></a><h1 id="查找的基本概念"><a href="#查找的基本概念" class="headerlink" title="查找的基本概念"></a>查找的基本概念</h1><ul><li><strong>查找表：</strong>由同一类型的数据元素（或记录）构成的集合</li><li><strong>静态查找表：</strong>对查找表没有修改操作</li><li><strong>动态查找表：</strong>对查找表具有修改操作</li><li><strong>关键字：</strong>记录中某个数据项的值，可用来识别一个记录</li><li><strong>主关键字：</strong>唯一标识数据元素</li><li><strong>次关键字：</strong>可以标识若干个数据元素</li><li><strong>查找算法的评价指标：</strong><br>关键字的平均比较次数，也称<strong>平均搜索长度ASL(Average Search Length)</strong>。<br>$$ASL=\sum_{i=1}^{n}p_ic_i$$<br>  <strong>n:</strong>记录的个数<br>  <strong>$p_i$:</strong>查找第i个记录的概率（通常认为pi=1/n）<br>  <strong>$c_i$:</strong>找到第i个记录所需的比较次数</li></ul><h1 id="线性表的查找"><a href="#线性表的查找" class="headerlink" title="线性表的查找"></a>线性表的查找</h1><h2 id="顺序查找（线性查找）"><a href="#顺序查找（线性查找）" class="headerlink" title="顺序查找（线性查找）"></a>顺序查找（线性查找）</h2><p><strong>应用范围：</strong>顺序表或线性链表表示的静态查找表，表内元素之间无序</p><p>数据元素类型定义：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">Keytype key;        <span class="comment">//关键字域</span></span><br><span class="line">InfoType otherinfo;<span class="comment">//其他域 </span></span><br><span class="line">&#125;ElemType;</span><br></pre></td></tr></table></figure></p><p>顺序表定义：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType *R;<span class="comment">//存储空间基地址</span></span><br><span class="line"><span class="keyword">int</span> length;<span class="comment">//当前长度 </span></span><br><span class="line">&#125;SSTable;</span><br></pre></td></tr></table></figure></p><h3 id="顺序查找算法："><a href="#顺序查找算法：" class="headerlink" title="顺序查找算法："></a>顺序查找算法：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search_Seq</span><span class="params">(SSTable ST,KeyType key)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (i=ST.length;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line"><span class="keyword">if</span> (ST.R[i].key==key)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该算法在查找过程中每步都要检测整个表是否查找完毕（即是否i&gt;=1），可以对其稍加改进，把待查关键字key存入表头（哨兵），从后向前逐个比较。</p><h3 id="顺序查找算法（改进）："><a href="#顺序查找算法（改进）：" class="headerlink" title="顺序查找算法（改进）："></a>顺序查找算法（改进）：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search_Seq</span><span class="params">(SSTable ST,KeyType key)</span></span>&#123;</span><br><span class="line">ST.R[<span class="number">0</span>].key=key;<span class="comment">//哨兵</span></span><br><span class="line"><span class="keyword">for</span>(i=ST.length;ST.R[i].key!=key;--i);<span class="comment">//空循环，直至找到关键字退出循环</span></span><br><span class="line"><span class="keyword">return</span> i;<span class="comment">//返回找到的关键字i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="性能分析："><a href="#性能分析：" class="headerlink" title="性能分析："></a>性能分析：</h3><ul><li><strong>空间复杂度：</strong>一个辅助空间</li><li><strong>时间复杂度：</strong>设表中各记录查找概率相等，<br><strong>a:</strong>查找成功时的平均查找长度<br>$$ASL=\sum_{i=1}^{n}p_ic_i=(1+2+…+n)/n=(n+1)/2$$<br><strong>b:</strong>查找不成功时的平均查找长度为<strong>n+1</strong>。</li></ul><h3 id="算法特点："><a href="#算法特点：" class="headerlink" title="算法特点："></a>算法特点：</h3><ul><li>算法简单，对表结构无任何要求（顺序和链式），但是n很大时查找效率较低，不宜使用此类算法。</li><li>改进措施：非等概率查找时，可按照查找概率进行排序</li></ul><h2 id="折半查找（二分查找）"><a href="#折半查找（二分查找）" class="headerlink" title="折半查找（二分查找）"></a>折半查找（二分查找）</h2><p><strong>应用范围：</strong>要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。</p><h3 id="折半查找算法（非递归）："><a href="#折半查找算法（非递归）：" class="headerlink" title="折半查找算法（非递归）："></a>折半查找算法（非递归）：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search_Bin</span><span class="params">(SSTable ST,KeyType key)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> low=<span class="number">1</span>,high=ST.length;<span class="comment">//置查找区间初值</span></span><br><span class="line"><span class="keyword">while</span> (low&lt;=high)&#123;</span><br><span class="line">mid=(low+high)/<span class="number">2</span>;<span class="comment">//确定区间中值</span></span><br><span class="line"><span class="keyword">if</span> (key==ST.R[mid].key)</span><br><span class="line"><span class="keyword">return</span> mid;<span class="comment">//找到待查元素</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key&lt;ST.R[mid].key)</span><br><span class="line">high=mid<span class="number">-1</span>;<span class="comment">//缩小范围，继续在前一子表进行查找</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">low=mid+<span class="number">1</span>;<span class="comment">//缩小范围，继续在后一子表进行查找 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//表中不存在待查元素 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="折半查找算法（递归）："><a href="#折半查找算法（递归）：" class="headerlink" title="折半查找算法（递归）："></a>折半查找算法（递归）：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search_Bin</span><span class="params">(SSTable ST,KeyType key,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line"><span class="comment">//int low=1,high=ST.length;//外部主函数中定义 </span></span><br><span class="line"><span class="keyword">if</span> (low&gt;high)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//递归结束条件</span></span><br><span class="line">mid=(low+high)/<span class="number">2</span>;<span class="comment">//确定区间中值</span></span><br><span class="line"><span class="keyword">if</span> (key==ST.R[mid].key)</span><br><span class="line"><span class="keyword">return</span> mid;<span class="comment">//找到待查元素</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key&lt;ST.R[mid].key)</span><br><span class="line"><span class="keyword">return</span> Search_Bin(ST,key,low,mid<span class="number">-1</span>);<span class="comment">//缩小范围，继续在前一子表进行查找</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> Search_Bin(ST,key,mid+<span class="number">1</span>,high);<span class="comment">//缩小范围，继续在后一子表进行查找 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例：</strong>已知如下11个数据元素的有序表（关键字即为数据元素的值）（5,13,19,21,37,56,64,75,80,88,92），请给出查找关键字21和70的数据元素的查找过程。<br><img src="http://opznmu7n5.bkt.clouddn.com/post7_1.png" alt=""><br><img src="http://opznmu7n5.bkt.clouddn.com/post7_2.png" alt=""></p><h3 id="性能分析：-1"><a href="#性能分析：-1" class="headerlink" title="性能分析："></a>性能分析：</h3><p>折半查找可以用二叉树来描述，把当前查找区间的中间位置作为根，左子表和右子表分别作为根的左子树和右子树，由此得到的二叉树称为<strong>折半查找的判定树</strong>。<br><img src="http://opznmu7n5.bkt.clouddn.com/post7_3.png" alt=""></p><ul><li>若所有结点的空指针域设置为一个指向一个方形结点的指针，称方形结点为判定树的<strong>外部结点</strong>，圆形结点为<strong>内部结点</strong>。</li><li><p>假定每个元素的查找概率相等，由判定树可知，对该有序表进行折半查找的平均查找长度为<br>$$ASL=\frac{1}{11}<em>(1</em>1+2<em>2+4</em>3+4*4)=3$$</p></li><li><p>从判定树上可见，成功的折半查找恰好是走了一条从判定树的根到被查结点的路径，经历比较的关键字个数恰为该结点在树中的层次，最多不超过数的深度<strong>$log_2n+1$</strong>；查找不成功的过程就是走了一条从根结点到外部结点的路径d或d-1。</p></li><li><strong>时间复杂度</strong>为$O(log_2n)$</li></ul><h3 id="算法特点：-1"><a href="#算法特点：-1" class="headerlink" title="算法特点："></a>算法特点：</h3><ul><li>比较次数少，查找效率高</li><li>对表结构要求高，只能用于顺序存储的有序表，查找前需要先排序。</li><li>不适用于数据元素经常变动的线性表。</li></ul><h2 id="分块查找（索引顺序查找）"><a href="#分块查找（索引顺序查找）" class="headerlink" title="分块查找（索引顺序查找）"></a>分块查找（索引顺序查找）</h2><ul><li>性能介于<strong>顺序查找</strong>和<strong>折半查找</strong>之间。</li><li>需要为每个子表建立一个索引项，包括<strong>关键字项</strong>(其值为该字表内的最大关键字)和<strong>指针项</strong>(指示该字表的第一个记录在表中的位置)。</li><li>索引项组成的索引表按关键字有序，则确定块的查找可以用顺序查找，也可以用折半查找；而块中记录是任意排列的，只能用顺序查找。</li><li>如果线性表既要快速查找又经常动态变化，则可以采用分块查找。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;查找运算是非常常见的，面对一些数据量很大的实时系统，如订票系统、互联网上的信息检索系统等，查找效率非常重要。接下来我将针对查找运算，讨论何时采用何种数据结构，使用什么样的方法，并通过对它们的效率进行分析来比较各种算法在不同条件下的优劣。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="查找" scheme="http://yoursite.com/tags/%E6%9F%A5%E6%89%BE/"/>
    
      <category term="表" scheme="http://yoursite.com/tags/%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>端午节-思想总结</title>
    <link href="http://yoursite.com/2017/05/30/%E7%AB%AF%E5%8D%88%E8%8A%82-%E6%80%9D%E6%83%B3%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/05/30/端午节-思想总结/</id>
    <published>2017-05-30T03:11:00.000Z</published>
    <updated>2018-05-05T15:00:19.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><blockquote><p>欲望满足的瞬间，即是偿还的时刻<br>你不会找到路，除非你敢于迷路</p></blockquote><h1 id="生活总结："><a href="#生活总结：" class="headerlink" title="生活总结："></a>生活总结：</h1><p>从自己的<a href="https://ai-heng.github.io/2017/03/08/%E3%80%8E%E5%BC%80%E5%8D%9A%E5%95%A6%E3%80%8F%C2%B7%E8%87%B4%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/#more" target="_blank" rel="noopener">第一篇博客</a>中，可以看出一些我当时的想法，那时候是2017.03.08，我记得自己当时在日记里总结了很多，是对于新的一年里，自己的学习规划以及日常生活安排，挺满挺充实的。现在呢，是2017.05.29，我来大致报告一下自己目前的状态吧，以及和往昔自己的想法有什么不一样的地方。</p><a id="more"></a><p>那时候自己谈到了几个方面的内容，一方面，我从一些大牛的技术博客中发现<strong>记博客</strong>是一件比较有意义的事情，如果自己能够坚持下来的话，对于自己的专业学习以及自己的自制力都能有很大帮助，同时能够见证自己一步步地成长，还能像现在一样，时不时地进行一番思想归纳和总结，以帮助自己更好地前进。在一步步地摸索过程中呢，我当时通过<strong>GitHub Pages+jekyll</strong>搭建出了自己的博客首页面（那个首页效果链接即是自己的博客页面，不过模板已经被我改了），因为我当时很中意一个黑白简易风格的<a href="http://notes.iissnan.com/" target="_blank" rel="noopener">hexo模板</a>，所以在自己空闲的时候，又摸索着将其修改了一番，就成了现在的模样。</p><p>另外呢，那时候我还未接触这一学期的专业学习，结合那个<a href="http://lucida.me/blog/developer-reading-list/" target="_blank" rel="noopener">程序员必读书单</a>为自己制定了读书计划安排，我明白自己这么做的目的之一即是为了督促自己前进，因为这样至少有了一定的目标和方向，能够让自己有目的性得前进。说我这人<strong>思想上的巨人，行动上的侏儒</strong>，其实也真不能说是亏了自己，因为这四本书，我只有<strong>算法（第4版）</strong>当时从图书馆借来看了一章（如自己所想，专业书籍会有些难理解），<strong>JavaScript DOM编程艺术</strong>也被自己借了一次，不过我当时是想还是通过看视频学习JavaScript好了，可到现在我依旧是未学习JS。而且呢，我现在想法似乎又有些改变，下文我会具体展开描述。剩下的两本书呢，因为现在自己的专业学习中尚未学习到，所以我这学期不再做重点，毕竟，我连自己专业课程学习都尚未很好地搞定，更别提额外地收获了。</p><h1 id="学习规划："><a href="#学习规划：" class="headerlink" title="学习规划："></a>学习规划：</h1><p>这一学期，已经过了一大半，而我之前交代自己的任务和工作似乎都并未有什么进展，或许是因为我学得过于杂乱吧，最后还是没能掌握好其中一门。还剩下将近一个半月的时间就要暑假了，而我暑假也面临着<strong>打暑假工</strong>的情况，所以我这学期所剩时间已经不多，但是，我还是需要给自己日后的学习工作制定一个<strong>长期目标</strong>。</p><p>就目前来看，我需要在以下几个方面来充实完善自己。</p><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>虽然我从大二上学期已经开始有意识去学习PHP，而且当时还花了好长时间通过视频重新学习自己课堂上已经学过的<strong>网页设计</strong>（不过说实话，课堂上学到的真的没有让我学会怎么去做网页），这学期已经快要结束了，可是自己的水平依旧是处于原地，只是稍微多学了一点点<strong>数据库基本操作</strong>（这也是自己课堂上学过的，不过和<strong>网页设计</strong>一样，什么都没学会），那些<strong>laravel/yii/thinkPHP/MVC框架</strong>依旧是一窍不通，这不能说是可悲的一件事情。最初的自己希望在大二结束前，掌握这门语言，最起码有一项<strong>核心竞争力</strong>，不过现在看起来已经很难实现了。<br>因为这门语言，网上的视频教程比较多，而且我百度云盘里也保存了好多，所以学习这门课的主要途径依旧是通过视频，视频学习的特点是“代入感强，能够引导着我们一步步前进”，不过呢，有时候我会觉得自己思考的地方不够多，只是一味地跟着老师的节奏走，不过，能够专注地听老师讲解，也未免不是一件好事。</p><ul><li>有关PHP的后续学习呢，我决定是依照自己原先制定的规划，我已经在百度网盘中有关<strong>PHP学习</strong>方面的视频进行了排序，依照顺序耐心学习的话，我将会一步步掌握有关<strong>前端技术、MySQL、微信开发、thinkPHP、MVC框架、yii框架、Linux操作、laravel框架</strong>等知识，同时，关于PHP方面，我也有很多<strong>实战教程视频</strong>。说真的，想要学会这些东西真的是需要很长时间，我的时间不容浪费啊…</li></ul><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p>在自己大学期间，我希望自己掌握并精通的便是这<strong>PHP</strong>和<strong>C++</strong>这两门语言了，不求多，但求精。对于PHP来说，更多地会考验自己做网页、做应用的能力；而C++则会更看重自己的编程水平，会考验到自己的<strong>算法</strong>和<strong>编程能力</strong>，这两项结合起来，正是我所希望自己能够去掌握的一些能力。</p><p>我不知道是否是因为自己的学习能力有限，还是以为之前自己并未将编程放在心上，基础有些欠缺，亦或者是因为自己的学习方法有问题（例如从未预习过），我上课期间基本上就跟听天书一般，总是会听不懂了老师讲解的内容，更多地是课下再花时间去重新研读，C和C++我在课堂上都已经学过，可是我现在有时候连底层的一些基础都未掌握扎实，更别提深一步地去学习了。从前几篇博客中可以看到，我在有意识地去总结C++方面的知识点，或许呢，有时候自己也不必过于认真地去分析，只是呢，我习惯于将知识点写下来，复述一遍，在这个过程中，去思考它的一些运用与作用，去加深自己的理解。</p><ul><li>在日后学习中呢，我还是会一如既往地将知识点归纳整理成博客发表，而我呢，会参考不同的资料，来增加自己的认识和理解，就目前我手头资料，包括<strong>《C++开发实战》</strong>（里面有很多实例，可以提高自己的动手能力）、<strong>《C++从入门到精通》</strong>、<strong>《好学的C++》</strong>（原先的课程教材）、<strong>《新标准C++程序设计教程》</strong>（后来的课程教材）、以及<strong>菜鸟教程</strong>。结合这几本书，当我整理博客的时候能够对知识点有更充分的理解，能更好地完善自己的文章。</li><li>另外呢，我还希望自己在掌握C++知识点的同时能够不忘去<strong>牛客网</strong>刷题，那上面有很多面试题，C++方面有一个题库，而且还可以和别人进行讨论，是一个很好的平台，我希望自己能够理解那些习题。</li><li>自己对于一门语言的理解很少，只知道它的一些语法知识，而对于深领域的运用一窍不通，我还是希望自己没事儿的时候可以多去图书馆跑跑，多看一些C++相关的书籍，或许能够帮助自己提高对该领域的认识。</li></ul><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>我的学习进度真的很慢，而且课堂上也是在认真去听，可总是懵懵懂懂的，不能很好地理解知识点，这点让我很是无奈。</p><ul><li>我们有上机实验课，我觉得老师布置的实验题挺不错，如果自己能够将其充分理解、掌握并记录成博客的话，肯定会对自己有很大帮助。</li><li>其次，如果自己能够将课堂使用的教材吃透的话，可以再结合前面提到的<strong>算法（第4版）</strong>，吃透这两本书，那么我的<strong>算法</strong>和<strong>数据结构</strong>底基将会很牢固。</li></ul><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p>这学期我们的计算机网络是双语教学。</p><ul><li>教材是英文版的<strong>《计算机网络-自顶向下方法》</strong>，只是我看起来有些吃力，后来又从网上买来了中文版，还是一样，上课的时候容易听不懂，我会在课下再花费时间去看。想改掉这个弊端，只不过没找到很好的方法。</li><li>还有另外一本教材<strong>《计算机网络-谢希仁》</strong>口碑不错，我觉得可以从图书馆借来当做参考，对于计算机网路的学习就重点参考这两本教材。</li><li>计算机网络和PHP应该是有比较大的联系，因为PHP比较擅长做网页，避免不了会和计算机网络有接触，学好计网，对于自己的PHP学习应该是有益处的。</li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>学PHP的时候，会用到js，视频教程中会涉及到js方面的学习。</p><ul><li>目前来看，js是比较火的一门语言，用处很广泛，开源项目也很多，学习前端的过程中，js也是必须要掌握的。</li><li>PHP说到底是一门后台编程语言，它又会结合前端一起开发，所以会用到前端技能，我对于js的学习呢，可以借助PHP视频教程，同时我前面也提到过一本书<strong>《JavaScript DOM编程艺术》</strong>，以及<strong>廖雪峰的js教程</strong>来学习，也可以当做一种学习途径。</li></ul><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>目前，我身上依旧有着很多问题待解决，是我前进路上的障碍。</p><ul><li>这学期我很少去工作室，将自己的学习重心即放于上述分析的几个方面，只是进度很慢，而且没有充分理解掌握，让我很不爽。</li><li>我一直在用心去打底基，对于我们这一行，由于能力的不同，项目经验会有很大的差距，进进也建议我去参加比赛来历练自己，只是我不太喜欢打无准备之仗，我就是觉得以我现在的水平去比赛的话，并不能起到很大的作用，另一方面，的确是因为我底气不足，害怕拖别人后腿，对此我也一直很头疼，因为我一直不知道由于我的不自信，由于我的拘谨，我会错过多少成长的机遇…</li><li>可是，短时间内既然无法很好地改变，我希望的是自己能够做好手边事，把力所能及的事情做好，顺其自然发展。</li></ul><h1 id="日常生活规划"><a href="#日常生活规划" class="headerlink" title="日常生活规划"></a>日常生活规划</h1><p>我之前提及过，希望能够做时间的主人，充分享受这段自由的时光，去充实自己的生活。</p><ul><li>这学期呢，<strong>健身</strong>偏少，<strong>跑步</strong>还是有在坚持的，现在天气越来越热，频率变得低了很多。体重大致维持在110斤，我的目标是130斤，还有一段路要走。大学期间至少要完成一项目标啊！我耐力就这么不行么？还是要再接再厉，不要透支自己的身体。</li><li><strong>听音乐</strong>是我一直在做的一件事情，尤其是对于我这样一个不谈恋爱的<strong>单身狗</strong>，更经常去听歌吧，它已经成为自己生活中的一部分。</li><li>这一学期呢，因为手机便签的使用，我每天产生比较多的思想，但是大多数都是由于自己能力不足而产生的负面情绪，同时还因为我希望将更多的时间用于学习之上，所以<strong>记日记</strong>的频率低了一些，基本上都是逢周末去整理自己的思绪。</li><li><strong>电影</strong>也是一直在看，偶尔还会去电影院看上映的电影，刚开始的时候，看一部电影的过程中我会进行思考，看完之后会再花时间去写影评想法，不过最近迫于时间紧张，没再去写影评，只是在自己空闲时间去看上一两部电影。</li><li><strong>旅游</strong>呢？一个人旅游显得孤单，但是我又不谈恋爱，和室友去过<strong>方特</strong>一次，便没再多做旅游了，这也是自己难迈的一个坎儿，说到底，还是自己拘谨。</li><li><strong>逛知乎</strong>，自己曾希望花费较多的时间在知乎上，而我这一段时间也确实是逛了好长时间的知乎，只不过我发现它和自己刚接触知乎时有了不同的感受，尤其是看了<a href="https://zhuanlan.zhihu.com/p/27007557?utm_source=qq&amp;utm_medium=social" target="_blank" rel="noopener">这篇文章</a>之后，更加有感触，我觉得现在自己刷知乎和刷微博、刷朋友圈并未有太大差别，总是在上面看一些段子，而忘了知乎的根本是能够让我看到更大的世界，能够对于自己有疑惑的问题得到不同领域人的认识和理解。</li></ul><p>借用<a href="https://www.zhihu.com/people/cai-tong/answers" target="_blank" rel="noopener">采铜</a>的一句话：</p><blockquote><p>「知乎」属于什么半衰期？取决于你看知乎的方式。</p></blockquote><blockquote><ul><li>看半衰期长的答案</li><li>写半衰期长的答案</li></ul></blockquote><p>自己很惭愧，混知乎这么久了，没提过一个问题，没回答过一个问题，一直就是一个知乎小透明。我应该试着去想想这个问题。</p><ul><li>前面提到了几次<strong>恋爱</strong>的问题，虽然我一直没谈恋爱，但是自己又是个多愁善感之人，为感情这事也一直折腾了好久，我的初衷大致即是上述原因，希望去做一个<strong>自由、无约束</strong>的人，去做自己想做的事，而不用为感情之事繁琐，大学将近过半，自己错过了一个女孩，而现在仍然在徘徊中，这学期所剩时日已不多，初步打算即不希望自己再为恋爱分神了，顺其自然，好好学习，等到了大三，如果你还想谈的话，那我就不再拦着自己了。</li></ul><h1 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h1><blockquote><ul><li>如果有个女孩在你一无所有的时候，付出了她宝贵的青春，肯陪你一起吃苦，那么请你一定要拼尽全力去证明她的选择没错。</li><li>努力上进的人，生活不会亏待他。</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;欲望满足的瞬间，即是偿还的时刻&lt;br&gt;你不会找到路，除非你敢于迷路&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;生活总结：&quot;&gt;&lt;a href=&quot;#生活总结：&quot; class=&quot;headerlink&quot; title=&quot;生活总结：&quot;&gt;&lt;/a&gt;生活总结：&lt;/h1&gt;&lt;p&gt;从自己的&lt;a href=&quot;https://ai-heng.github.io/2017/03/08/%E3%80%8E%E5%BC%80%E5%8D%9A%E5%95%A6%E3%80%8F%C2%B7%E8%87%B4%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/#more&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;第一篇博客&lt;/a&gt;中，可以看出一些我当时的想法，那时候是2017.03.08，我记得自己当时在日记里总结了很多，是对于新的一年里，自己的学习规划以及日常生活安排，挺满挺充实的。现在呢，是2017.05.29，我来大致报告一下自己目前的状态吧，以及和往昔自己的想法有什么不一样的地方。&lt;/p&gt;
    
    </summary>
    
      <category term="心情随笔" scheme="http://yoursite.com/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="心语" scheme="http://yoursite.com/tags/%E5%BF%83%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>C++面向对象（二）</title>
    <link href="http://yoursite.com/2017/05/16/C++%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2017/05/16/C++面向对象（二）/</id>
    <published>2017-05-16T13:30:00.000Z</published>
    <updated>2018-05-05T14:59:43.913Z</updated>
    
    <content type="html"><![CDATA[<p>上一小节中，我谈到了面向对象方面的基础知识，而这里，我将继续向下逐步深入讲解。这一节里包含的大致内容有：</p><blockquote><ul><li>构造函数</li><li>复制构造函数</li><li>析构函数</li></ul></blockquote><a id="more"></a><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><ul><li>成员函数的一种，名字与类名相同，可以有参数，但不能有返回值（void也不行）</li><li>作用是对对象进行初始化，如给成员变量赋初值</li><li>如果定义类时没写构造函数，则编译器会生成一个默认的无参构造函数  </li><li>对象生成时构造函数自动被调用，对象一旦生成，就再也不能在其上执行构造函数</li></ul><p>一个类中可以有多个构造函数，参数个数或类型不同。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> real,imag;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    Complex (<span class="keyword">double</span> r);</span><br><span class="line">    Complex (<span class="keyword">double</span> r,<span class="keyword">double</span> i);</span><br><span class="line">    Complex (Complex c1,Complex c2);        <span class="comment">//定义了三个不同的构造函数</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Set</span> <span class="params">(<span class="keyword">double</span> r,<span class="keyword">double</span> i)</span></span>;           <span class="comment">//普通成员函数，与构造函数的不同点在于它有返回值</span></span><br><span class="line">&#125;;</span><br><span class="line">Complex::Complex(<span class="keyword">double</span> r,<span class="keyword">double</span> i):real(r),imag(i)     &#123;   &#125;       <span class="comment">//使用初始化列表来初始化字段，与下面形式函数所起到的效果相同</span></span><br><span class="line">Complex::Complex(<span class="keyword">double</span> r)      &#123;</span><br><span class="line">real=r;imag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Complex::Complex(Complex c1,Complex c2);    &#123;</span><br><span class="line">real=c1.real+c2.real;</span><br><span class="line">imag=c1.imag+c2.imag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">Complex c1(3),c2(1,0),c3(c1,c2);        </span><br><span class="line"><span class="comment">//定义了三个对象，根据其中不同的参数个数和类型会调用不同的构造函数</span></span><br><span class="line"><span class="comment">//最后调用的结果分别是c1=&#123;3,0&#125;,c2=&#123;1,0&#125;,c3=&#123;4,0&#125;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>构造函数在数组中的使用<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>   &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Test(<span class="keyword">int</span> n) &#123; &#125;<span class="comment">//(1)</span></span><br><span class="line">Test (<span class="keyword">int</span> n,<span class="keyword">int</span> m) &#123; &#125;<span class="comment">//(2)</span></span><br><span class="line">Test () &#123; &#125;<span class="comment">//(3)</span></span><br><span class="line">&#125;; </span><br><span class="line">Test array1[<span class="number">3</span>]=&#123;<span class="number">1</span>,Test(<span class="number">1</span>,<span class="number">2</span>)&#125;;           <span class="comment">//三个元素分别用（1）（2）（3）初始化</span></span><br><span class="line">Test array2[<span class="number">3</span>]=&#123;Test(<span class="number">2</span>,<span class="number">3</span>),Test(<span class="number">1</span>,<span class="number">2</span>),<span class="number">1</span>&#125;;<span class="comment">//三个元素分别用（2）（2）（1）初始化</span></span><br><span class="line">Test * pArray[<span class="number">3</span>]=&#123;<span class="keyword">new</span> Test(<span class="number">4</span>),<span class="keyword">new</span> Test(<span class="number">1</span>,<span class="number">2</span>)&#125;;<span class="comment">//指针有所不同，根据后面的初始化，在这里只生成了两个对象，*pArray[2]并未生成对象，*pArray[0],*pArray[1]分别用（1）（2）初始化</span></span><br></pre></td></tr></table></figure></p><h1 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a>复制构造函数</h1><ul><li>只有一个参数，即对同类对象的引用。</li><li>形如X::X(X&amp;)或X::X(const X &amp;),后者能以常量对象作为参数。</li><li>如果没有定义复制构造函数，那么编译器生成默认复制构造函数。默认的复制构造函数完成复制功能。</li></ul><p>如果构造函数和复制构造函数都未定义，则系统会生成<strong>默认无参构造函数</strong>和<strong>默认复制构造函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span>   &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> real,imag;</span><br><span class="line">&#125;;</span><br><span class="line">Complex c1;<span class="comment">//调用默认无参构造函数</span></span><br><span class="line"><span class="function">Complex <span class="title">c2</span><span class="params">(c1)</span></span>;<span class="comment">//  =&gt;Complex c2=c1.      调用默认复制构造函数，完成复制功能</span></span><br></pre></td></tr></table></figure><p>复制构造函数起作用的三种情况：</p><blockquote><ul><li>当用一个对象去初始化同类的另一个对象时：</li><li>如果某函数有一个参数是类A的对象，那么该函数被调用时，类A的复制构造函数将被调用。</li><li>如果函数的返回值是类A的对象时，则函数返回时，A的复制构造函数被调用</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line">Complex(<span class="keyword">int</span> n):v(n) &#123;&#125;</span><br><span class="line">Complex(<span class="keyword">const</span> Complex&amp;a) &#123;</span><br><span class="line">v=a.v;<span class="comment">//完成复制功能 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Copy constructor called"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function">Complex <span class="title">Func</span><span class="params">()</span> </span>&#123;<span class="comment">//该函数的返回值是Complex的对象，会调用复制构造函数 </span></span><br><span class="line"><span class="function">Complex <span class="title">a</span><span class="params">(<span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;Func().v&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该程序需注意一点，有些编译器（例如Dev C++）出于执行效率的考虑，编译的时候进行了优化，函数返回值对象不用复制构造函数初始化，所以和预期结果不符，但我们要明白这不符合C++语言的标准。</p><h1 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h1><ul><li>成员函数的一种，在前面加“~”，没有参数和返回值</li><li>一个类最多只有一个析构函数</li><li>对象消亡时，会自动被调用，在对象消亡前做善后工作，释放分配的空间等</li><li>定义类时没写析构函数，则编译器生成默认析构函数，默认析构函数不涉及释放用户申请的内存释放等清理工作</li></ul><p>下面这个实例揭示了<strong>构造函数、析构函数和变量的生存期</strong>问题<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Demo(<span class="keyword">int</span> i)&#123;</span><br><span class="line">id=i;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"id="</span>&lt;&lt;id&lt;&lt;<span class="string">" Constructed"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Demo()&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"id="</span>&lt;&lt;id&lt;&lt;<span class="string">" Destructed"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function">Demo <span class="title">d1</span><span class="params">(<span class="number">1</span>)</span></span>;<span class="comment">//全局变量，在进入main函数前就已经形成，首先进行初始化 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Func</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> Demo <span class="title">d2</span><span class="params">(<span class="number">2</span>)</span></span>;<span class="comment">//静态局部变量，它的消亡是在整个程序结束之时</span></span><br><span class="line"><span class="function">Demo <span class="title">d3</span><span class="params">(<span class="number">3</span>)</span></span>;<span class="comment">//局部变量 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Func"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">Demo <span class="title">d4</span><span class="params">(<span class="number">4</span>)</span></span>;<span class="comment">//局部变量 </span></span><br><span class="line">d4=<span class="number">6</span>;<span class="comment">//调用类型转换构造函数，定义一个临时对象来实现，转换完成后，需要析构掉临时对象 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"main"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">Demo <span class="title">d5</span><span class="params">(<span class="number">5</span>)</span></span>;<span class="comment">//d5对象有一个作用域(离对象最近的一对花括号内的范围就是它的作用域)，作用域也标志着它的生命周期，离开作用域后，对象就会消亡。 </span></span><br><span class="line">&#125;</span><br><span class="line">Func();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"main ends"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><strong>运行结果：</strong><br><img src="http://opznmu7n5.bkt.clouddn.com/c++basic2/1.png" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一小节中，我谈到了面向对象方面的基础知识，而这里，我将继续向下逐步深入讲解。这一节里包含的大致内容有：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;构造函数&lt;/li&gt;
&lt;li&gt;复制构造函数&lt;/li&gt;
&lt;li&gt;析构函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++基础编程题</title>
    <link href="http://yoursite.com/2017/05/15/C++%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    <id>http://yoursite.com/2017/05/15/C++基础编程题/</id>
    <published>2017-05-15T12:10:00.000Z</published>
    <updated>2018-05-05T14:58:46.651Z</updated>
    
    <content type="html"><![CDATA[<p><strong>算法</strong>是编程的核心，而在前期学习C++的过程中，我们都会去做一些最基础的算法编程题，包括<strong>智力题、图形题以及数学题</strong>等等，这些问题大多用不到比较高深的知识点和结构，主要考察我们将数学思想转化为算法编程实现的一种能力，在这一小节中，我总结了几个实例，用来加深自己对它的认识和理解。</p><a id="more"></a><h1 id="图形题"><a href="#图形题" class="headerlink" title="图形题"></a>图形题</h1><h2 id="等腰三角形"><a href="#等腰三角形" class="headerlink" title="等腰三角形"></a>等腰三角形</h2><ul><li><strong>要求：</strong></li></ul><p>输出打印等腰三角形</p><ul><li><strong>源代码实现：</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span>&#123;</span><br><span class="line"><span class="comment">//等腰三角形的输出方法</span></span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入三角形的层数："</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"等腰三角形的输出图形如下：\n"</span>;</span><br><span class="line">    <span class="comment">//判断输出的行数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)  &#123;</span><br><span class="line">    <span class="comment">//输出*时前面输出空格的个数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m-i;j++)     &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//输出*的个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=i*<span class="number">2</span><span class="number">-1</span>;k++)  &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"*"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>输出结果</strong></li></ul><p><img src="http://opznmu7n5.bkt.clouddn.com/c++basic1.png" alt=""></p><h2 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h2><ul><li><strong>要求：</strong></li></ul><p>打印输出九九乘法表</p><ul><li><strong>源代码实现</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span>&#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)   &#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)   &#123;  </span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">"*"</span>&lt;&lt;j&lt;&lt;<span class="string">"="</span>&lt;&lt;i*j&lt;&lt;<span class="string">"\t"</span>;   </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;   </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>输出结果</strong></li></ul><p><img src="http://opznmu7n5.bkt.clouddn.com/2.png" alt=""></p><h2 id="空心菱形"><a href="#空心菱形" class="headerlink" title="空心菱形"></a>空心菱形</h2><ul><li><strong>要求：</strong></li></ul><p>打印输出空心菱形</p><ul><li><strong>源代码实现</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k,n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="comment">//外层负责上金字塔层数 </span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)  &#123;</span><br><span class="line">        <span class="comment">//用于控制每层第一个*前需要打印的" "数 </span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=n-i;j++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="comment">//用于确定输出空格和*的位置 </span></span><br><span class="line">        <span class="keyword">for</span> (k=<span class="number">1</span>;k&lt;=<span class="number">2</span>*i<span class="number">-1</span>;k++)  &#123;   </span><br><span class="line">            <span class="keyword">if</span> (k==<span class="number">1</span>||k==<span class="number">2</span>*i<span class="number">-1</span>) </span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"*"</span>;</span><br><span class="line">            <span class="keyword">else</span>    </span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下面程序模仿上面的形式，相当于将上面的图形倒转 </span></span><br><span class="line">    <span class="comment">//除去第n层，下面的循环次数比上面少了一次（第n层已经被打印） </span></span><br><span class="line">    <span class="keyword">for</span> (i=n;i&gt;<span class="number">1</span>;i--)   &#123;</span><br><span class="line">        <span class="comment">//确定每一层第一个*前需要打印的" "数 </span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;=n-i;j++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="comment">//确定每一层需要输出空格和*的位置</span></span><br><span class="line">        <span class="keyword">for</span> (k=<span class="number">1</span>;k&lt;=<span class="number">2</span>*i<span class="number">-3</span>;k++)  &#123;</span><br><span class="line">            <span class="keyword">if</span> (k==<span class="number">1</span>||k==<span class="number">2</span>*i<span class="number">-3</span>)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"*"</span>;</span><br><span class="line">            <span class="keyword">else</span>    </span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>输出结果</strong></li></ul><p><img src="http://opznmu7n5.bkt.clouddn.com/c++basic3.png" alt=""></p><h1 id="智力题"><a href="#智力题" class="headerlink" title="智力题"></a>智力题</h1><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><p><strong>描述</strong>：第一项和第二项都是1，其后各项满足：$F_n=F_{n-1}+F_{n-2}$</p><h3 id="兔生幼子"><a href="#兔生幼子" class="headerlink" title="兔生幼子"></a>兔生幼子</h3><ul><li><strong>问题：</strong></li></ul><p>有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第3个月后每个月又生一对兔子，假如兔子都不死，问第9个月的兔子总数为多少？</p><ul><li><strong>思路：</strong></li></ul><p>根据题意，将每月的兔子总数列出，如下图</p><table><thead><tr><th style="text-align:center">月份</th><th style="text-align:center">一月</th><th style="text-align:center">二月</th><th style="text-align:center">三月</th><th style="text-align:center">四月</th><th style="text-align:center">五月</th><th style="text-align:center">六月</th><th style="text-align:center">七月</th><th style="text-align:center">八月</th><th style="text-align:center">九月</th></tr></thead><tbody><tr><td style="text-align:center">对数</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">5</td><td style="text-align:center">8</td><td style="text-align:center">13</td><td style="text-align:center">21</td><td style="text-align:center">34</td></tr></tbody></table><p>根据上图，满足<strong>斐波那契数列</strong>特点，可知，第九个月时，兔子总数是34对。</p><h3 id="源代码实现"><a href="#源代码实现" class="headerlink" title="源代码实现"></a>源代码实现</h3><ul><li><p><strong>解法一</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;    </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> f1=<span class="number">1</span>,f2=<span class="number">1</span>,n;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"第1个月有："</span>&lt;&lt;f1&lt;&lt;<span class="string">"对"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"第2个月有："</span>&lt;&lt;f2&lt;&lt;<span class="string">"对"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">for</span>(n=<span class="number">2</span>;n&lt;<span class="number">6</span>;n++)&#123;  </span><br><span class="line">        f1=f1+f2;  </span><br><span class="line">        f2=f1+f2;  <span class="comment">//每个月的对数都等于前两个月对数之和 </span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"第"</span>&lt;&lt;<span class="number">2</span>*n<span class="number">-1</span>&lt;&lt;<span class="string">"个月有："</span>&lt;&lt;f1&lt;&lt;<span class="string">"对"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"第"</span>&lt;&lt;<span class="number">2</span>*n&lt;&lt;<span class="string">"个月有："</span>&lt;&lt;f2&lt;&lt;<span class="string">"对"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    &#125;      </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解法二：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span>  </span>&#123;                </span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">1</span> || n==<span class="number">2</span>)   </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        <span class="keyword">return</span> fun(n<span class="number">-1</span>)+fun(n<span class="number">-2</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> month;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"你需要查询第几个月兔子数"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;month;  </span><br><span class="line">    fun(month);  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"第"</span>&lt;&lt;month&lt;&lt;<span class="string">"个月兔子数量为: "</span> &lt;&lt;fun(month)&lt;&lt;<span class="string">"对"</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="猴子吃桃"><a href="#猴子吃桃" class="headerlink" title="猴子吃桃"></a>猴子吃桃</h2><ul><li><strong>问题：</strong></li></ul><p>猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个，第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少桃子？</p><ul><li><strong>思路：</strong></li></ul><table><thead><tr><th style="text-align:center">天数</th><th style="text-align:center">第一天</th><th style="text-align:center">第二天</th><th style="text-align:center">第三天</th><th style="text-align:center">…</th><th style="text-align:center">第八天</th><th style="text-align:center">第九天</th></tr></thead><tbody><tr><td style="text-align:center">剩余桃子数</td><td style="text-align:center">x/2-1</td><td style="text-align:center">x/4-3/2</td><td style="text-align:center">x/8-7/4</td><td style="text-align:center">…</td><td style="text-align:center">$x_7/2-1$</td><td style="text-align:center">1</td></tr></tbody></table><p>根据题中规律，第n天，剩余桃子数$x_n=x_{n-1}/2-1$。<br>现已知第九天剩余1个桃子，向前回溯9天即可推断出第一天一共摘下的桃子数。</p><ul><li><strong>源代码实现</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> n1,n2=<span class="number">1</span>,i;  </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;  <span class="comment">//根据规律，需要向前回溯九天，即循环九次 </span></span><br><span class="line">        n1=(n2+<span class="number">1</span>)*<span class="number">2</span>;    <span class="comment">//上一天的剩余桃子数等于下一天剩余桃子数加一的2倍 </span></span><br><span class="line">        n2=n1;  </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;n2&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数学题"><a href="#数学题" class="headerlink" title="数学题"></a>数学题</h1><h2 id="最大公约数-最小公倍数"><a href="#最大公约数-最小公倍数" class="headerlink" title="最大公约数/最小公倍数"></a>最大公约数/最小公倍数</h2><ul><li><strong>问题：</strong></li></ul><p>求两数A、B的最大公约数和最小公倍数</p><ul><li><strong>思路：</strong></li></ul><blockquote><ul><li>求<strong>最大公约数</strong>时，利用<strong>欧几里得算法</strong>：<br>  如果B等于0，答案就是A；否则，答案就是gcf(B,A%B)。</li><li>求<strong>最小公倍数</strong>时：两数之积除于最大公约数</li></ul></blockquote><ul><li><strong>源代码实现：</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcf</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span>        </span>&#123;</span><br><span class="line"><span class="keyword">if</span>        (b==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> gcf(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>        </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;gcf(a,b)&lt;&lt;<span class="built_in">endl</span>;          <span class="comment">//求最大公约数</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a*b/gcf(a,b)&lt;&lt;<span class="built_in">endl</span>;       <span class="comment">//求最小公倍数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="水仙花问题"><a href="#水仙花问题" class="headerlink" title="水仙花问题"></a>水仙花问题</h2><ul><li><strong>描述：</strong></li></ul><p>“水仙花数”是指一个三位数，其各位数字立方和等于该数本身。</p><ul><li><strong>思路：</strong></li></ul><p>学会分解出一个数的各个数位。</p><ul><li><strong>源代码实现：</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n=<span class="number">100</span>;n&lt;<span class="number">1000</span>;n++)  &#123;</span><br><span class="line">        i=n/<span class="number">100</span>;        <span class="comment">//分解出百位数 </span></span><br><span class="line">        j=n/<span class="number">10</span>%<span class="number">10</span>;      <span class="comment">//分解出十位数 </span></span><br><span class="line">        k=n%<span class="number">10</span>;         <span class="comment">//分解出个位数 </span></span><br><span class="line">        <span class="keyword">if</span> (i*<span class="number">100</span>+j*<span class="number">10</span>+k==i*i*i+j*j*j+k*k*k)        <span class="comment">//判断成立条件 </span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="string">"\t"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;算法&lt;/strong&gt;是编程的核心，而在前期学习C++的过程中，我们都会去做一些最基础的算法编程题，包括&lt;strong&gt;智力题、图形题以及数学题&lt;/strong&gt;等等，这些问题大多用不到比较高深的知识点和结构，主要考察我们将数学思想转化为算法编程实现的一种能力，在这一小节中，我总结了几个实例，用来加深自己对它的认识和理解。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++面向对象（一）</title>
    <link href="http://yoursite.com/2017/05/13/C++%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/05/13/C++面向对象（一）/</id>
    <published>2017-05-13T02:00:00.000Z</published>
    <updated>2018-05-05T14:58:01.559Z</updated>
    
    <content type="html"><![CDATA[<p>学习过C++之后，我希望利用该系列文章去记录总结一番<strong>面向对象</strong>相关的知识点，记录自己的成长。（参考<a href="http://www.runoob.com/cplusplus/cpp-classes-objects.html" target="_blank" rel="noopener">菜鸟教程</a>）</p><p>这一小节里会介绍三方面的基础知识：</p><blockquote><p>C++类与对象<br>成员函数<br>访问修饰符</p></blockquote><a id="more"></a><h1 id="C-类与对象"><a href="#C-类与对象" class="headerlink" title="C++类与对象"></a>C++类与对象</h1><h2 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h2><blockquote><p>类是从问题中抽象出来的具有逻辑相关的数据和函数的集合体。</p></blockquote><p>类用于指定对象的形式，它包含了数据表示法和用于处理数据的方法。类中的数据和方法称为类的成员。函数在一个类中被称为类的成员。</p><p><img src="http://i2.muimg.com/588926/3fd3ade34f75bda4.png" alt=""></p><p>类定义是以关键字class 开头，后跟类的名称。类的主体是包含在一对花括号中。类定义后必须跟着一个分号或一个声明列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Box</span><br><span class="line">&#123;</span><br><span class="line">   public:</span><br><span class="line">      double length;   // 盒子的长度</span><br><span class="line">      double breadth;  // 盒子的宽度</span><br><span class="line">      double height;   // 盒子的高度</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="对象定义"><a href="#对象定义" class="headerlink" title="对象定义"></a>对象定义</h2><p>对象是根据类来创建的，类的对象的公共数据成员可以使用直接成员访问运算符 (.) 来访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Box Box1;          // 声明 Box1，类型为 Box</span><br><span class="line">Box Box2;          // 声明 Box2，类型为 Box</span><br></pre></td></tr></table></figure><h1 id="类成员函数"><a href="#类成员函数" class="headerlink" title="类成员函数"></a>类成员函数</h1><p>类的成员函数是指那些把定义和原型写在类定义内部的函数，就像类定义中的其他变量一样。类成员函数是类的一个成员，它可以操作类的任意对象，可以访问对象中的所有成员。<br>成员函数可以定义在类定义内部，或者单独使用范围解析运算符 :: 来定义。在类定义中定义的成员函数成为<strong>内联函数</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Box</span><br><span class="line">&#123;</span><br><span class="line">   public:</span><br><span class="line">      double length;         // 长度</span><br><span class="line">      double breadth;        // 宽度</span><br><span class="line">      double height;         // 高度</span><br><span class="line">      double getVolume(void);// 返回体积</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="类访问修饰符"><a href="#类访问修饰符" class="headerlink" title="类访问修饰符"></a>类访问修饰符</h1><p>关键字 <strong>public、private、protected</strong>称为访问修饰符。<br>一个类可以有多个 public、protected 或 private 标记区域。每个标记区域在下一个标记区域开始之前或者在遇到类主体结束右括号之前都是有效的。成员和类的默认访问修饰符是 private。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Base &#123;</span><br><span class="line">   public:  // 公有成员</span><br><span class="line">   protected:  // 保护成员</span><br><span class="line">   private:  // 私有成员</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>公有成员在程序中类的外部是可访问的。您可以不使用任何成员函数来设置和获取公有变量的值。</li><li>私有成员变量或函数在类的外部是不可访问的，甚至是不可查看的。只有类和友元函数可以访问私有成员。</li><li>保护成员变量或函数与私有成员十分相似，但有一点不同，保护成员在派生类（即子类）中是可访问的。<br>`<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1></li></ul><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><p>定义Box的长宽高，并求其体积。</p><h2 id="源代码实现："><a href="#源代码实现：" class="headerlink" title="源代码实现："></a>源代码实现：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Box</span><br><span class="line">&#123;</span><br><span class="line">private://变量设置为私有成员，可省略不写，默认private </span><br><span class="line">      double length;         // 长度</span><br><span class="line">      double breadth;        // 宽度</span><br><span class="line">      double height;         // 高度</span><br><span class="line"></span><br><span class="line">public:// 成员函数设置为公有成员 </span><br><span class="line">      void setLength( double len );</span><br><span class="line">      void setBreadth( double bre );</span><br><span class="line">      void setHeight( double hei );</span><br><span class="line">      double getVolume(void)&#123;//内联函数定义 </span><br><span class="line">    return length * breadth * height;</span><br><span class="line">  &#125;                  </span><br><span class="line">&#125;;</span><br><span class="line">// 普通成员函数定义</span><br><span class="line">void Box::setLength( double len ) </span><br><span class="line">&#123;</span><br><span class="line">    length = len;</span><br><span class="line">&#125;</span><br><span class="line">void Box::setBreadth( double bre )</span><br><span class="line">&#123;</span><br><span class="line">    breadth = bre;</span><br><span class="line">&#125;</span><br><span class="line">void Box::setHeight( double hei )</span><br><span class="line">&#123;</span><br><span class="line">    height = hei;</span><br><span class="line">&#125;</span><br><span class="line">// 程序的主函数</span><br><span class="line">int main( )</span><br><span class="line">&#123;</span><br><span class="line">   Box Box1;                // 创建Box对象Box1 </span><br><span class="line">   Box Box2;                // 创建Box对象Box1</span><br><span class="line">   double volume = 0.0;     // 用于存储体积</span><br><span class="line">   </span><br><span class="line">   //Box1.length=10.0;//error.length是private变量，在类的外部是不可访问的 </span><br><span class="line"> </span><br><span class="line">   // box 1 详述</span><br><span class="line">   Box1.setLength(6.0); </span><br><span class="line">   Box1.setBreadth(7.0); </span><br><span class="line">   Box1.setHeight(5.0);</span><br><span class="line">   // box 2 详述</span><br><span class="line">   Box2.setLength(12.0); </span><br><span class="line">   Box2.setBreadth(13.0); </span><br><span class="line">   Box2.setHeight(10.0);</span><br><span class="line">   // box 1 的体积</span><br><span class="line">   volume = Box1.getVolume();</span><br><span class="line">   cout &lt;&lt; &quot;Box1 的体积：&quot; &lt;&lt; volume &lt;&lt;endl;</span><br><span class="line">   // box 2 的体积</span><br><span class="line">   volume = Box2.getVolume();</span><br><span class="line">   cout &lt;&lt; &quot;Box2 的体积：&quot; &lt;&lt; volume &lt;&lt;endl;</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习过C++之后，我希望利用该系列文章去记录总结一番&lt;strong&gt;面向对象&lt;/strong&gt;相关的知识点，记录自己的成长。（参考&lt;a href=&quot;http://www.runoob.com/cplusplus/cpp-classes-objects.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;菜鸟教程&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;这一小节里会介绍三方面的基础知识：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C++类与对象&lt;br&gt;成员函数&lt;br&gt;访问修饰符&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>线性表</title>
    <link href="http://yoursite.com/2017/03/26/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>http://yoursite.com/2017/03/26/线性表/</id>
    <published>2017-03-26T02:40:00.000Z</published>
    <updated>2018-05-05T14:55:00.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h1><p>由n(n&gt;=0)个 数据特性相同的元素构成的有限序列称为线性表。<br>线性表中元素的个数n（n&gt;=0）定义为线性表的长度，n=0时称为空表。</p><a id="more"></a><h1 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h1><blockquote><p><strong>顺序表(线性表的顺序存储表示)</strong>:</p></blockquote><h2 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h2><p>用一组地址连续的存储单元依次存储线性表的数据元素。</p><h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><ul><li>逻辑上相邻的数据元素，其物理次序也是相邻的。</li><li>线性表的顺序存储结构是一种随机存取的存储结构。</li><li>由于数组类型也有随机存储的特性，因此，通常用数组来描述数据结构中的顺序存储结构。</li><li>顺序表的存储结构：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100<span class="comment">//顺序表可能达到的最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType *elem;<span class="comment">//存储空间的基地址</span></span><br><span class="line"><span class="keyword">int</span> length;<span class="comment">//当前长度</span></span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure><h2 id="顺序表中基本操作的实现："><a href="#顺序表中基本操作的实现：" class="headerlink" title="顺序表中基本操作的实现："></a>顺序表中基本操作的实现：</h2><h3 id="顺序表的初始化："><a href="#顺序表的初始化：" class="headerlink" title="顺序表的初始化："></a>顺序表的初始化：</h3><ul><li>要求：构造一个空的顺序表</li><li>设计：<br><strong>a:</strong>为顺序表L动态分配一个预定义大小的数组空间，使   elem 指向这段空间的基地址<br><strong>b:</strong>将表的当前长度设为0</li><li>源代码实现：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">InitList_Sq</span><span class="params">(SqList &amp;L)</span></span>&#123;</span><br><span class="line">L.elem=<span class="keyword">new</span> ElemType[MAXSIZE];<span class="comment">//为顺序表分配一个大小为MAXSIZE的数组空间</span></span><br><span class="line"><span class="keyword">if</span>(!L.elem)  <span class="built_in">exit</span>(OVERFLOW);<span class="comment">//存储分配失败</span></span><br><span class="line">L.length=<span class="number">0</span>;<span class="comment">//空表长度为0</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="取值："><a href="#取值：" class="headerlink" title="取值："></a>取值：</h3><ul><li>要求：根据指定的位置序号i,获取顺序表中第i 个顺序表中第i 个数据元素的值</li><li>设计：<br><strong>a:</strong>判断指定的位置序号i值是否合理（1&lt;=i&lt;=L.length）,若不合理，则返回ERROR<br><strong>b:</strong>若i值合理，则将第i个数据元素L.elem[i-1]赋给参数e,通过e返回第i个数据元素的值</li><li>源代码实现：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">GetElem</span> <span class="params">(SqList L,<span class="keyword">int</span> I,ElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">1</span>||i&gt;L.length) <span class="keyword">return</span> ERROR;<span class="comment">//判断i值是否合理，若不合理，返回error</span></span><br><span class="line">e=L.elem[i<span class="number">-1</span>];<span class="comment">//elem[i-1]单元存储第i个数据元素</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找："><a href="#查找：" class="headerlink" title="查找："></a>查找：</h3><ul><li>要求：根据指定的元素值e,查找顺序表中第1个与e相等的元素。若查找成功，返回该元素在表中的位置序号；若查找失败，则返回0</li><li>设计：<br><strong>a:</strong>从第一个元素起，依次和e相比较，若找到与e相等的元素L.elem[i],则返回该元素的序号i+1<br><strong>b:</strong>若查遍整个顺序表都没有找到，则查找失败，返回0</li><li>源代码实现：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem_Sq</span><span class="params">(SqList L,ElemType e)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)</span><br><span class="line"><span class="keyword">if</span>(L.elem[i]==e) <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入："><a href="#插入：" class="headerlink" title="插入："></a>插入：</h3><ul><li>要求：在表的第i个位置插入一个新的数据元素e</li><li>设计：<br><strong>a:</strong>判断插入位置i是否合法（i值的合法范围是1&lt;=i&lt;=n+1），若不合法则返回ERROR<br><strong>b:</strong>判断顺序表的存储空间是否已满，若满则返回ERROR<br><strong>c:</strong>将第n个至第i个位置的元素依次向后移动一个位置，空出第i个位置（i=n+1时无需移动）<br><strong>d:</strong>将要插入的新元素e放入第i个位置<br><strong>e:</strong>表长加1</li><li>源代码实现：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">ListInsert_Sq</span><span class="params">(SqList L,<span class="keyword">int</span> i,ElemType e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt;L.length+<span class="number">1</span>)<span class="keyword">return</span> ERROR;<span class="comment">//i值不合法</span></span><br><span class="line"><span class="keyword">if</span>(L.length==MAXSIZE)<span class="keyword">return</span> ERROR;<span class="comment">//当前存储空间已满</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=L.length<span class="number">-1</span>;j&gt;=i<span class="number">-1</span>;j--)</span><br><span class="line">L.elem[j+<span class="number">1</span>]=L.elem[j];<span class="comment">//插入位置及之后的元素后移</span></span><br><span class="line">L.elem[i<span class="number">-1</span>]=e;<span class="comment">//将新元素e放入第i个位置</span></span><br><span class="line">++L.length;<span class="comment">//表长增1</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除："><a href="#删除：" class="headerlink" title="删除："></a>删除：</h3><ul><li>要求：将表的第i个元素删去</li><li>设计：<br><strong>a:</strong>判断删除位置i是否合法（合法值为1&lt;=i&lt;=n）,若不合法，则返回ERROR<br><strong>b:</strong>将第i+1个至第n个的元素依次向前移动一个位置（i=n是无需移动）<br><strong>c:</strong>表长减1</li><li>源代码实现：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">ListDelete_Sq</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> i,ElemType &amp;e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt;L.length)<span class="keyword">return</span> ERROR;<span class="comment">//i值不合法</span></span><br><span class="line">e=L.elem[i<span class="number">-1</span>];<span class="comment">//将欲删除的元素保留在e中</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=L.length;j++)</span><br><span class="line">L.elem[j<span class="number">-1</span>]=L.elem[j];<span class="comment">//被删除元素之后的元素前移</span></span><br><span class="line">--L.length;<span class="comment">//表长减1</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="线性表操作实例："><a href="#线性表操作实例：" class="headerlink" title="线性表操作实例："></a>线性表操作实例：</h3></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;<span class="comment">//Status 是函数返回值类型，其值是函数结果状态代码。</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType; <span class="comment">//ElemType 为可定义的数据类型，此设为int类型</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100<span class="comment">//顺序表可能达到的最大长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">ElemType *elem;<span class="comment">//存储空间的基地址</span></span><br><span class="line"><span class="keyword">int</span> length;<span class="comment">//当前长度</span></span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitList_Sq</span><span class="params">(SqList &amp;L)</span></span>&#123;<span class="comment">//算法2.1 顺序表的初始化</span></span><br><span class="line"><span class="comment">//构造一个空的顺序表L</span></span><br><span class="line">L.elem=<span class="keyword">new</span> ElemType[MAXSIZE];<span class="comment">//为顺序表分配一个大小为MAXSIZE的数组空间</span></span><br><span class="line"><span class="keyword">if</span>(!L.elem)  <span class="built_in">exit</span>(OVERFLOW);<span class="comment">//存储分配失败</span></span><br><span class="line">L.length=<span class="number">0</span>;<span class="comment">//空表长度为0</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem_Sq</span><span class="params">(SqList L,ElemType e)</span></span>&#123;<span class="comment">//算法2.2 顺序表的查找</span></span><br><span class="line"><span class="comment">//顺序表的查找</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)</span><br><span class="line"><span class="keyword">if</span>(L.elem[i]==e) <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListInsert_Sq</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> i,ElemType e)</span></span>&#123;<span class="comment">//算法2.3 顺序表的插入</span></span><br><span class="line"><span class="comment">//在顺序表L中第i个位置之前插入新的元素e</span></span><br><span class="line"><span class="comment">//i值的合法范围是1&lt;=i&lt;=L.length+1</span></span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt;L.length+<span class="number">1</span>)<span class="keyword">return</span> ERROR;<span class="comment">//i值不合法</span></span><br><span class="line"><span class="keyword">if</span>(L.length==MAXSIZE)<span class="keyword">return</span> ERROR;<span class="comment">//当前存储空间已满</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=L.length<span class="number">-1</span>;j&gt;=i<span class="number">-1</span>;j--)</span><br><span class="line">L.elem[j+<span class="number">1</span>]=L.elem[j];<span class="comment">//插入位置及之后的元素后移</span></span><br><span class="line">L.elem[i<span class="number">-1</span>]=e;<span class="comment">//将新元素e放入第i个位置</span></span><br><span class="line">++L.length;<span class="comment">//表长增1</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListDelete_Sq</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> i,ElemType &amp;e)</span></span>&#123;<span class="comment">//算法2.4 顺序表的删除</span></span><br><span class="line"><span class="comment">//在顺序表L中删除第i个元素，并用e返回其值</span></span><br><span class="line"><span class="comment">//i值的合法范围是1&lt;=i&lt;=L.length</span></span><br><span class="line"><span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt;L.length)<span class="keyword">return</span> ERROR;<span class="comment">//i值不合法</span></span><br><span class="line">e=L.elem[i<span class="number">-1</span>];<span class="comment">//将欲删除的元素保留在e中</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=L.length;j++)</span><br><span class="line">L.elem[j<span class="number">-1</span>]=L.elem[j];<span class="comment">//被删除元素之后的元素前移</span></span><br><span class="line">--L.length;<span class="comment">//表长减1</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求线性表最大数</span></span><br><span class="line"><span class="function">Status <span class="title">MaxElem_Sq</span> <span class="params">(SqList L, ElemType Max)</span> </span>&#123;                   </span><br><span class="line"><span class="keyword">int</span> i;<span class="comment">//定义循环变量 </span></span><br><span class="line">Max= L.elem[<span class="number">0</span>];<span class="comment">//定义Max变量，并将数组内的第一个元素 赋给它 </span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i&lt;L.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (L.elem[i]&gt;Max)</span><br><span class="line">Max = L.elem[i];<span class="comment">//从第二个元素开始，将其与max进行比较，如果大于max，则将max赋给该元素 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SqList L;</span><br><span class="line"><span class="keyword">int</span> i,res,temp,a,b,c,e,choose,max,Max;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"1. 建立顺序表\n"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"2. 输入数据\n"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"3. 查找\n"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"4. 插入\n"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"5. 删除\n"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"6. 输出数据\n"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"7.求线性表最大数\n"</span>; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"0. 退出\n\n"</span>;</span><br><span class="line"></span><br><span class="line">choose=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(choose!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请选择:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;choose;</span><br><span class="line"><span class="keyword">switch</span>(choose)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">if</span>(InitList_Sq(L))<span class="comment">//创建顺序表</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"成功建立顺序表\n\n"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"顺序表建立失败\n\n"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//输入10个数</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入10个数:\n"</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;L.elem[i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"输入成功！"</span>; </span><br><span class="line">L.length=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//顺序表的查找</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入所要查找的数:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;e;<span class="comment">//输入e，代表所要查找的数值</span></span><br><span class="line">temp=LocateElem_Sq(L,e);</span><br><span class="line"><span class="keyword">if</span>(temp!=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;e&lt;&lt;<span class="string">" 是第 "</span>&lt;&lt;temp&lt;&lt;<span class="string">"个数.\n\n"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"查找失败！没有这样的数\n\n"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//顺序表的插入</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入两个数，分别代表插入的位置和插入数值:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;<span class="comment">//输入a和b，a代表插入的位置，b代表插入的数值</span></span><br><span class="line"><span class="keyword">if</span>(ListInsert_Sq(L,a,b))</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"插入成功.\n\n"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"I插入失败.\n\n"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:<span class="comment">//顺序表的删除</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入要删除的数的位置:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;c;<span class="comment">//输入c，代表要删除数的位置</span></span><br><span class="line"><span class="keyword">if</span>(ListDelete_Sq(L,c,res))</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"删除成功.\n被删除的数是:"</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"删除失败.\n\n"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:<span class="comment">//顺序表的输出</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"当前顺序表为:\n"</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;L.length;i++)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;L.elem[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"当前顺序表中的最大数为："</span>;</span><br><span class="line">max=MaxElem_Sq(L,Max);               <span class="comment">//函数调用</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; max;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>##单链表（线性表的链式存储结构）：</p></blockquote><h2 id="定义：-2"><a href="#定义：-2" class="headerlink" title="定义："></a>定义：</h2><p>用一组任意的存储单元存储线性表的数据元素。</p><h2 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h2><ul><li>存储直接后继存储位置的域称为指针域,存储数据元素信息的域成为数据域</li><li>指针域中存储的信息称作指针或链。</li><li>用单链表表示线性表时，数据元素之间的逻辑关系是由结点中的指针指示的。</li><li>单链表是非随机存取的存取结构</li><li>单链表的存储结构：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType data;<span class="comment">//结点的数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//结点的指针域</span></span><br><span class="line">&#125;LNode,*LinkList;<span class="comment">//LinkList为指向结构体LNode的指针类型</span></span><br></pre></td></tr></table></figure><h2 id="单链表基本操作的实现："><a href="#单链表基本操作的实现：" class="headerlink" title="单链表基本操作的实现："></a>单链表基本操作的实现：</h2><h3 id="初始化："><a href="#初始化：" class="headerlink" title="初始化："></a>初始化：</h3><ul><li>要求：构造一个空的单链表L</li><li>设计：<br><strong>a:</strong>生成新结点作为头结点，用头指针L指向头结点。<br><strong>b:</strong>头结点的指针域置空</li><li>源代码实现：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">InitList_L</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">L=<span class="keyword">new</span> LNode;<span class="comment">//生成新结点作为头结点，用头指针L指向头结点</span></span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>;<span class="comment">//头结点的指针域置空</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="取值：-1"><a href="#取值：-1" class="headerlink" title="取值："></a>取值：</h3><ul><li>要求：在带头结点的单链表L中查找第i个元素</li><li><p>设计：<br><strong>a:</strong>用指针p指向首元结点，用j做计数器初值赋为1<br><strong>b:</strong>从首元结点开始依次顺着链域next向下访问，只要指向当前结点的指针P不为空（NULL）,并且没有到达序号为i的结点，则循环执行以下操作：<br>  <strong>1)</strong> p指向下一个结点；<br> <strong>2)</strong> 计数器j相应加1.</p><p><strong>c:</strong>退出循环时，如果指针p为空，或者计数器j大于i,说明指定的序号i值不合法（i大于表长n或i小于等于0），取值失败返回ERROR；否则取值成功，此时j=i时，p所指的结点就是要找的第i个结点，用参数e保存当前结点的数据域，返回OK.</p></li><li>源代码实现：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">GetElem_L</span><span class="params">(LinkList L,<span class="keyword">int</span> i,ElemType &amp;e)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line">LNode *p;</span><br><span class="line">p=L-&gt;next;j=<span class="number">1</span>;<span class="comment">//初始化，p指向第一个结点，j为计数器</span></span><br><span class="line"><span class="keyword">while</span>(j&lt;i&amp;&amp;p)&#123;<span class="comment">//顺链域向后扫描，直到p指向第i个元素或p为空</span></span><br><span class="line">p=p-&gt;next;++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!p || j&gt;i)<span class="keyword">return</span> ERROR;<span class="comment">//第i个元素不存在</span></span><br><span class="line">e=p-&gt;data;<span class="comment">//取第i个元素</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表的按值查找："><a href="#单链表的按值查找：" class="headerlink" title="单链表的按值查找："></a>单链表的按值查找：</h3><ul><li>要求：在带头结点的单链表L中查找值为e的元素</li><li><p>设计：<br><strong>a:</strong>用指针p指向首元结点<br><strong>b:</strong>从首元结点开始依次顺着链域next向下查找，只要指向当前结点的指针p不为空，并且p所指结点的数据域不等于给定值e，则循环执行以下操作：p指向下一个结点。<br><strong>c:</strong>返回p.若查找成功，p此时即为结点的地址值，若查找失败，p的值即为NULL。</p></li><li><p>源代码实现：</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LNode *<span class="title">LocateElem_L</span><span class="params">(LinkList L,ElemType e)</span></span>&#123;</span><br><span class="line">LNode *p;</span><br><span class="line">p=L-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p&amp;&amp;p-&gt;data!=e)</span><br><span class="line">p=p-&gt;next;<span class="comment">//寻找满足条件的结点</span></span><br><span class="line"><span class="keyword">return</span> p;<span class="comment">//返回L中的值为e的数据元素的位置，查找失败返回NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入：-1"><a href="#插入：-1" class="headerlink" title="插入："></a>插入：</h3><ul><li>要求：在带头结点的单链表L中第i个位置之前插入元素e</li><li>设计：<br><strong>a:</strong>查找结点ai-1 ，并由指针p指向该结点<br><strong>b:</strong>生成一个新结点<em>s<br><strong>c:</strong>将新结点</em>s的数据域置为e<br><strong>d:</strong>将新结点<em>s的指针域指向结点ai<br><strong>e:</strong>将结点</em>p 的指针域指向新结点 *s</li><li>源代码实现：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">ListInsert_L</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> i,ElemType &amp;e)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line">LNode *p,*s;</span><br><span class="line">p=L;j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;p=p-&gt;next;++j;&#125;<span class="comment">//寻找第i-1个结点</span></span><br><span class="line"><span class="keyword">if</span>(!p||j&gt;i<span class="number">-1</span>)<span class="keyword">return</span> ERROR;<span class="comment">//i大于表长+1或者小于1</span></span><br><span class="line">s=<span class="keyword">new</span> LNode;<span class="comment">//生成新结点s</span></span><br><span class="line">s-&gt;data=e;<span class="comment">//将结点s的数据域置为e</span></span><br><span class="line">s-&gt;next=p-&gt;next;<span class="comment">//将结点s插入L中</span></span><br><span class="line">p-&gt;next=s;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除：-1"><a href="#删除：-1" class="headerlink" title="删除："></a>删除：</h3><ul><li>要求：在带头结点的单链表L中，删除第i个元素</li><li>设计：<br><strong>a:</strong>查找结点ai-1并由指针p指向该结点<br><strong>b:</strong>临时保存待删除结点ai的地址在q中，以备释放<br><strong>c:</strong>将结点*p 的指针域指向ai的直接后继结点<br><strong>d:</strong>释放结点ai的空间</li><li>源代码实现：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">ListDelete_L</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> i,ElemType &amp;e)</span></span>&#123;</span><br><span class="line">LNode *p,*q;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line">p=L;j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;next &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;p=p-&gt;next;++j;&#125;<span class="comment">//寻找第i-1个结点</span></span><br><span class="line"><span class="keyword">if</span>(!(p-&gt;next) || j&gt;i<span class="number">-1</span>)<span class="keyword">return</span> ERROR;<span class="comment">//i大于表长+1或者小于1</span></span><br><span class="line">q=p-&gt;next;<span class="comment">//临时保存被删结点的地址以备释放</span></span><br><span class="line">p-&gt;next=q-&gt;next;<span class="comment">//改变删除结点前驱结点的指针域</span></span><br><span class="line"><span class="keyword">delete</span> q;<span class="comment">//释放删除结点的空间</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前插法创建单链表："><a href="#前插法创建单链表：" class="headerlink" title="前插法创建单链表："></a>前插法创建单链表：</h3><ul><li>要求：逆位序输入n个元素的值，建立带表头结点的单链表L</li><li><p>设计：<br><strong>a:</strong>创建一个只有头结点的空链表<br><strong>b:</strong>根据待创建链表包括的元素个数n，循环n次执行以下操作：</p><p>　① 生成一个新结点<em>p<br>　② 输入元素值赋给新结点</em>p的数据域<br>　③ 将新结点*p插入到头结点之后　</p></li><li>源代码实现：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList_F</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">LNode *p;</span><br><span class="line">L=<span class="keyword">new</span> LNode;</span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>;<span class="comment">//先建立一个带头结点的空链表</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入 "</span>&lt;&lt;n&lt;&lt;<span class="string">" 个数:\n"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">0</span>;--i)&#123;</span><br><span class="line">p=<span class="keyword">new</span> LNode;<span class="comment">//生成新结点</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;p-&gt;data;<span class="comment">//输入元素值</span></span><br><span class="line">p-&gt;next=L-&gt;next;L-&gt;next=p;<span class="comment">//插入到表头</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后插法创建单链表："><a href="#后插法创建单链表：" class="headerlink" title="后插法创建单链表："></a>后插法创建单链表：</h3><ul><li>要求：正位序输入n个元素的值，建立带表头结点的单链表L</li><li>设计：<br><strong>a:</strong>创建一个只有头结点的空链表<br><strong>b:</strong>尾指针r初始化，指向头结点<br><strong>c:</strong>根据创建链表包括的元素个数n，循环n次执行以下操作：</li></ul><p>　 ① 生成一个新结点<em>p<br> 　② 输入元素值赋给新结点</em>p的数据域<br> 　③ 将新结点<em>p插入到头结点之后<br> 　④ 尾指针r指向新的尾结点</em>p</p><blockquote><h3 id="单链表操作实例："><a href="#单链表操作实例：" class="headerlink" title="单链表操作实例："></a>单链表操作实例：</h3></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW -2</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;<span class="comment">//Status 是函数返回值类型，其值是函数结果状态代码。</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType; <span class="comment">//ElemType 为可定义的数据类型，此设为int类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType data;<span class="comment">//结点的数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//结点的指针域</span></span><br><span class="line">&#125;LNode,*LinkList;<span class="comment">//LinkList为指向结构体LNode的指针类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">InitList_L</span><span class="params">(LinkList &amp;L)</span></span>&#123;<span class="comment">//算法2.5 单链表的初始化</span></span><br><span class="line"><span class="comment">//构造一个空的单链表L</span></span><br><span class="line">L=<span class="keyword">new</span> LNode;<span class="comment">//生成新结点作为头结点，用头指针L指向头结点</span></span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>;<span class="comment">//头结点的指针域置空</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">GetElem_L</span><span class="params">(LinkList L,<span class="keyword">int</span> i,ElemType &amp;e)</span></span>&#123;<span class="comment">//算法2.6 按序号查找</span></span><br><span class="line"><span class="comment">//在带头结点的单链表L中查找第i个元素</span></span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line">LNode *p;</span><br><span class="line">p=L-&gt;next;j=<span class="number">1</span>;<span class="comment">//初始化，p指向第一个结点，j为计数器</span></span><br><span class="line"><span class="keyword">while</span>(j&lt;i&amp;&amp;p)&#123;<span class="comment">//顺链域向后扫描，直到p指向第i个元素或p为空</span></span><br><span class="line">p=p-&gt;next;++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!p || j&gt;i)<span class="keyword">return</span> ERROR;<span class="comment">//第i个元素不存在</span></span><br><span class="line">e=p-&gt;data;<span class="comment">//取第i个元素</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">//GetElem_L</span></span><br><span class="line"></span><br><span class="line"><span class="function">LNode *<span class="title">LocateElem_L</span><span class="params">(LinkList L,ElemType e)</span></span>&#123;<span class="comment">//算法2.7 按值查找</span></span><br><span class="line"><span class="comment">//在带头结点的单链表L中查找值为e的元素</span></span><br><span class="line">LNode *p;</span><br><span class="line">p=L-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p&amp;&amp;p-&gt;data!=e)</span><br><span class="line">p=p-&gt;next;<span class="comment">//寻找满足条件的结点</span></span><br><span class="line"><span class="keyword">return</span> p;<span class="comment">//返回L中的值为e的数据元素的位置，查找失败返回NULL</span></span><br><span class="line">&#125;<span class="comment">//LocateElem_L</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListInsert_L</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> i,ElemType &amp;e)</span></span>&#123;<span class="comment">//算法2.8 单链表的插入</span></span><br><span class="line"><span class="comment">//在带头结点的单链表L中第i个位置之前插入元素e</span></span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line">LNode *p,*s;</span><br><span class="line">p=L;j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;p=p-&gt;next;++j;&#125;<span class="comment">//寻找第i-1个结点</span></span><br><span class="line"><span class="keyword">if</span>(!p||j&gt;i<span class="number">-1</span>)<span class="keyword">return</span> ERROR;<span class="comment">//i大于表长+1或者小于1</span></span><br><span class="line">s=<span class="keyword">new</span> LNode;<span class="comment">//生成新结点s</span></span><br><span class="line">s-&gt;data=e;<span class="comment">//将结点s的数据域置为e</span></span><br><span class="line">s-&gt;next=p-&gt;next;<span class="comment">//将结点s插入L中</span></span><br><span class="line">p-&gt;next=s;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">//ListInsert_L</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListDelete_L</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> i,ElemType &amp;e)</span></span>&#123;<span class="comment">//算法2.9 单链表的删除</span></span><br><span class="line"><span class="comment">//在带头结点的单链表L中，删除第i个位置，并由e返回值</span></span><br><span class="line">LNode *p,*q;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line">p=L;j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;next &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;p=p-&gt;next;++j;&#125;<span class="comment">//寻找第i-1个结点</span></span><br><span class="line"><span class="keyword">if</span>(!(p-&gt;next) || j&gt;i<span class="number">-1</span>)<span class="keyword">return</span> ERROR;<span class="comment">//i大于表长+1或者小于1</span></span><br><span class="line">q=p-&gt;next;<span class="comment">//临时保存被删结点的地址以备释放</span></span><br><span class="line">p-&gt;next=q-&gt;next;<span class="comment">//改变删除结点前驱结点的指针域</span></span><br><span class="line">e=q-&gt;data;<span class="comment">//保存删除结点的数据域</span></span><br><span class="line"><span class="keyword">delete</span> q;<span class="comment">//释放删除结点的空间</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;<span class="comment">//ListDelete_L</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList_F</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//算法2.10 前插法创建单链表</span></span><br><span class="line"><span class="comment">//逆位序输入n个元素的值，建立到头结点的单链表L</span></span><br><span class="line">LNode *p;</span><br><span class="line">L=<span class="keyword">new</span> LNode;</span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>;<span class="comment">//先建立一个带头结点的空链表</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入 "</span>&lt;&lt;n&lt;&lt;<span class="string">" 个数:\n"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">0</span>;--i)&#123;</span><br><span class="line">p=<span class="keyword">new</span> LNode;<span class="comment">//生成新结点</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;p-&gt;data;<span class="comment">//输入元素值</span></span><br><span class="line">p-&gt;next=L-&gt;next;L-&gt;next=p;<span class="comment">//插入到表头</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//CreateList_F</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateList_L</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//算法2.11 后插法创建单链表</span></span><br><span class="line"><span class="comment">//正位序输入n个元素的值，建立到头结点的单链表L</span></span><br><span class="line">LNode *r,*p;</span><br><span class="line">L=<span class="keyword">new</span> LNode;</span><br><span class="line">L-&gt;next=<span class="literal">NULL</span>;<span class="comment">//先建立一个带头结点的空链表</span></span><br><span class="line">r=L;<span class="comment">//尾指针r指向头结点</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入 "</span>&lt;&lt;n&lt;&lt;<span class="string">" 个数:\n"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">p=<span class="keyword">new</span> LNode;<span class="comment">//生成新结点</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;p-&gt;data;<span class="comment">//输入元素值</span></span><br><span class="line">p-&gt;next=<span class="literal">NULL</span>;r-&gt;next=p;<span class="comment">//插入到表尾</span></span><br><span class="line">r=p;<span class="comment">//r指向新的尾结点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//CreateList_L</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res,a,b,choose;</span><br><span class="line">LNode *L,*p;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"1. 建立链表\n"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"2. 输入数据\n"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"3. 按位置查找\n"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"4. 按值查找\n"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"5. 链表的插入\n"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"6. 链表的删除\n"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"7. 输出数据\n"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"0. 退出\n\n"</span>;</span><br><span class="line"></span><br><span class="line">choose=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(choose!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请选择:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;choose;</span><br><span class="line"><span class="keyword">switch</span>(choose)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//建立一个单链表</span></span><br><span class="line"><span class="keyword">if</span>(InitList_L(L))</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"成功建立链表!\n\n"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//使用后插法创建单链表</span></span><br><span class="line">CreateList_L(L,<span class="number">10</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"成功创建链表!\n\n"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//单链表的按序号查找</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入一个位置用来查找:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="keyword">if</span>(GetElem_L(L,a,res))</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"查找成功!第"</span>&lt;&lt;a&lt;&lt;<span class="string">"个数是："</span>&lt;&lt;res&lt;&lt;<span class="string">"\n\n"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"查找失败\n\n"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//单链表的按值查找</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入一个数值用来查找:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line"><span class="keyword">if</span>(LocateElem_L(L,b)!=<span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"查找成功\n\n"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"查找失败! "</span>&lt;&lt;b&lt;&lt;<span class="string">" 没有找到\n\n"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:<span class="comment">//单链表的插入</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入两个数分别代表插入的位置和数值:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="keyword">if</span>(ListInsert_L(L,a,b))</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">"成功将"</span>&lt;&lt;b&lt;&lt;<span class="string">"插在第"</span>&lt;&lt;a&lt;&lt;<span class="string">"个位置\n\n"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"插入失败!\n\n"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:<span class="comment">//单链表的删除</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入一个位置用来删除:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="keyword">if</span>(ListDelete_L(L,a,res))</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"删除成功!被删除的数是："</span>&lt;&lt;res&lt;&lt;<span class="string">"\n\n"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"删除失败!\n\n"</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:<span class="comment">//单链表的输出</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"现在链表里的数分别是:\n"</span>;</span><br><span class="line">p=L-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;定义：&quot;&gt;&lt;a href=&quot;#定义：&quot; class=&quot;headerlink&quot; title=&quot;定义：&quot;&gt;&lt;/a&gt;定义：&lt;/h1&gt;&lt;p&gt;由n(n&amp;gt;=0)个 数据特性相同的元素构成的有限序列称为线性表。&lt;br&gt;线性表中元素的个数n（n&amp;gt;=0）定义为线性表的长度，n=0时称为空表。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="表" scheme="http://yoursite.com/tags/%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Windows10系统PHP开发环境配置</title>
    <link href="http://yoursite.com/2017/03/09/Windows10%E7%B3%BB%E7%BB%9FPHP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/03/09/Windows10系统PHP开发环境配置/</id>
    <published>2017-03-09T11:07:00.000Z</published>
    <updated>2018-05-05T14:51:24.527Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>Windows下搭建（Apache+PHP+MySQL）=&gt;WAMP</li><li>Linux下搭建（Apache+PHP+MySQL）  =&gt;LAMP</li></ul></blockquote><p>PHP开发环境配置一般有<strong>套件安装</strong>和<strong>自定义安装</strong>两种方式。网上也能够找到套件，可以直接下载一整套开发环境，省去了配置的过程，不过这种方式灵活性不够高，我们也不能了解其中的关系，试着自己动手去配置一下环境，还是有点好处的，我下面详细介绍的是<strong>Windows10系统下自定义安装PHP开发环境</strong>。</p><a id="more"></a><p><strong>8/5：</strong> 稍微修改了一番，同步发到了<a href="http://www.cnblogs.com/Ai-heng/p/7289241.html" target="_blank" rel="noopener">博客园</a></p><p>建议将这几款软件安装到同一个文件夹中，便于管理，我这里都放到了<strong>phpenvir文件夹</strong>中；另外，每安装完一个软件，便进行测试是否安装成功。</p><p>我接下来的安装顺序为：<strong>Apache→PHP→MySQL</strong> </p><h1 id="Apache安装"><a href="#Apache安装" class="headerlink" title="Apache安装"></a>Apache安装</h1><p>官网下载链接:  <a href="http://httpd.apache.org/docs/current/platform/windows.html#down" target="_blank" rel="noopener">点击此处下载</a></p><p><img src="http://opznmu7n5.bkt.clouddn.com/post2_1.png" alt=""></p><p>下面有几个下载链接，可以自行选择。我选用了第二种方式进行下载。</p><p><img src="http://opznmu7n5.bkt.clouddn.com/post2_2.png" alt=""></p><p>根据自己的电脑配置选择32位或者64位。下载完成后，解压文件。接下来，打开解压后的文件，找到<code>conf</code>目录下的<code>http.conf</code>文件，利用文本编译器（例如<strong>Editplus</strong>）打开， <code>Ctrl+F</code></p><pre><code>ServerRoot &quot;C:/Apache24&quot;</code></pre><p>将文件目录地址修改为你的安装位置，例如我安装到了如下位置：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/post2_3.png" alt=""></p><p>所以我这里应该将其改为：</p><pre><code>D:/phpenvir/Apache2.4.25</code></pre><blockquote><p>这里需要注意一点：目录斜杠的符号应该是<code>/</code>或者<code>\\</code>。</p></blockquote><p>在该文件中继续<code>Crtl+F</code>，找到下面的代码：</p><pre><code>#DocumentRoot &quot;c:/Apache24/htdocs&quot;&lt;Directory&quot;c:/Apache24/htdocs&quot;&gt;#</code></pre><p>与上面的做法相同，根据自己的安装位置自行修改：</p><pre><code>#DocumentRoot &quot;D:/phpenvir/Apache2.4.25/htdocs&quot;&lt;Directory&quot;D:/phpenvir/Apache2.4.25/htdocs&quot;&gt;#</code></pre><p>改好之后<strong>保存</strong>文件。</p><p>接下来，利用<strong>管理员身份</strong>（这里一定要<strong>注意</strong>，要通过管理员身份运行，刚开始配置的时候在这里出了错，导致了错误产生）打开<strong>命令提示符</strong>，切换到<strong>Apache</strong>目录下的<strong>bin</strong>目录，执行安装程序 <code>httpd -k install</code>.</p><p><img src="http://opznmu7n5.bkt.clouddn.com/post2_4.png" alt=""></p><p>它会提示你Apache服务安装成功。紧接着输入<code>httpd –k start</code>来启动Apache服务。</p><p><strong>测试</strong>：在浏览器中输入：<a href="http://localhost" target="_blank" rel="noopener">http://localhost</a>, 如果出现下图页面，则表示Apache安装成功。</p><p><img src="http://opznmu7n5.bkt.clouddn.com/post2_5.png" alt=""></p><p><strong>小技巧：</strong></p><ul><li>在切换到<strong>Apache</strong>目录下<strong>bin文件夹</strong>的过程中，可以利用上面讲到的那种方法，另外，还可以先在本地打开<strong>bin文件</strong>所在的位置，然后按住<code>shift</code>键的同时点击鼠标右键，列表中会有一项<strong>在此处打开命令窗口</strong>，点击打开命令提示符，即可直接定位到该位置，省去了切换文件夹的操作。如下图所示：</li></ul><p><img src="http://opznmu7n5.bkt.clouddn.com/phpenvir.png" alt=""></p><ul><li>我们之所以在<strong>bin文件夹</strong>所在位置打开命令提示符，是因为我们的<code>httpd指令</code>位于该文件夹中，如果你希望在任何目录下都可以运行我们的<code>httpd指令</code>（即不需要再每次都切换到<strong>bin目录</strong>去操作），这时则需要我们去设置一下<strong>环境变量</strong>，具体流程如下：</li></ul><ol><li>右键点击<strong>计算机</strong>属性（或者快捷键<code>Win+PauseBreak</code>）打开<strong>计算机系统</strong>界面</li><li>打开界面内的<strong>更改设置</strong></li><li>打开<strong>高级</strong>下面的<strong>环境变量</strong></li><li>打开<strong>系统变量</strong>中的<code>PATH</code></li><li><strong>新增</strong>环境变量，将安装的Apache完整的bin目录填写进去，然后将打开的窗口逐一<strong>确认</strong>即可（从图中可以看出<strong>win10</strong>操作系统中环境变量是按行排列的，而<strong>win7</strong>操作系统中环境变量好像是全在一行，所以配置环境变量的时候还应该在末尾加个<code>;</code>以用来区分不同的环境变量）。</li></ol><p>具体参照下图：</p><p><img src="http://opznmu7n5.bkt.clouddn.com/phpenvir2.png" alt=""></p><h1 id="PHP安装"><a href="#PHP安装" class="headerlink" title="PHP安装"></a>PHP安装</h1><p>Apache安装好之后，在下载PHP开发软件之前，先向<code>httpd.conf</code>文件中写入PHP支持模块。<br>打开httpd.conf文件， <code>Crtl+F</code></p><pre><code>DirectoryIndex index.html</code></pre><p>将其修改为</p><pre><code>#修改首页面文件类型支持DirectoryIndex index.html index.htm index.php</code></pre><p>然后，在文件尾部添加下面的内容：</p><pre><code>#让Apache支持PHPLoadModule php7_module &quot;D:/phpenvir/php7.1.1/php7apache2_4.dll&quot;    #告诉Apache php.ini的位置PHPIniDir  &quot;D:/phpenvir/php7.1.1&quot;    AddType application/x-httpd-php .php .html .htm</code></pre><p>写好之后保存文件。</p><blockquote><p>注意一点，上面添加的内容需要根据自己接下来将要安装的PHP软件版本进行修改，我这里安装的<strong>PHP7.1.1</strong>版本和<strong>Apache2.4.25</strong>版本，要确保能够在下载好的PHP文件夹中找到<strong>D:/phpenvir/php7.1.1/php7apache2_4.dll</strong>和<strong>D:/phpenvir/php7.1.1/php.ini</strong>这两个文件,而<code>php.ini</code>文件是从<code>php.ini-development</code>文件复制而来的，下文会提及到.</p></blockquote><p><img src="http://opznmu7n5.bkt.clouddn.com/phpenvir6.png" alt=""></p><p>接下来，开始下载PHP开发工具。</p><p>官网下载链接：<a href="http://php.net/downloads.php" target="_blank" rel="noopener">点击此处下载</a></p><p><img src="http://opznmu7n5.bkt.clouddn.com/post2_6.png" alt=""></p><p>从图中可以看到有<code>Non Thread Safe</code>和<code>Thread Safe</code>两个版本，我们需要下载<code>Thread Safe</code>的PHP环境。</p><p><img src="http://opznmu7n5.bkt.clouddn.com/post2_7.png" alt=""></p><p>下载完成之后将其解压到之前指定好的文件夹<code>D:/phpenvir/php7.1.1</code>中。</p><p>然后，将php7.1.1目录下的<code>php.ini-development</code>文件重命名为<code>php.ini</code>，用<code>Editplus</code>打开，<code>Crtl+F</code></p><pre><code>;extension_dir=&quot;ext&quot;</code></pre><p>将其修改为：</p><pre><code>#去掉前面的分号，并且将地址更改为自己的安装位置extension_dir=&quot;D:/phpenvir/php7.1.1/ext&quot;</code></pre><p>接着<code>Crtl+F</code></p><pre><code>;extension=php_mysqli.dll  #将前面的分号去掉，这样PHP便可以支持mysqli扩展</code></pre><p>根据开发的不同需求，可以去掉各种<strong>扩展</strong>前面的分号，我们这里先去掉一些能用得到的（前面不带分号的即为自己启用的扩展）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">;extension=php_bz2.dll </span><br><span class="line">extension=php_curl.dll</span><br><span class="line">;extension=php_fileinfo.dll</span><br><span class="line">;extension=php_ftp.dll </span><br><span class="line">extension=php_gd2.dll</span><br><span class="line">;extension=php_gettext.dll</span><br><span class="line">;extension=php_gmp.dll</span><br><span class="line">;extension=php_intl.dll</span><br><span class="line">;extension=php_imap.dll</span><br><span class="line">;extension=php_interbase.dll</span><br><span class="line">;extension=php_ldap.dll</span><br><span class="line">extension=php_mbstring.dll</span><br><span class="line">;extension=php_exif.dll      ; Must be after mbstring as it depends on it</span><br><span class="line">extension=php_mysqli.dll</span><br><span class="line">;extension=php_oci8_12c.dll  ; Use with Oracle Database 12c Instant Client</span><br><span class="line">;extension=php_openssl.dll</span><br><span class="line">;extension=php_pdo_firebird.dll</span><br><span class="line">;extension=php_pdo_mysql.dll</span><br><span class="line">;extension=php_pdo_oci.dll</span><br><span class="line">;extension=php_pdo_odbc.dll</span><br><span class="line">;extension=php_pdo_pgsql.dll</span><br><span class="line">;extension=php_pdo_sqlite.dll</span><br><span class="line">;extension=php_pgsql.dll</span><br><span class="line">;extension=php_shmop.dll</span><br></pre></td></tr></table></figure><p><strong>测试</strong>：</p><p>在Apache目录下的<code>htdocs</code>文件夹中新建Index.php文件，填入以下代码：</p><pre><code>php&lt;?php    phpinfo();?&gt;</code></pre><p>保存之后，在浏览器中输入：<a href="http://localhost/index.php" target="_blank" rel="noopener">http://localhost/index.php</a><br>如果出现如下页面，则证明PHP安装成功。</p><p><img src="http://opznmu7n5.bkt.clouddn.com/phpenvir7.png" alt=""></p><blockquote><p>从上面这个页面中，你可以很清楚地看到自己安装的<strong>PHP版本</strong>和<strong>Apache版本</strong>信息，包括各种扩展功能。</p></blockquote><h1 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h1><p>官网下载链接：<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">点击此处下载</a></p><p><img src="http://opznmu7n5.bkt.clouddn.com/post2_9.png" alt=""></p><p><img src="http://opznmu7n5.bkt.clouddn.com/post2_10.png" alt=""></p><p>这里有两个版本<code>msi</code>和<code>zip</code>.<br><code>msi</code>格式的是我们平时经常使用的那种，可以直接点击安装，按照给出的提示进行安装。而<code>Zip</code>格式的则需要自己去解压，然后使用命令行进行相关配置，才能够使用。</p><p>我个人下载安装的是<code>msi</code>格式的，安装方式比较简单，根据提示一步步安装即可，下面有两个教程对于<strong>MySQL安装</strong>已经解释得很清楚，这里我便不再多做赘述。</p><p>将MySQL安装完成以后，PHP环境配置就大致完成了，需要注意的一点是平时写的php文件要放在Apache目录下的<code>htdocs</code>文件夹下，例如我这里是<code>D:/phpenvir/Apache2.4.25/htdocs</code>文件夹。如果想要自定义一个存放文件夹，还需要在<code>httpd.conf</code>中进行修改，具体操作可以去参考网上的方法。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://segmentfault.com/a/1190000003409708" target="_blank" rel="noopener">PHP环境搭建</a></li><li><a href="http://jingyan.baidu.com/article/67662997305dcd54d51b84d4.html" target="_blank" rel="noopener">MySQL安装教程（msi格式）</a></li><li><a href="http://jingyan.baidu.com/article/f3ad7d0ffc061a09c3345bf0.html" target="_blank" rel="noopener">MySQL安装教程（zip格式）</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Windows下搭建（Apache+PHP+MySQL）=&amp;gt;WAMP&lt;/li&gt;
&lt;li&gt;Linux下搭建（Apache+PHP+MySQL）  =&amp;gt;LAMP&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;PHP开发环境配置一般有&lt;strong&gt;套件安装&lt;/strong&gt;和&lt;strong&gt;自定义安装&lt;/strong&gt;两种方式。网上也能够找到套件，可以直接下载一整套开发环境，省去了配置的过程，不过这种方式灵活性不够高，我们也不能了解其中的关系，试着自己动手去配置一下环境，还是有点好处的，我下面详细介绍的是&lt;strong&gt;Windows10系统下自定义安装PHP开发环境&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>『开博啦』·致自己的第一篇博客</title>
    <link href="http://yoursite.com/2017/03/08/%E3%80%8E%E5%BC%80%E5%8D%9A%E5%95%A6%E3%80%8F%C2%B7%E8%87%B4%E8%87%AA%E5%B7%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/03/08/『开博啦』·致自己的第一篇博客/</id>
    <published>2017-03-08T13:30:00.000Z</published>
    <updated>2018-05-05T14:49:27.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>最好的年纪，莫辜负了最好的自己！<br>不要在该奋斗的时候选择安逸！</p></blockquote><p>自今年寒假在家期间，看了一些大牛的技术博客，觉得「记博客」是一个很好的习惯，既能够去记录自己技术方面的成长，同时也能够鞭策自己继续前进，所以也萌生了「开博」的想法，希望以此方式一点点记录自己水平的提升。</p><a id="more"></a><p>借鉴了网上的一部分看法，最后决定采用<strong>GitHub Pages+jekyll</strong>的方式，经过了一段时间的摸索，从注册GitHub账号，创建GitHub Pages页面，为自己的电脑安装配置jekyll，当自己的博客可以使用后，又参考<a href="https://onevcat.com/" target="_blank" rel="noopener">喵神</a>在GitHub上提供的<a href="https://github.com/onevcat/vno-jekyll" target="_blank" rel="noopener">jekyll模板：Vno</a>为自己的博客进行了一番修饰，自己的博客首页效果就出来了：<a href="https://ai-heng.github.io/" target="_blank" rel="noopener">Ai-Heng</a><br>第一篇博客，自己想计划安排一下日后的生活，定下一个小目标。</p><h1 id="专业课程学习："><a href="#专业课程学习：" class="headerlink" title="专业课程学习："></a>专业课程学习：</h1><p>目前自己处于大二下学期，专业课程也逐渐展开。除了课堂学习之外，我希望能够抓紧自己平时的时间，多去读一些专业相关的书籍。</p><p>结合自己目前的课程，以及这个<a href="http://lucida.me/blog/developer-reading-list/" target="_blank" rel="noopener">程序员必读书单</a>，我觉得目前自己应该去读的书籍大致有：</p><ul><li><a href="https://www.amazon.cn/gp/product/B004VJM5KE/ref=as_li_ss_tl?ie=UTF8&amp;camp=536&amp;tag=lucida-23&amp;creativeASIN=B004VJM5KE&amp;linkCode=as2&amp;creative=3132" target="_blank" rel="noopener">JavaScript DOM编程艺术（第2版）</a><br>因为自己正在学习PHP，而这本书系统地介绍了如何使用JavaScript、html、css创建可用的web页面，是一本前端入门佳作，比较适合自己学习。</li><li><a href="https://www.amazon.cn/gp/product/B009OCFQ0O/ref=as_li_ss_tl?ie=UTF8&amp;camp=536&amp;tag=lucida-23&amp;creativeASIN=B009OCFQ0O&amp;linkCode=as2&amp;creative=3132" target="_blank" rel="noopener"> 算法（第4版）</a><br>这本书再结合自己课堂上正在学习的《数据结构与算法》，可以很好地帮助自己理解掌握编程过程中涉及到的一些算法和数据结构等。</li><li><a href="https://www.amazon.cn/gp/product/B004BJ18KM/ref=as_li_ss_tl?ie=UTF8&amp;camp=536&amp;tag=lucida-23&amp;creativeASIN=B004BJ18KM&amp;linkCode=as2&amp;creative=3132" target="_blank" rel="noopener"> 深入理解计算机系统（第 2 版）</a><br>被称之为「CSAPP」,它创造性的把操作系统，计算机组成结构，数字电路，以及编译原理这些计算机基础学科中的核心概念汇集在一起，从而覆盖了指令集体系架构，汇编语言，代码优化，计算机存储体系架构，链接，装载，进程，以及虚拟内存这些程序员所需了解的关键计算机系统知识。所以，对于我而言，若是能啃完这本书，对于自己肯定是大有裨益。</li><li><a href="https://www.amazon.cn/gp/product/B0011AP7RY/ref=as_li_ss_tl?ie=UTF8&amp;camp=536&amp;tag=lucida-23&amp;creativeASIN=B0011AP7RY&amp;linkCode=as2&amp;creative=3132" target="_blank" rel="noopener">计算机程序的构造与解释</a><br>一直以来，我也是觉得，总是学习编程语言的语法什么的，还是不能够深入地去理解如何去很好地程序设计，这本书专注于程序设计方法而非编程语言本身，能够给自己带来一些启发。</li></ul><p>书单就大致整理至此，希望自己能够真正沉下心来，有所收获。</p><h1 id="日常生活规划"><a href="#日常生活规划" class="headerlink" title="日常生活规划  "></a>日常生活规划  <hr></h1><p>除了自己的专业学习之外，日常生活中，我也有着一定的期许，希望能够做时间的主人，多做一些自己喜欢的事情。继续保持<strong>健身、运动、听音乐、写日记</strong>的好习惯。同时，新的一年，又希望自己能够多多地去<strong>看电影、旅游、逛知乎…</strong>。</p><p>所以，加油↖(^ω^)↗…    </p><p><img src="http://opznmu7n5.bkt.clouddn.com/post1_1.jpg" alt=""></p><p><img src="http://opznmu7n5.bkt.clouddn.com/post1_2.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;最好的年纪，莫辜负了最好的自己！&lt;br&gt;不要在该奋斗的时候选择安逸！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;自今年寒假在家期间，看了一些大牛的技术博客，觉得「记博客」是一个很好的习惯，既能够去记录自己技术方面的成长，同时也能够鞭策自己继续前进，所以也萌生了「开博」的想法，希望以此方式一点点记录自己水平的提升。&lt;/p&gt;
    
    </summary>
    
      <category term="心情随笔" scheme="http://yoursite.com/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="心语" scheme="http://yoursite.com/tags/%E5%BF%83%E8%AF%AD/"/>
    
  </entry>
  
</feed>
